<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>前端学科独家面试宝典</title>
      <link href="year/04/25/u/"/>
      <url>year/04/25/u/</url>
      
        <content type="html"><![CDATA[<h4 id="免责声明：该文来自传智播客，仅供学习使用，禁止用于商业用途，禁止转载，否则追究法律责任！"><a href="#免责声明：该文来自传智播客，仅供学习使用，禁止用于商业用途，禁止转载，否则追究法律责任！" class="headerlink" title="免责声明：该文来自传智播客，仅供学习使用，禁止用于商业用途，禁止转载，否则追究法律责任！"></a>免责声明：该文来自传智播客，仅供学习使用，禁止用于商业用途，禁止转载，否则追究法律责任！</h4><h4 id="文中难免有错误，获取完整版pdf文档关注微信公众号“51学代码”，回复“前端面试”获取资料。"><a href="#文中难免有错误，获取完整版pdf文档关注微信公众号“51学代码”，回复“前端面试”获取资料。" class="headerlink" title="文中难免有错误，获取完整版pdf文档关注微信公众号“51学代码”，回复“前端面试”获取资料。"></a>文中难免有错误，获取完整版pdf文档关注微信公众号“51学代码”，回复“前端面试”获取资料。</h4><p><img src="1.png"></p><pre class="line-numbers language-前端面试宝典" data-language="前端面试宝典"><code class="language-前端面试宝典">前端学科独家面试宝典前端基础 HTML(5)1. Html5 新增那些标签? 2. 布局标签:header,section,footer,article,aside 表单标签: datalist,input:type&#x3D;’week|date|time|datetime|number|search|url|tel| color|email|range’多媒体标签: audio(音频), video(视频)其他标签: progress(进度条),meter(度量器) 补充:Html5 新 属 性 : hidden( 隐 藏 元 素 ),required( 必 填 ),minlength( 最 小 长 度),maxlength(最大长度),pattern(正则表达式),placeholder(提示文本),autocomplete(自动填充),autofocus(自动获取焦点)3. 行内元素和块级元素的具体区别是什么？块级元素独占一行页面空间, 不会和其他元素共享一行页面空间; 行内元素可以和其他非块级元素(行内,行内块)共享一行页面空间.4. 列举几个块级标签和行内标签？块级标签:div,p,h1~h6,section,header,footer 行内标签:span,em(i),strong(b),u,em(i),a5. 行内元素的 padding 和margin 可设置吗？行内元素设置水平方向的padding 和margin 是可以生效,但是设置垂直方向的padding 和margin 虽然看起来对标签起作用,但实际并没有对周围元素产生任何影响, 所以行内元素设置垂直方向的 padding 和 margin 是无效的.6. 简述 readyonly 与 disabled 的区别readyonly 是设置表单元素为只读状态;disabled 是设置表单元素为禁用状态.7. 哪些标签都存在伪元素?大部分容器标签(大部分双标签)都有伪元素, iframe 没有伪元素; 大部分单标签都没有伪元素, 但是 img 有伪元素8. 伪元素可以使用 js 来操作吗?js 不可以操作伪元素9. Html5 的网页为什么只需要写&lt;!DOCTYOE HTML&gt;?HTML 4.01 中的 doctype 需要对 DTD 进行引用，因为 HTML 4.01 基 于 SGML。而 HTML 5 不基于 SGML，因此不需要对 DTD 进行引用，但是需要 doctype 来规范浏览器的行为。其中，SGML 是标准通用标记语言,简单的说，就是比 HTML,XML 更老的标准，这两者都是由 SGML 发展而来的, 而 HTML5 不是的。CSS(3)10.px em rem 这三中长度单位的区别？px 是一个绝对单位;em 和 rem 是一个相对单位, em 参考的是当前元素的字体(font-size) 大小, 参考的是页面根元素 html 的字体(font-size)大小.11. CSS3 新增伪类有那些？p:first-of-type 选择属于其父元素的首个&lt;p&gt;元素。p:last-of-type 选择属于其父元素的最后一个&lt;p&gt;元素。p:nth-child(2)选择属于其父元素的第二个子元素。p:nth-type-of(2)选择属于其父元素的第二个子元素 p。:enabled、:disabled 控制表单控件的禁用状态。:checked，单选框或复选框被选中。11.谈谈 css 选择器优先级顺序以及判定标准? 优先级从低到高:通配符选择器&lt;标签选择器&lt;类选择器(属性选择器)&lt;ID 选择器; 行内样式&lt;使用!important 修饰的属性优先级最高;如果两个选择器(属性完全相同)同时命中一个元素, 并且权重一样, 则书写顺序会影响优先级, 后一个选择器的属性会覆盖前一个选择器中相同的属性.12. position 几 个 属 性 的 作 用 ？ position的常见四个属性值： relative，absolute，fixed，static。一般都要配合&quot;left&quot;、&quot;top&quot;、&quot;right&quot;以及&quot;bottom&quot; 属性使用。1）static：默认位置，（static 元素会忽略任何 top、 bottom、left 或 right 声明）。一般不常用。2）relative：位置被设置为 relative 的元素，偏移的 top，right， bottom，left 的值都以它原来的位置为基准偏移。注意 relative 移动后的元素在原来的位置仍占据空间。3）absolute：位置设置为 absolute 的元素，可定位于相对于包含它的元素的指定坐标。意思就是如果它的父容器设置了 position 属性，并且 position 的属性值为 absolute 或者 relative，那么就会依据父容器进行偏移。如果其父容器没有设置 position 属性，那么偏移是以 body 为依据。注意设置 absolute 属性的元素在标准流 中 不 占 位 置 。4）fixed：位置被设置为 fixed 的元素，可定位于相对于浏览器窗口的指定坐标。不论窗口滚动与否，元 素都会留在那个位置。它始终是以body 为依据的。注意设置 fixed 属性的元素在标准流中不占位置。13. position 设 置 为 absolue 和 fixed 有 什 么 区 别 ? absolute 是绝对定位, 绝对定位参考的是有明确定位的父元素, 如果直接父元素没有明确定位会一直向上查找,如果父元素都没有明确定 位 , 则 参 考 body 标 签 ; fixed 是固定定位, 参考对象是浏览器.14.在一个页面中给多个元素设置相同的 id, 会导致什么问题?会导致通过 js 获取 dom 元素的时候, 只能获取到第一个元素, 后面的元素都无法正常获取.15.用伪类实现一个上三角?&lt;div class&#x3D;’triangle_border_up’&gt;&lt;&#x2F;div&gt;.triangle_border_up&#123; border:20px solid red; border-top:0;border-left:20px solid transparent; border-right:20px solid transparent; width:0px; &#125;[在此处键入].parent&#123;background: #DDD; width: 400px; height: 400px; &#125;.son&#123;position: relative; background: pink; width: 200px; height: 200px;top: 50%;left: 50%;transform: translate(-50%,-50%);&#125;16.怎么让一个不定宽高的 div，垂直水平居中？方案一:transform方案二:flex 弹性布局方案三:绝对定位.parent&#123;display: flex;justify-content: center; align-items: center; background: #DDD;width: 400px;height: 400px; &#125;.son&#123;background: pink; width: 200px; height: 200px; &#125;.parent&#123;[在此处键入].clear:after&#123; content:&#39;&#39;; display:block; overflow:hidden; visibility:hidden; clear:both; &#125;17.清除浮动有哪些常用的方式?额外标签法: 在浮动元素的最后添加一个块级标签, 给其设置一个clear:both 的属性 (缺点:会在页面上产生很多空白标签); 给浮动元素的父元素设置高度:(缺点:不太灵活);给浮动元素的父元素设置 overflow:hidden; 使用伪元素法:(推荐使用)18.让两个块级元素在一行显示有哪些做法?position: relative; background: #DDD; width: 400px; height: 400px; &#125;.son&#123;position: absolute; top:0;bottom:0; left:0; right:0;background: pink; width: 200px; height: 200px; margin: auto; &#125;[在此处键入]设置显示模式:display:inline|inline-block;flex 布局: 给父元素设置 display:flex; 使用浮动19.如何设置一个元素在垂直方向居中?首先不考虑代码的灵活性, 可以使用 margin 外边距或者 padding 内边距来实现元素在垂直方向居中显示.具体可以给父元素设置一个垂直方向的padding 内边距; 也可以给需要垂直居中的子元素设置垂直方向的外边距.其次如果这个需要垂直居中的元素是一个单行文本, 则可以使用行高等于标签高度的方式来实现.也可以使用 css3 中的flex 布局, 使用 align-items:center 设置元素在侧轴(垂直方向)居中对齐.也可以使用绝对定位的方式, 设置元素在相对定位的父元素中垂直对齐.20.说说图片懒加载的原理?实际开发中用过哪些图片懒加载的插件?img 标签在加载图片的时候, 是通过请求 src 属性所指向的文件来加载图片的, 那如果 img 标签本身没有 src 属性的话, 那么 img 标签在渲染的时候, 就不会加载图片.所以图片懒加载的原理就是将 img 标签 的 src 属性给暂时先改成一个自定义的属性, 这样页面已加载就会不去加载图片, 当 img 标签所在区域进入屏幕可视区域后, 从存放图片路径的自定义属性中获取图片地址,并动态的设置给对应 img 标签的 src 属性, 这样浏览器就会自动帮助我们去请求对应的图片[在此处键入]资源, 也就实现了所谓的图片懒加载.图片懒加载的插件有很多, 大部分是基于 jquery 的, 比如 jquery.lazyload. 当然 vue 的中也有实现了图片懒加载的插件, 比如 vue-lazyload, vue 的组件库中也有图片懒加载的组件.21. css3 新增了那些新特性? 媒体查询(@media);transfrom 系列:translate 平移, scale 缩放,rotate 旋转动画(animate);过渡效果(transition);flex 弹性(伸缩)布局;盒模型计算方式 box-sizing:border-box; 线性渐变(linear-gradient),径向渐变;伪元素, 文字阴影(text-shadow), 边框阴影(box-shadow), 圆角(border-radius)22. display:none 和visibility:hidden 的区别?display:none 隐藏元素后,不占位; visibility:hidden 隐藏元素后占位.23. Less 是什么?Less 是一种 css 预处理语言, 在 less 中可以定义一些变量和表达式10[在此处键入]以及使用嵌套语法; less 中使用@定义变量(@baseColor:pink); 后期可以通过一些编译工具(less)将 less 编译成浏览器能直接识别的css 样式. 所以 less 只是在开发阶段使用的一种中间语言, 使用less 的目的是提高开发效率以及提高代码的可维护性.24. Scss 是什么?(sass)scss 是一种 css 预处理语言, 在 less 中可以定义一些变量和表达式以及使用嵌套语法; scss 中使用$定义变量($baseColor:pink); 后期可以通过一些编译工具(node-sass)将 less 编译成浏览器能直接识别的 css 样式. 所以 scss 只是在开发阶段使用的一种中间语言, 使用 scss 的目的是提高开发效率以及提高代码的可维护性.25. Stylus 是什么?(.styl)stylus 是一种 css 预处理语言, 在 stylus 中可以定义一些变量和表达式以及使用嵌套语法(stylus 中是使用缩进的语法表示嵌套关系); 后期可以通过一些编译工具(stylus)将 stylus 编译成浏览器能直接识别的css 样式. 所以stylus 只是在开发阶段使用的一种中间语言, 使用 stylus 的目的是提高开发效率以及提高代码的可维护性.11[在此处键入]JavaScriptJavasSript 基础 26. js 中有哪些数据类型int( 数 值 ), string( 字 符 串 ), boolean( 布 尔 ), null( 空 ),undefined(未定义), object(对象)27. typeof(typeof()) 和 instanceof 的区别?typeof 可以判断变量的数据类型,返回值是字符串;a instanceof b 是判断 b 是不是在 a 的原型链上, 也可以实现判断数据类型, 返回值为布尔.28.怎么判断两个对象相等? 先判断俩者是不是对象;再判断俩个对象的所有 key 值是否相等相同;最后判断俩个对象的相应的 key 对应的值是否相同29. js 中函数有哪些定义方式函数声明:function fn()&#123;&#125;函数表达式:var fn&#x3D;function()&#123;&#125;构造函数:var fn&#x3D;new Function(‘ 参数 1’,’ 参数 2’,’ 函数体’)12[在此处键入]30. js 中函数有哪些调用形式?普通函数,对象的方法,事件处理函数,构造函数,回调函数31.&quot;&#x3D;&#x3D;&quot; 和 &quot;&#x3D;&#x3D;&#x3D;&quot; 的区别？&#x3D;&#x3D;只会对值进行比较,&#x3D;&#x3D;&#x3D;不仅会对值进行比较,还会对数据类型进行比较.32.js 中的常用内置对象有哪些？并列举该对象的常用方法？Math(数学相关);Date(日期相关);Array;Object33.列举和数组操作相关的方法push:将元素添加到数组的末尾, 返回值是数组长度pop:将数组最后一个元素弹出, 返回值是被弹出的元素unshift:在数组的开头插入一个元素,返回值是数组的长度shift:将数组第一个元素弹出,返回值是被弹出的元素splice(index,len):删除数组中指定元素concat:连接数组reverse: 翻转数组34.列举和字符串操相关的方法substr(start,len)&#x2F;substring(start,end): 截取字符串13[在此处键入]slice:从数组会字符串中截取一段indexOf&#x2F;lastIndexOf:查找某一个字符是否存在于另外一个字符串中, 存在则返回索引, 不存在则返回-1;indexOf 是从前向后顺序查找;lastIndexOf:是从后向前查找replace:替换字符串特定的字符toUpperCase:将字符串转成大写toLowerCase:将字符串转成小写charAt:获取字符串中指定索引的字符35.document.write 和 innerHTML 的区别?document.write 是指定在整个页面区域的内容, innerHTML 是指定某一个元素的内容.36.分别阐述 split(),slice(),splice(),join()？split 可以使用一个字符串切割另外一个字符串, 返回值是数组;slice 可以从数组中截取一部分(字符串对象也有 slice 方法);splice(index,len)可以删除指定的数组元素;join 可以将数组元素使用特定的连接符拼接成字符串37.例举 3 中强制类型转换和 2 中隐式类型转换？强制转换:14[在此处键入]转化成字符串 toString() String() 转换成数字 Number()、parseInt()、 parseFloat(); 隐式转换:转换成布尔类型 Boolean() 隐式拼接字符串例子 var str &#x3D; &quot;&quot; + - &#x2F; % &#x3D;&#x3D;&#x3D;38.如何判断一个变量 foo 是数组?Javascript 高级 39.什么是原型对象?每一个构造函数都有一个 prototype 的属性, 这个属性的值是一个对象, 这个对象就叫做构造函数的原型对象; 一般建议将构造函数的成员属性绑定在原型对象 prototype 上, 因为原型对象 prototype 身上的属性默认可以通过实例对象访问到; 这样做可以保证在每次通过 new 关键字创建实例对象的时候, 这些方法不会被重复在内存中创建.40.什么是原型链?foo instanceof Array; foo.constructor &#x3D;&#x3D; Array; Array.isArray(foo)Object.prototype.toString.call(foo)&#x3D;&#x3D;&quot;[object Array]&quot;15[在此处键入]function Person(name,age,gender)&#123; this.name&#x3D;name||&#39;&#39;; this.age&#x3D;age||&#39;&#39;; this.gender&#x3D;gender||&#39;&#39;; &#125;Person.prototype.sayHi&#x3D;function()&#123; console.log(&#39;I am &#39;+this.name);&#125;每个构造函数都有一个 prototype 属性, 即原型对象, 通过实例对象的 proto 属性也可访问原型对象;而原型对象本质也是一个对象, 是对象就有自己的原型对象, 最终形成的链状的结构称为原型链.41.什么是构造函数?构造函数本质也是一个函数, 只不过这个函数在定义的时候首字母一般需要大写; 构造函数调用的时候,必须通过一个 new 关键字来调用; 我们一般不直接使用构造函数, 而是使用构造函数创建出来的实例对象. 构造函数是 js 面向对象的一个重要组成部分.42.js 中实现继承的方式?ES6 之前官方并没有提供一种实现继承的语法, 所以大部分继承方式都是程序员通过代码在模拟.常见的继承方式有以下几种:原型继承;借用构造函数继承; 组合继承;16[在此处键入]function fn()&#123;var a&#x3D;100;return function()&#123; return a;ES6 之后使用 extends 关键字实现继承(class Student extends Person&#123;&#125;)43.什么是闭包, 有什么作用, 使用的时候需要注意什么?闭包是一个跟函数相关的概念,表现形式是一个父函数内部,嵌套了一个子函数, 子函数直接或间接的被返回给外部作用域, 并且子函数中会使用到父函数局部作用域中的变量.当我们在外部调用这个子函数的时候, 就会发生闭包现象.闭包的作用:闭包可以延展一个函数的作用域注意事项:不能滥用闭包, 会导致内存泄漏function Student(name,age,gender,score)&#123;&#x2F;&#x2F; 通过构造继承属性Person.call(this,name,age,gender);&#125;&#x2F;&#x2F; 通过原型继承,继承方法Student.prototype&#x3D;new Person();&#x2F;&#x2F; 修改 constructor 的指向Student.prototype.constructor&#x3D;Student;&#x2F;&#x2F; 动态添加成员方法Student.prototype.printScore&#x3D;function()&#123; console.log(&#39;my score is &#39;+this.score);&#125;&#x2F;&#x2F; 创建 Student 实例对象var s1&#x3D;new Student(&#39;zs&#39;,30,&#39;男&#39;,90); s1.sayHi();s1.printScore();17[在此处键入]44.什么是内存泄漏, 那些操作会引起内存泄漏?内存泄漏是指本应该被垃圾回收机制回收的内存空间由于某种特殊原因没有及时被回收, 称之为内存泄漏. 滥用全局变量和滥用闭包都会导致内存泄漏.45.什么是预解析?JS 代码在执行之前,解析引擎会对代码进行一个预先的检查, 主要会对变量和函数的声明进行提升, 将变量和函数的声明提到代码的最前 面.变量只提升声明, 不提升赋值.46.说说你对 this 关键字的理解this 在不同的场景下指向不太一样, 主要分为一下几种情况: 普通函数中指向全局 window;对象的成员方法中指向该方法的宿主对象; 构造函数中指向 new 出来的实例对象;事件处理函数中指向事件源; 回调函数中指向全局 window47. call&#x2F;apply&#x2F;bind 的区别&#125;var fn1&#x3D;fn(); fn1();18[在此处键入]这三个方法都是函数这个特殊对象的方法,通过这三个方法都可以改变函数内部 this 的指向.不同点:call 和apply 会调用一次函数, 而 bind 不会调用函数, 只会在内存中创建一个函数的副本(修改过 this 指向的函数).call 从第二个参数开始需要一个参数列表,apply 第二个参数需要是一个数组48. caller 和callee 的区别是什么?函数 fun.caller 返回调用 fun 的函数对象，即 fun 的执行环境，如果 fun 的执行环境为 window 则返回 null;Callee 是函数的 arguments 这个特殊对象的一个属性, 指向函数本身.49. new 操作符具体干了什么呢? 第一步创建一个空对象;第二步将 this 指向空对象;第三步动态给刚创建的对象添加成员属性; 第四步隐式返回 this代码分析 50. 下面代码的执行结果是什么?19[在此处键入]依次输出: hello one,hello four,hello three,hello two51. 下面代码执行结果是什么?执行结果:输出 &#123;id: 1, name: &quot;test&quot;&#125;分析过程:对象是一种引用数据类型, 简单的 b&#x3D;a 只是把 a 在内存中的地址赋值给了 b, 所以修改 b 会影响 a.52. 下面代码执行结果是什么?var hellword&#x3D;(function()&#123; console.log(&#39;hello one&#39;); setTimeout(function()&#123;console.log(&#39;hello two&#39;);&#125;,100);setTimeout(function()&#123; console.log(&#39;hello three&#39;);&#125;,0);console.log(&#39;hello four&#39;);&#125;());var a&#x3D;&#123;id:10&#125;b&#x3D;a; b.id&#x3D;1; b.name&#x3D;&#39;test&#39;;console.log(a);var length&#x3D;10; function fn()&#123;console.log(this.length);20执行结果:在控制台输出 10,2分析过程:fn(); 此时 this 指向 window, 所以 this.length&#x3D;10;arguments[0]()中的 this 永远指向 arguments, 而 arguments 本身有一个 length 属性, 就是参数的个数.53. 下面代码执行完毕, 浏览器依次弹出什么?执行结果:依次弹出: number; number,undefined,number分析过程:自调用函数会开辟一个局部作用域, var a&#x3D;b&#x3D;5 这句代码 var 只会修饰&#125;var obj&#x3D;&#123; length:5,method:function(fn)&#123; f n(); arguments[0]();&#125;&#125;obj.method(fn,1);(function test()&#123; var a&#x3D;b&#x3D;5; alert(typeof a); alert(typeof b);&#125;)()alert(typeof a); alert(typeof b);21a, 所以 a 是一个局部变量, b 是全局变量22[1,2,3].map(function(item,index)&#123;&#x2F;&#x2F; console.log(item,index);&#x2F;&#x2F;parseInt(数值,进制) parseInt(1,0); parseInt(2,1); parseInt(3,2);&#125;);54. 下面代码输出结果是什么? [1,2,3].map(parseInt);输出结果:[1,NaN,NaN]; 分析过程:55. 下面代码执行结果是什么?执行结果:报错(Uncaught TypeError: square is not a function)分析过程:函数表达式方式声明的函数只提升声明, 不提升赋值, 所以不能再声明之前调用.56. 下面代码执行结果是什么?console.log(square(5)); var square&#x3D;function(n)&#123;return n*n; &#125;23for (var i &#x3D; 1; i &lt;&#x3D; 5; i++) &#123; (function (i) &#123;setTimeout(function () &#123; console.log(i);&#125;, 1000*i)&#125;)(i) &#125;执行结果: 输出 true分 析 过 程 : 2.0&#x3D;&#x3D;’2’ 返 回 true; true&#x3D;&#x3D;new Boolean(true) 返 回 true;true&#x3D;&#x3D;’1’返回 true; 所以最终结果是 true.57. 下面的代码会输出什么? 怎么改动下面代码, 使其依次输出1,2,3,4,5执行结果:在控制台输出:6,6,6,6,6 改造后的代码:58. 下面代码执行结果是什么?console.log(2.0&#x3D;&#x3D;&#39;2&#39;&#x3D;&#x3D;new Boolean(true)&#x3D;&#x3D;&#39;1&#39;);for(var i&#x3D;1;i&lt;&#x3D;5;i++)&#123; setTimeout(function()&#123;console.log(i);&#125;,1000);&#125;var a&#x3D;10; function Foo()&#123;if(true)&#123;24&#x2F;&#x2F; 数组去重function unique(arr)&#123; var newArr&#x3D;[];for(var i&#x3D;0;i&lt;arr.length;i++)&#123; if(newArr.indexOf(arr[i])&#x3D;&#x3D;-1)&#123;执行结果: 弹出 10分析过程: let 声明的变量有块级作用域, 所以 let 声明的 a 只在 if 条件的花括号中生效, 所以会向上级作用域查找.编码题 59. 使用 js 封装一个冒泡排序60. 封装一个方法实现去除数组中的重复元素方案一:let a&#x3D;4; &#125;alert(a);&#125;Foo();&#x2F;&#x2F; 冒泡排序function sortBubble(arr)&#123; for(vari&#x3D;0;i&lt;arr.length;i++)&#123;for(var j&#x3D;0;j&lt;arr.length- i;j++)&#123; if(arr[j]&gt;arr[j+1])&#123;var temp&#x3D;arr[j]; arr[j]&#x3D;arr[j+1]; arr[j+1]&#x3D;temp; &#125; &#125; &#125;return arr;25alert(arr.join(&#39; &#39;));方案二:分析过程:Set 是es6 中新增的一种数据类型, 和数组很类似, 但是元素不能重复;Array.from 也是 es6 新增的方法, 可以将类数组对象(伪数组, set), 转换成数组.61. 已知数组 var arr&#x3D;[‘This’, ’is’, ‘Woqu’, ‘Company’], alert 出”This is Woqu Company”.62. 编写一个 js 函数 parseQueryString, 它的用途是把 url 中的参数解析为一个对象, 如var url&#x3D;”http:&#x2F;&#x2F;www.demo.cn&#x2F;index.html?key1&#x3D;val1&amp;key2-val2” &#125;return newArr; &#125;var arr&#x3D;[1,2,2,3,3,4] Array.from(new Set(arr))function parseQueryString(argu) &#123; var str &#x3D; argu.split(&#39;?&#39;)[1]; var result &#x3D; &#123;&#125;;var temp &#x3D; str.split(&#39;&amp;&#39;);for (var i &#x3D; 0; i &lt; temp.length; i++) &#123; var temp2 &#x3D; temp[i].split(&#39;&#x3D;&#39;); result[temp2[0]] &#x3D; temp2[1];25[在此处键入]63. 统计 str&#x3D;”jhadfgskjfajhdewqe”字符串中出现最多的字母?64. 编码实现对象深拷贝return result; &#125;function countStr(str)&#123; var json &#x3D; &#123;&#125;;&#x2F;&#x2F; 循环完毕后会得到一个对象,如&#123;a:0,b:1,c:2,d:3,e:4&#125; for (var i &#x3D; 0; i &lt; str.length; i++) &#123;if (!json[str.charAt(i)]) &#123; json[str.charAt(i)] &#x3D; 1;&#125; else &#123; json[str.charAt(i)]++; &#125;&#125;;var iMax &#x3D; 0; var iIndex &#x3D; &#39;&#39;;&#x2F;&#x2F; 查找出现次数做多的字符,和出现次数for (var i in json) &#123; if (json[i] &gt; iMax) &#123;iMax &#x3D; json[i]; iIndex &#x3D; i; &#125; &#125;return &#123;function deepClone(obj) &#123;if (obj instanceof Obejct) &#123;let isArray &#x3D; Array.isArray(obj) let cloneObj &#x3D; isArray ? [] : &#123;&#125; for (let key in obj) &#123;cloneObj[key] &#x3D; isObject(obj[key]) ? deepClone(obj[key]) : obj[key] &#125; &#125;else&#123;2665. 有 Student 和 Person 两个类, Person 类有 name 属性和 sayName 方 法, Student 类继承自 Person 类. 分别使用 ES5 和 ES6 的语法实现.ES6 实现:ES5 实现throw new Error(&#39;obj 不是一个对象！&#39;) &#125;return cloneObj&#125;class Person&#123; constructor(props)&#123;this.name&#x3D;props.name; &#125;sayName()&#123;console.log(&#96;My name is $&#123;this.name&#125;&#96;);&#125; &#125;class Student extends Person&#123; constructor(props) &#123;super(props); this.name&#x3D;props.name; &#125;function Person(name&#x3D;&#39;&#39;)&#123; this.name&#x3D;name; &#125;Person.prototype.sayName&#x3D;function()&#123; console.log(&#96;My name is $&#123;this.name&#125;&#96;);&#125;function Student(name)&#123; Person.call(this,name) &#125;2766. 写一个左中右布局占满屏幕, 其中左右两块固定宽度 200,中间自适应,要求先加载中间块, 请写出结构和样式Css 样式html 结构: *&#123;padding: 0;margin: 0; &#125;html,body&#123; height: 100%; &#125;.center&#123; height: 100%;background: #1FA363; margin:0 200px; &#125;.left&#123;position: absolute; width: 200px; height: 100%;left: 0;top: 0;background: #DC4C3F; &#125;.right&#123;position: absolute; width: 200px; height: 100%;right: 0;top: 0;background: #FFCE44; &#125;&lt;div class&#x3D;&quot;center&quot;&gt;center&lt;&#x2F;div&gt; &lt;div class&#x3D;&quot;left&quot;&gt;left&lt;&#x2F;div&gt; &lt;div class&#x3D;&quot;right&quot;&gt;right&lt;&#x2F;div&gt;28思路分析: html 标签的加载顺序是自上而下, 所以要想让中间部分先加载, 只需要把中间部分的标签写在最前面即可.67. 如何扩展 jquery 的静态方法, 如$.getName();68. 使用 js 求 10000 以内的所有质数的和.69. 使用 js 打印出 1-10000 之间的所有对称数(如 121, 1331)$.extend(&#123;getName: function () &#123;&#x2F;&#x2F; do something&#125;&#125;);function getZs(num) &#123; var sum&#x3D;0;for (var i &#x3D; 2; i &lt;&#x3D; num; i++) &#123;&#x2F;&#x2F;4&#x2F;&#x2F;假设所有的数都是质数var flag &#x3D; true;&#x2F;&#x2F;通过嵌套循环找到 i 除了 1 和本身以外所有可能出现的因子for (var j &#x3D; 2; j &lt; i; j++) &#123;&#x2F;&#x2F;判断 i 是否为质数if (i % j &#x3D;&#x3D; 0) &#123;&#x2F;&#x2F;能进到当前的分支 说明不是质数flag &#x3D; false; &#125; &#125;if (flag &#x3D;&#x3D; true) &#123; console.log(i); sum+&#x3D;i; &#125; &#125;return sum; &#125;2970. 二维数组根据 num 的值进行升序排序:实现过程:71. Js 中 eval 的功能是什么? 缺点是什么?eval 函数的作用: 可以将一个字符串当做 js 代码执行. 缺点: 执行效率比较低, 不安全.72. 有一个数列(0,1,1,2,3,5,8,13,21...),定义函数求数列第 n 项function isSymNum(start, end) &#123;start &#x3D; (start &lt;&#x3D; 11 ? 11 : start); for (var i &#x3D; start; i &lt;&#x3D; end; i++) &#123;var strI &#x3D; +(i.toString().split(&#39;&#39;).reverse().join(&#39;&#39;)); if (strI &#x3D;&#x3D; i) &#123;console.log(i);&#125; &#125; &#125;var list &#x3D; [&#123;id: 32, num: 5&#125;,&#123;id: 28, num: 12&#125;,&#123;id: 23, num: 9&#125;]list.sort(function(a,b)&#123; return a.num-b.num;&#125;)30var init&#x3D;1;Object.defineProperty(window, &#39;a&#39;, &#123;73. 使用什么办法能让如下条件判断成立?方案一:方案二:思路分析:数组本身有一个 join 方法, 在把数组当做简单数据类型调用的时候, 会自动调用 join; 而 shift 也是一个数组的方法, shift 是将数组的开头元素删除, 返回值就是删除的元素, a.join&#x3D;a.shift 相当于在每一次调用a 的时候都会调用 shift 方法. 方案三:function getFibo(n)&#123; if(n&#x3D;&#x3D;1) return 0;if(n&#x3D;&#x3D;2) return 1;return getFibo(n-1)+getFibo(n-2);&#125;if(a&#x3D;&#x3D;1&amp;&amp;a&#x3D;&#x3D;2&amp;&amp;a&#x3D;&#x3D;3)&#123; console.log(&#39;ok&#39;) &#125;var a&#x3D;&#123;value:1, toString:function()&#123;return this.value++;&#125; &#125;var a &#x3D; [1,2,3]; a.join &#x3D; a.shift;3174. 下面代码输出结果是什么? 输出结果: http:&#x2F;&#x2F;www.csser.com&#x2F;WebAPI75.列举 DOM 元素增删改查的 API创建 DOM: document.createElement(); 查 找 DOM: document.getElementById(); document.getElementsByClassName(); document.getElementsByName(); document.querySelectorAll(); document.querySelector();追加 DOM: parentDom.appendChild();get: function () &#123; return init++;&#125;function changeObjectProperty(o)&#123;&#x2F;&#x2F; 输出的是这个结果o.siteUrl &#x3D; &quot;http:&#x2F;&#x2F;www.csser.com&#x2F;&quot;; o &#x3D; new Object();o.siteUrl &#x3D; &quot;http:&#x2F;&#x2F;www.popcg.com&#x2F;&quot;; &#125;var CSSer &#x3D; new Object(); changeObjectProperty( CSSer );console.log( CSSer.siteUrl );32移除 DOM: parentDom.removeChild()76.BOM 中有哪些常用的对象? location:location.href; 页面 url 地址location.hash; url 中#后的部分location.search; url 中?后的部分(查询字符串)location.reload(); 刷新页面; navigator:navigator.userAgent: 浏览器的 userAgent 信息history:history.go(1);前进 1 步history.go(-1);后退 1 步;history.forward();前进history.back(); 后退screen:screen.availWidth: 屏幕有效宽度screen.availHeight: 屏幕有效高度77.列举几个常见的浏览器兼容问题?主流浏览器发送 ajax 使用 XMLHttpRequest 创建异步对象,IE 浏览器时候用 XActive 创建异步对象;33主流浏览器注册事件addEventListener(&quot;eventType&quot;,&quot;handler&quot;,&quot;true|false&quot;); removeEventListner(&quot;eventType&quot;,&quot;handler&quot;,&quot;true|false&quot;);IE 浏览器:注册事件:attachEvent( &quot;eventType&quot;，&quot;handler&quot;) 移除事件:detachEvent(&quot;eventType&quot;，&quot;handler&quot; ) 阻止事件冒泡:主流浏览器:event.stopPropagation()IE 浏览器:event.cancleBubble&#x3D;true; 获取事件源:主流浏览器: event.targetIE 浏览器:event.srcElement78.什么是事件委托?本应该注册给子元素的事件, 注册给父元素79.事件委托的原理是什么?事件冒泡, 因为有事件冒泡的存在, 所以子元素的事件会向外冒泡, 触发父元素的相同事件, 根据事件对象可以找到真正触发事件的事件源.80.Javscript 中有几种定时器, 有什么区别?34setInterval: 间歇定时器, 间隔一定的事件就执行, 执行多次;setTimeout: 延时定时器, 只执行一次81.如何实现多个标签页的通信?localStorage 可以实现同一浏览器多个标签页之间通信的原理;localStorage 是 Storage 对象的实例。对 Storage 对象进行任何修改，都会在文档上触发 storage 事件。当通过属性或者 setItem()方法保存数据，使用 delete 操作符或 removeItem()删除数据，或者调用 clear()方法时，都会发生该事件。A.htmlB.html&lt;input type&#x3D;&quot;text&quot;&gt; &lt;button id&#x3D;&quot;btn&quot;&gt;Click&lt;&#x2F;button&gt; &lt;script&gt; window.οnlοad&#x3D;function()&#123;var oBtn&#x3D;document.getElementById(&quot;btn&quot;);var oInput&#x3D;document.getElementsByTagName(&quot;input&quot;)[0]; oBtn.οnclick&#x3D;function()&#123;var val&#x3D;oInput.value; localStorage.setItem(&quot;value&quot;,val);&#125; &#125;&lt;&#x2F;script&gt; &lt;script&gt;window.addEventListener(&quot;storage&quot;,function(event)&#123; console.log(&quot;value is&quot;+localStorage.getItem(&quot;value&quot;)); console.log(&quot;key is&quot;+event.newValue);&#125;,false);&lt;&#x2F;script&gt;35JQuery82. jquery 中的$.each 和$(selector).each()有什么不同?$.each 可以循环任何数组, 包括普通数组和 jquery 对象组成的伪数组;$(selector).each()只能循环遍历 jquery 对象组成的伪数组.83. Jquery 中$.each 和原生 js 中的 forEach 方法有什么区别?Jquer 中的$.each 不仅可以循环遍历普通数组, 还可以循环遍历jquery 对象的伪数组, 原生 js 中的 forEach 只能循环遍历数组; 其次第二个实参函数的参数顺序不一样, $.each(arr,function(索引,循环单项,数组本身)&#123;&#125;), arr.forEach(function(循环单项,索引,数组本身)&#123;&#125;)84. 原生 JS 的 window.onload 与 Jquery 的$(document).ready(function()&#123;&#125;)，$(function () &#123;&#125;)有什么不同？执行时机不一样, window.onload 会等待页面元素渲染完毕并且资源文件加载完毕后才会执行;$(document).ready(function() &#123;&#125;)是当页面元素渲染完毕后就会执行, 所以执行时机先于 window.onload85. Jquery 实现连式编程的原理是什么?jquery 的方法中最后都会 return 一个 this, 这个 this 就是当前元素的jquery 对象.function $(parma) &#123;&#x2F;&#x2F;如果调用者传入的是一个函数, 则当做入口函数使用3686. Jquery 如何多次给同一个标签绑定同一个事件?使用 addEventListener(‘事件名’,function()&#123;&#125;)注册的事件, 不会出现事件覆盖, jquery 中也是这样做的.if (typeof (parma) &#x3D;&#x3D; &#39;function&#39;) &#123; window.onload &#x3D; parma&#125; else &#123; &#x2F;&#x2F;如果调用者传入的是一个选择器, 则返回一个对象var dom &#x3D; document.querySelector(parma) return &#123; 0: dom,&#x2F;&#x2F;&#123;color:&#39;red&#39;,border:&#39;1px solid red&#39;&#125; css: function (obj) &#123;if (typeof (obj) &#x3D;&#x3D; &#39;object&#39;) &#123; for (var key in obj) &#123; dom.style[key] &#x3D; obj[key];&#125; &#125;return this;&#125;,click: function (fn) &#123;&#x2F;&#x2F; 注册点击事件dom.onclick &#x3D; fn; return this;&#125;,hide: function () &#123; dom.style.display &#x3D; &#39;none&#39;; return this;&#125;,show: function () &#123; dom.style.display &#x3D; &#39;block&#39;; return this;&#125;,get: function () &#123; return dom; &#125; &#125; &#125; &#125;3787. 如何开发 jquery 插件?Jquery 提供了两种开发插件的方式:$.fn: 可以通过任意 jquery 对象来调用$.extend: 开发的插件只能通过$顶级对象来调用88. Jquery 中那些方法不支持链式操作?$.trim(); $.each();$(selector).html(), $(selector).text()H5 新特性 89. H5 都新增了那些新特性?语义化的标签(header,nav,footer,aside,article,section) 本地存储 sessionStorage,localStorage;$.fn.green&#x3D;function()&#123; console.log(this,$(this));$(this).css(&#123;background:&#39;green&#39;&#125;);&#125;&#x2F;&#x2F; 调用以后, div 的背景色会被设置成 green$(&quot;div&quot;).green();&#x2F;&#x2F; 定义$.extend(&#123;alert: function (msg) &#123; alert(msg);&#125;&#125;);&#x2F;&#x2F; 调用$.alert(&#39;这是提示信息&#39;)38拖拽释放(Drag and drop) API 音频、视频 API(audio,video)画布(Canvas) API地理(Geolocation) API表单控件，calendar、date、time、email、url、search 新的技术 websocket90. sessionStorage,localStorage 和 cookie 三者有什么区别?共同点:它们三者都是浏览器端的存储介质, 可以存储一些数据. 不同点:sessionStorage 是将数据存储在页面的内存中, 所以数据会跟随页面的关闭而销毁, 存储数据相对较少(5M 左右), 只能存储字符串;localStorage 是将数据存储在电脑的磁盘上, 存储数据量大(20M 左右), 需要手动删除, 只能存储字符串;cookie 是http 协议的重要组成部分, 存储数据量相对比较少(4K 左右), 存储cookie 的时候可以设置过期时间, 到达过期时间后, 会自动销毁, 如果没有设置, 则跟随浏览器的关闭而销毁. cookie 中存储的数据会伴随每一次http 请求被发送到服务端, 所以不建议在cookie 中存储大量数据.数据交互(ajax)91. 使用 jquery 写出一个简单的$.ajax 的请求$.ajax(&#123;3992. 常见 HTTP 状态码都有哪些？100 &#x3D;&gt; 正在初始化（一般是看不到的）101 &#x3D;&gt; 正在切换协议（websocket 浏览器提供的）200 或者以 2 开头的两位数 &#x3D;&gt; 都是代表响应主体的内容已经成功返回了202 &#x3D;&gt; 表示接受301 &#x3D;&gt; 永久重定向&#x2F;永久转移302 &#x3D;&gt; 临时重定向&#x2F;临时转移（一般用来做服务器负载均衡）304 &#x3D;&gt; 本次获取的内容是读取缓存中的数据，会每次去服务器校验400 &#x3D;&gt; 参数出现错误（客户端传递给服务器端的参数出现错误）401 &#x3D;&gt; 未认证，没有登录网站403 &#x3D;&gt; 禁止访问，没有权限404 &#x3D;&gt; 客户端访问的地址不存在500 &#x3D;&gt; 未知的服务器错误503 &#x3D;&gt; 服务器超负荷（假设一台服务器只能承受 10000 人，当第10001 人访问的时候，如果服务器没有做负载均衡，那么这个人的网络状态码就是 503）url:&#39;&#x2F;api&#39;,type:&#39;post&#39;,data:&#123;&#125;, dataType:&#39;json&#39;, success:function(res)&#123;console.log(res);&#125;&#125;);4093. 你知道的 HTTP 请求方式有几种？1. GET 请求指定的页面信息，并返回实体主体。2. HEAD 类似于 get 请求，只不过返回的响应中没有具体的内容，用于获取报头3. POST 向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST 请求可能会导致新的资源的建立和&#x2F;或已有资源的修改。4. PUT 从客户端向服务器传送的数据取代指定的文档的内容。5. DELETE 请求服务器删除指定的页面。6. CONNECT HTTP&#x2F;1.1 协议中预留给能够将连接改为管道方式的代理服务器。7. OPTIONS 允许客户端查看服务器的性能。8. TRACE 回显服务器收到的请求，主要用于测试或诊断。9. PATCH 实体中包含一个表，表中说明与该 URI 所表示的原内容的区别。10. MOVE 请求服务器将指定的页面移至另一个网络地址。11. COPY 请求服务器将指定的页面拷贝至另一个网络地址。12. LINK 请求服务器建立链接关系。13. UNLINK 断开链接关系。14. WRAPPED 允许客户端发送经过封装的请求。15. LOCK 允许用户锁定资源，比如可以再编辑某个资源时将其锁41定，以防别人同时对其进行编辑。16. MKCOL 允许用户创建资源17. Extension-mothed 在不改动协议的前提下，可增加另外的方法。94. 请尽可能详尽的解释 ajax 的工作原理第一步:创建一部对象 var xhr&#x3D;new XMLHttpRequest() 第二步:设置请求行 xhr.open(‘请求方式’,请求地址); 第三步:发送请求 Get 方式 xhr.send(null),如果是 post 请求还要设置请求头95. 页面编码和被请求的资源编码如果不一致如何处理？a.html 的编码是 gbk 或 gb2312 的。 而引入的 js 编码为 utf-8 的 ，那就需要在引入的时候&lt;script src&#x3D;&quot;http:&#x2F;&#x2F;www.xxx.com&#x2F;test.js&quot; charset&#x3D;&quot;utf-8&quot;&gt;&lt;&#x2F;script&gt;xhr.setRequestHeader(&#39;Content-Type&#39;,&#39;application&#x2F;x-www-form-urlencoded &#39;);xhr.send(&quot;name&#x3D;zs&amp;age&#x3D;18&quot;);&#x2F;&#x2F;第四步:监听服务端的响应xhr.onreadystatechange&#x3D;function()&#123;if(xhr.status&#x3D;&#x3D;200&amp;&amp;xhr.readyState&#x3D;&#x3D;4)&#123;&#x2F;&#x2F; 获取 jsonvar json&#x3D;xhr.responseText&amp;&amp;JSON.parse(xhr.responseText)&#x2F;&#x2F; 获取 xmlvar xml&#x3D;xhr.responseXML; console.log(json,xml) &#125; &#125;42同理，如果你的页面是 utf-8 的，引入的 js 是 gbk 的，那么就需要加上 charset&#x3D;&quot;gbk&quot;.96. 如何解决跨域问题?jsonp, 服务器代理, cors97. jsonp 跨域的原理是什么?动态在页面中创建一个 script 标签, 使其 src 属性指向后端数据接口, 后 端 数 据 接 口 必 须 返 回 一 个 js 函 数 的 调 用 字 符 串 ( 如cb(‘&#123;“name”:”zs”,”age”:18&#125;’)), 将要返回给前端的 json 数据作为函数的实参, 当 script 标签加载完毕后会在浏览器中执行后端返回的函数调用,所以前端必须事先对调用的函数进行声明. 因为函数是在 js 中声明的, 所以可以在函数内部拿到服务端调用的时候传入的实参, 所以就间接实现了跨域请求数据.98. 什么是同步和异步, 那种执行方式更好?同步是指一个程序执行完了接着去执行另外一个程序, 异步是指多个程序同时执行. 所以异步效率更高, 因为异步不会出现阻塞现象, 前一个程序的执行不会影响后一个程序的执行.99. GET 和POST 的区别，何时使用 POST？get 是将要传递的参数拼在 url 中进行传递,传递数据量少, 不安全43post 是将传递的参数放在请求体里传递, 携带数据量大, 相对安全. 要提交一些敏感数据(比如登录密码),上传文件时, 必须使用 post 请求.100. 请解释一下 JavaScript 的同源策略同源策略是浏览器的一项安全策略, 浏览器只允许 js 代码请求和当前所在服务器域名,端口,协议相同的数据接口上的数据,这就是同源策 略.101. 一个页面从输入 URL 到页面加载显示完成，这个过程中都发生了什么？首先根据域名查询 DNS 服务器获取服务器 IP,然后拿着服务器 IP 和域名请求对应的服务器, 请求成功后 web 服务器会根据一系列运算, 将客户端需要的数据通过网络传输到客户端浏览器, 最终由浏览器解析后呈现给终端用户.102. 网站从 http 协议切换到 https 协议需要对代码做哪些处理? 不需要对代码做任何处理, 只需要在 web 服务器中加入一个 ssl 的安全认证模块即可.103. 什么是 RESTful API?RESTful 的核心思想就是使用 HTTP 请求方式配合资源对象的方式来44完成对服务端某个资源的操作(HTTP 动词+资源对象)。比如，GET &#x2F;articles 这个命令，GET 是 HTTP 动词，&#x2F;articles 是资源对象。补充说明:动词通常就是五种 HTTP 方法，对应 CRUD 操作:GET：读取（Read）POST：新建（Create）PUT：更新（Update）PATCH：更新（Update），通常是部分更新DELETE：删除（Delete）性能优化 104. 什么是渐进增强和优雅降级?渐进增强（progressive enhancement）：针对低版本浏览器进行构建页面，保证最基本的功能，然后再针对高级浏览器进行效果、交互等改进和追加功能达到更好的用户体验。（从被所有浏览器支持的基本功能开始，逐步地添加那些只有新式浏览器才支持的功能，向页面添加无害于基础浏览器的额外样式和功能。当浏览器支持时，它们会自动地呈现出来并发挥作用。）优雅降级（graceful degradation）：一开始就构建完整的功能，然后再针对低版本浏览器进行兼容。（Web 站点在所有新式浏览器中都能45正常工作，如果用户使用的是老式浏览器，则代码会检查以确认它们是否能正常工作。由于 IE 独特的盒模型布局问题，针对不同版本的IE 的 hack 实践过优雅降级了，为那些无法支持功能的浏览器增加候选方案，使之在旧式浏览器上以某种形式降级体验却不至于完全失效。）区别：优雅降级是从复杂的现状开始，并试图减少用户体验的供给，而渐进增强则是从一个非常基础的、能够起作用的版本开始，并不断扩充，以适应未来环境的需要。105. 什么是页面的回流和重绘?回流是指当页面的结构或者标签的尺寸发生变化的时候, 浏览器需要对页面进行重排, 并重新渲染;重绘是指当页面上的标签的外观(比如字体颜色,或背景颜色)发生改变的时候, 浏览器需要重新对页面进行渲染.所以回流一定会引起页面的重绘, 重绘不一定会引起回流. 要提高页面性能, 就要尽可能的减少页面的回流和重绘.106. 针对页面性能优化,你有哪些优化方案? 资源加载方面:减少 http 请求次数, 具体方案, 代码合并(合并 css,js), 使用精灵图; 减少 http 请求数据量, 代码压缩(css,js,html), 合理设置缓存;46启用 CDN 加速服务; 代码层面:避免滥用全局变量, 减少作用域查找(能用局部变量就不要声明全局变量), 不要滥用闭包;减少 DOM 操作, 操作 DOM 的时候对已经查找到的 DOM 对象进行缓存, 避免重复查找;使用图片懒加载, 避免单次加载图片数量过多导致页面卡顿; 将script 标签写在页面底部, 因为 js 的加载会阻塞页面的渲染;不要在本地书写大量 cookie, 因为 cookie 会伴随每一次 http 请求;107. 什么是 CDN 加速?CDN(Content Delivery Network)全称内容分发网络, 是运营商所提供的一项增值服务, 花钱就可以拥有这项加速服务. CDN 主要是对网站的静态资源进行加速, CDN 在全国会有很多节点服务器(每个城市都有), 当你购买了一个 CDN 服务以后, CDN 服务器会对你的网站的静态资源文件进行缓存处理, 当第二次有人访问的时候, 那么服务器就会从就近的 CDN 节点服务器上获取网站所需的静态资源, 由于 CDN 服务器的性能比较高, 并且距离客户端的物理距离比较近, 所以就可以实现加速. 启用 CDN 服务只需要在运营提供商提供的后台进行配置(配置要对那个域名启用 CDN 服务), 不需要对代码做任何修改.108. 什么是 SEO?47SEO(Search Engine Optimizing)搜索引擎优化, 就是让搜索引擎去抓取我们的网页. 为了让搜索引擎抓取我们的网页, 我们可以在书写代码的时候做一些工作, 比如合理设置网页 title(标题), keywords(关键字),description(描述); 因为搜索引擎在抓取到网页以后首先回去分析这几个关键信息.109. 为什么利用多个域名来存储网站静态资源会更有效？因为浏览器对请求静态资源文件有一个并发数量限制, 每次只能请求同一个域名下的若干个资源文件(根据浏览器的不同会有差异), 如果把资源文件存放在多个不同的域名下面就会突破浏览器的限制;其次, 启用多个静态资源服务器,可以减轻主服务器的压力.110. 移动端点击事件会有多少秒的延时?什么原因造成的?如何解决?移动端的点击事件会有 300ms 的延时;是因为浏览器为了保留双击缩放的功能所造成的,早期浏览器都有一个双击缩放的功能, 在用户点击一次以后, 浏览器会等待第二次点击, 如果用户在 300ms 内进行了第二次点击, 那么浏览器就会执行缩放的功能, 如果 300ms 内没有再次点击, 则会当做单击事件处理;解决方案:使用touch 触摸事件来模拟点击事件;使用fastclick 插件来解决;静止页面缩放功能48111. 你了解到的网站攻击方式有哪些?常见的网站攻击方式有 xss(跨站脚本攻击), csrf(跨站请求伪造)112. 谈谈 js 中的垃圾回收机制主要有以下两种方式：(1)标记清除（mark and sweep）:大部分浏览器以此方式进行垃圾回收，当变量进入执行环境（函数中声明变量）的时候，垃圾回收器将其标记为“进入环境”，当变量离开环境的时候（函数执行结束）将其标记为“离开环境”，在离开环境之后还有的变量则是需要被删除的变量。标记方式不定，可以是某个特殊位的反转或维护一个列表等.垃圾收集器给内存中的所有变量都加上标记，然后去掉环境中的变量以及被环境中的变量引用的变量的标记。在此之后再被加上的标记的变量即为需要回收的变量，因为环境中的变量已经无法访问到这些变量。(2)引用计数(reference counting):这种方式常常会引起内存泄漏，低版本的 IE 使用这种方式。机制就是跟踪一个值的引用次数，当声明一个变量并将一个引用类型赋值给该变量时该值引用次数加 1，当这个变量指向其他一个时该值的引用次数便减一。当该值引用次数为 0 时就会被回收。113. Js 是单线程还是多线程?49单线程, 单位时间内只能处理一个进程114. Js 是如何实现异步操作的?Js 虽然是单线程的, 但是浏览器是多线程的, js 中的异步操作基本都是由浏览器提供的子线程来完成的.115. 分别介绍下 MVC, MVVM, MVP 这三种设计模式?MVC 是后端语言的一种设计模式, 主要是实现对代码分层, M(model) 数据模型层, 主要负责操作数据库; V(view)视图层, 主要负责进行界面展示, 可以认为前端的 html,css,js 充当的就是视图层; C(controller) 业务控制层, 主要负责控制具体的业务逻辑, 负责将 model 数据层的数据交给 view 视图层进行展示.MVVM 是前端的一种设计模式, vue 就是基于这种模式来设计的, 是从MVC 演变过来的. M(model)数据层, 主要负责数据和方法的初始化;V(view)视图层, 可以认为 html,css 充当的就是视图层的角色; VM(viewmodel)视图模型层, 负责连接数据层和视图层, 将数据层的数据交给视图层展示, 将视图层的行为传递给数据层.MVP 也是从后端的 MVC 设置模式中演化过来的, 主要应用于安卓开发中. M(model) 数据层, V(view) UI 逻辑; P(Presenter)业务逻辑ES6&#x2F;7&#x2F;8 新特性 116. Es6 中新增了那些数据类型?50Symbol 类型（基本）Set 类型（复杂）Map 类型（复杂）WeakSet 类型（复杂）WeakMap 类型（复杂）TypedArray 类型（复杂）117. ES6 新增了那些特性?const(声明常量), let(声明变量)关键字;map 和 set 数据类型; 模板字符串;对象数组解构赋值; 函数剩余参数;(...arg)延展运算符;(...)函数默认参数;fn(name&#x3D;’zs’)对象字面量的增强(属性名和属性值相同, 可缺省);Promise 异步对象;class 类的支持118. 使用 let 声明的变量和 var 声明的变量有什么区别?使用 let 声明的变量有块级作用域, 并且没有变量的声明提升( 使用let 声明的变量在声明之前调用会报语法错误); 使用 var 声明的变量51class Person&#123; constructor(props)&#123;this.name&#x3D;props.name; this.age&#x3D;props.age; &#125; &#125;&#x2F;&#x2F; Student 继承 Personclass Student extends Person&#123;有声明提升(在声明之前调用会报 undefined), 没有块级作用域.119. 谈谈 async&#x2F;await 的使用方式和场景async 是用来修饰函数的声明, 使用async 修饰的函数会变成一个异步函数. await 用来修饰函数的调用, 被 await 修饰的函数必须返回一个promise 异步对象, 使用 await 修饰后, 就会将 promise 异步对象转换成一个同步操作.120. 箭头函数有什么作用及实际应用场景?箭头函数可以使函数内部的 this 指向和函数外部保持一致; 箭头函数之所以可以让函数内部的 this 指向和外部保持一致是因为箭头函数内部没有 this 指向. 可以在 ajax 的回调函数中使用箭头函数让回调函数中的 this 指向事件源; 可以在定时器的第二个参数中使用箭头函数, 避免函数内部的 this 指向全局 window.121. class 类的如何实现继承使用 extends 关键字实现继承52122. 谈谈对 Promise 的理解Promise 本身并没有提供任何的代码逻辑, 它可以帮助我们改造或优化传统的使用回调函数实现的异步操作, 让我们以一种更优雅的方式来实现异步操作. 最显著的一个特点就是通过 Promise 可以解决传统的回调地狱. 代码层面 Promise 提供了一个构造函数, 在使用的时候必须通过 new 创建一个实例对象, 在创建实对象的时候需要传递一个匿名函数, 这个匿名函数需要两个参数(resolve,reject), resolve 成功处理函数, reject 失败处理函数. 什么时候触发成功处理函数和失败处理函数, 由具体的业务逻辑来决定. resolve 和 reject 需要通过Promise 实例对象提供的 then 方法来传递.Promise 提供了两个静态方法 all,race,all 可以一次执行多个 Promise 实例, 返回值是数组; race 也可以一次执行多个 Promise 实例, 哪个实例最先执行完, 就返回哪个的执行结果.前端框架 Vue123. vue 中如何封装一个组件首先定义一个后缀名为.vue 的文件. 文件内部还是三部分组成,super(props); this.score&#x3D;props.score; &#125; &#125;53template 模板部分, script 逻辑部分, style 样式部分. 这三部分是组件的核心部分, 组件需要哪些结构, 在模板部分书写, 需要什么样的外观样式, 通过 style 部分书写, 有哪些行为在 script 部分书写.一定要在script 部分使用 es6 模块化的导出语法(export default&#123;&#125;), 进行导出. 然后在需要调用组件的地方使用 es6 模块化导入语法导入即可, 组件需要哪些参数, 直接在调用的部分进行传递即可.主要逻辑还是在组件中完成.124. Vue 中 computed 和 watch 的区别?computed 是计算属性, 可以根据 data 中的数据成员,动态计算出一个新的数据成员(这个数据成员在 data 中并不存在), 计算属性的函数必须有返回值; watch 是监视器, 可以监视 data 中某一个数据成员的改变或路由中的某些属性的改变, 可以根据这个改变, 做一些其他操作(不仅仅局限于更新其他相关数据).Watch 监听器:var vm &#x3D; new Vue(&#123; el: &#39;#demo&#39;, data: &#123;firstName: &#39;Foo&#39;, lastName: &#39;Bar&#39;, fullName: &#39;Foo Bar&#39;&#125;,watch: &#123;firstName: function (val) &#123;this.fullName &#x3D; val + &#39; &#39; + this.lastName&#125;,lastName: function (val) &#123;this.fullName &#x3D; this.firstName + &#39; &#39; + val54计算属性:125. 谈谈对 vue 中插槽的理解?Vue 中的插槽分为三种, 匿名插槽, 具名插槽, 作用域插槽.通过插槽可以动态指定某一个组件模板部分的渲染, 我们在调用组件的时候, 在组件的调用标签中间传递了什么样的标签结构, 那么该组件就会把我们传递的标签结构放在他的模板部分进行渲染.126. v-show 和 v-if 在隐藏一个元素的时候有什么不同, 应该如何来选择? v-show 是通过 css 的方式来隐藏元素, 而 v-if 是根据条件是否成立决定是否要创建元素. 如果某个元素需要频繁切换显示状态的话, 建议是使用 v-show, 因为频繁创建销毁 DOM 需要性能开销.127. 什么是 Vuex, 在那种场景下使用? &#125;&#125;)var vm &#x3D; new Vue(&#123; el: &#39;#demo&#39;, data: &#123;firstName: &#39;Foo&#39;, lastName: &#39;Bar&#39;&#125;,computed: &#123;fullName: function () &#123;return this.firstName + &#39; &#39; + this.lastName&#125; &#125;55Vuex 是针对 vue 的一个状态管理工具. 有几个核心的部分:state 存储状态数据;mutations: 更新数据的方法,actions: 调用 mutations 中的方法, 更新 state 数据;getters: 对 state 中的数据进行预处理当组件的关系比较复杂的时候, 可以使用 vuex 简化组件间的传值.128. 说说 Vue 路由的使用步骤? 第一步:下载路由模块 vue-router; 第二步:创建路由对象;第三步:配置路由规则;第四步:将路由对象注册为 vue 实例对象的成员属性129. 你所了解到的常见 Vue 组件库有哪些?PC 端组件库: element-ui, ant-design, iview移动端: mint-ui, vant, vux130. 谈谈对于 MVVM 的理解?MVVM 由三部分组成M(model 数据层), V(view 视图层),VM(view-model) 视图模型层. 是一种框架的设计思想, vue 就是基于 mvvm 来设计的. 其 中 M(model) 层 是 负 责 初 始 化 数 据 ,V(view) 只 负 责 页 面 展 示,VM(view-model)用来连接 view 层和 model 层, 将数据层的数据传56递一个视图层进行展示, 将视图层的操作传递到数据层进行持久化.131. Vue 的生命周期? 创建阶段: 只执行一次beforeCreate(开始进行一些数据和方法的初始化的操作, data 中的数据和 methods 中的方法还不能用),created(已经完成数据和方法的初始化, data 中的数据和 methods 中的方法可以使用了),beforeMount(开始渲染虚拟 DOM),mounted(已经完成了虚拟 DOM 的渲染, 可以操作 DOM 了, 只执行一次)运行阶段: 执行多次beforeUpdate(data 中的数据即将被更新, 会执行多次)updated(data 中的数据已经更新完毕, 会执行多次) 销毁阶段: 只执行一次beforeDestroy(vue 实例即将销毁, 此时 data 中的数据和 methods 中的方法依然处于可用状态)destroyed(vue 实例已经销毁, 此时 data 中的数据和 methods 中的方法已经不可用)132. Vue 实现数据双向绑定的原理?Vue 是使用数据劫持, 结合发布者订阅者模式实现双向数据绑定的57执行过程分析:读取 title 或者 msg 的时候 get 方法会自动触发; 重新给 title 或 msg赋值的时候,set 方法会被自动触发(可以在此处通知界面层更新)133. Vue 创建组件的时候,data 为什么要使用匿名函数 return 一个&#x2F;&#x2F; 初始值var data &#x3D; &#123; msg: &#39;hello&#39;, title: &#39;标题&#39; &#125;for (var key in data) &#123; Object.defineProperty(window, key, &#123;get: function () &#123;&#x2F;&#x2F; console.log(&#39;get 被触发了&#39;); return data[key];&#125;,set: function (input) &#123;&#x2F;&#x2F; do something: 如通知界面层更新console.log(input, &#39;假装在通知界面&#39;);&#125;&#125;);&#125;title &#x3D; &#39;title 初始值&#39;; console.log(title);58&#x2F;&#x2F; 父组件Vue.component(&#39;parent&#39;,&#123; template:&#96;&lt;div&gt;&lt;child :msgFromParent&#x3D;&quot;msg&quot;&gt;&lt;&#x2F;child&gt;&lt;div&gt;&#96;, data:function()&#123;return &#123;title:&#39;父组件的标题&#39;,msg:&#39;这是传给子组件的值&#39; &#125;&#125;,&#x2F;&#x2F; 子组件components:&#123;child:&#123;&#x2F;&#x2F; 模板template:&#96;对象?因为对象是一种引用数据类型,在内存中只有一份. 如果 data 的值直接是一个对象的话, 那么后期组件在不同的地方多次调用的时候, 会相互产生影响, 因为每一次调用操作的 data 对象是一样的. 使用函数的方式返回对象, 可以保证组件的每一次调用都会创建一个新对象, 这样组件的每一次调用不会相互产生影响.134. Vue 中实现父组件向子组件传递数据?第一步: 在子组件的调用标签上声明一个自定义属性, 属性值来自父组件的 data第二步: 在子组件的定义部分声明一个属性 props, 值是一个数组, 将自定义属性的名字在 props 中进行声明; 在子组件的模板部分可以使用 props 中声明过的数据.59135. Vue 中如何实现子组件向父组件传递数据?第一步: 在子组件的调用标签只上通过 v-on 动态绑定一个自定义事件, 自定义事件的处理函数必须在父组件的 methods 中提前声明, 这个函数需要一个形参, 来接收子组件传递过来的数据.第二步: 在子组件中通过 this.$emit(自定义事件,数据)触发自定义事件的执行, 此动作可以放在子组件的 created&#x2F;mounted 生命周期中, 可以放在某个事件处理函数中.136. Vue 中实现兄弟组件间的传递数据?第一步: 声明一个空的 Vue 实例对象 comm, 作为事件中心的角色第二步: 在 acom 组件中通过 comm.$emit(自定义事件,数据)的方式触发事件(此操作可放在某个事件处理函数或者 acom 组件的生命周期函数 created&#x2F;mounted 中)第三步: 在 bcom 组件中通过 comm.$on(自定义事件,function(data)&#123;&#125;)&lt;div&gt;&lt;h1&gt;&#123;&#123;msgFromParent&#125;&#125;&lt;&#x2F;h1&gt;&lt;&#x2F;div&gt;&#96;,&#x2F;&#x2F; 数据模型data:function()&#123; return &#123;title:&#39;子组件标题&#39; &#125;&#125;,&#x2F;&#x2F;获取父组件中传过来的值props:[&#39;msgFromParent&#39;] &#125; &#125;&#125;);60监听自定义事件的执行( 操作可放在 bcom 组件的声明周期函数created&#x2F;mounted 中)&#x2F;&#x2F; 公共组件var comm&#x3D;new Vue();&#x2F;&#x2F; 兄弟组件 1Vue.component(&#39;coma&#39;,&#123; template:&#96;&lt;div&gt;&lt;h1&gt;&#123;&#123;title&#125;&#125;&lt;&#x2F;h1&gt;&lt;button @click&#x3D;&quot;sendMsg&quot;&gt;发送&lt;&#x2F;button&gt;&lt;&#x2F;div&gt;&#96;, data:function()&#123;return &#123;title:&#39;组件 A&#39;,msg:&#39;传给兄弟组件的值&#39; &#125;&#125;,methods:&#123;sendMsg:function()&#123; comm.$emit(&#39;myevent&#39;,this.msg) &#125;&#125;,created:function()&#123;&#x2F;&#x2F; 注册自定义事件comm.$emit(&#39;myevent&#39;,this.msg);console.log(&#39;注册事件 OK&#39;);&#125;&#125;);&#x2F;&#x2F; 兄 弟 组 件 2 Vue.component(&#39;comb&#39;,&#123;template:&#96;&lt;div&gt;&lt;h1&gt;&#123;&#123;title&#125;&#125;&lt;&#x2F;h1&gt;&lt;h1&gt;&#123;&#123;msg&#125;&#125;&lt;&#x2F;h1&gt;&lt;&#x2F;div&gt;&#96;, data:function()&#123;return &#123;61137. Vue 中有几种路由模式? Vue中的路由模式有两种:hash,history; 默认是hash模式; 可以在创建路由对象的时候, 使用 mode 属性来切换路由模式.const router&#x3D;new Router(&#123;mode:’history’&#125;)138. Vue 路由导航守卫是什么, 以及应用场景路由守卫是在页面进行路由跳转的时候做一些处理, 比如拦截. vue-router 中提供了下面几种路由导航守卫:全局前置守卫全局后置钩子title:&#39;组件 B&#39;,msg:&#39;&#39;&#125;&#125;,mounted:function()&#123; comm.$on(&#39;myevent&#39;,(data)&#x3D;&gt;&#123;this.msg&#x3D;data console.log(data);&#125;);&#125;&#125;);const router &#x3D; new VueRouter(&#123; ... &#125;) router.beforeEach((to, from, next) &#x3D;&gt; &#123;&#x2F;&#x2F; from 从里来&#x2F;&#x2F; to 到哪里去&#x2F;&#x2F; next 是否要放行&#125;)62路由独享守卫: 在声明路由的时候, 针对特定路由的钩子函数139. Vue 如何自定义一个过滤器？定义全局过滤器:Vue.filter(‘过虑器名称’,function(input)&#123; return input &#125;);定义局部过滤器:140. Vue 如何自定义一个 vue 指令？定义全局指令:router.afterEach((to, from) &#x3D;&gt; &#123;&#x2F;&#x2F; ...&#125;)const router &#x3D; new VueRouter(&#123; routes: [ &#123;path: &#39;&#x2F;foo&#39;, component: Foo,beforeEnter: (to, from, next) &#x3D;&gt; &#123;&#x2F;&#x2F; ...&#125; &#125; ]&#125;)new Vue(&#123;filters:&#123; dateFmt:function(input)&#123; return &#39;yyyy-mm-dd&#39;; &#125; &#125;&#125;)63const router&#x3D;new VueRouter(&#123; routes:[ &#123;path:&#39;&#x2F;product&#x2F;:id&#39;,component:Product&#125; ]&#125;);&#x2F;&#x2F; 获 取 参 数 : this.$route.params.idVue.directive(‘指令名’,function(el,binding)&#123;&#125;);定义私有指令:141. 怎么定义 vue-router 的动态路由? 怎么获取通过路由传过来的参数?142. Vue 路由模块中$route 和$router 的区别?$route 中存储的是跟路由相关的属性(如$route.params,$route.query) ;$router 中存储的是和路由相关的方法(如$router.push(),$router.go()),143. vue 中 v-for 指令循环遍历中 key 属性的作用？Key 属性的作用是在数据层和视图层之间建立一一对应关系, 方便后期对页面进行局部更新. 如果某一条数据发生改变, 只更新当前数据对应的 DOM 元素.new Vue(&#123;directives:&#123; focus:function(el,binding)&#123;&#125; &#125;&#125;);64144. Vue 和 react 有哪些不同的地方?Vue 实现了双向数据绑定(数据&lt;&#x3D;&gt;界面);react 仅仅实现了单项数据流(数据层&#x3D;&gt;界面层); vue 中提供了指令, react 中没有指令的概念. vue 中使用插值表达式在进行数据渲染, react 中使用 jsx 进行数据的渲染.145. Vue 有哪些常用的事件修饰符?.prevent: 阻止默认事件;.stop: 阻止冒泡;.once: 事件执行一次;.self: 只当在 event.target 是当前元素自身时触发处理函数146. 列举 Vue 中常用的指令v-model:实现双向数据绑定; v-bind: 绑定属性; v-on:注册事件; v-html: 设置标签内容(允许内容 html)v-text: 设置标签的内容(不允许包含 html) v-clack: 解决插值表达式闪烁问题V-for: 循环遍历数组或对象147. Vue 中如何解决插值表达式闪烁问题? 使用 v-html 或 v-text 替代插值表达式;65window.addEventListener(&#39;hashchange&#39;,function()&#123; console.log(&#39;hash change&#39;);&#125;);使用 v-clack 解决插值表达式闪烁,第一步:声明属性选择器[v-clack]&#123;display:none&#125; 第二步:在插值表达式所在标签添加属性 v-clack148. Vue 路由中如何实现通过锚点值的改变切换组件? 通过监听 hashchange 事件, 具体如下:149. vue 中如何实现给样式添加作用域?说明其实现原理vue 中要给样式添加作用域, 只需要给 style 标签添加 scoped 属性即可.实现原理:添加了scoped 属性的style 标签内的样式会被改写成一个交集选择器, 会在原来类名的基础上添加一个随机属性(如.container[v-abcde]), 同 时 引 用 该 类 名 的 标 签 也 会 添 加 一 个 相 同 的 属 性 ( 如 &lt;div class&#x3D;”container” v-abcde&gt;&lt;&#x2F;div&gt;) , 这样的话, 这个类名就可以对引用它的标签生效, 同时不会影响其他同类名的标签.150. Vue 中如何动态添加一个路由规则? 使用 router.addRoutes([&#123;path:’’,component:’’&#125;])66151. Vue 中有何优化页面的加载效率? 使用路由懒加载和组件懒加载;不要打包一些公共的依赖(vue, 组件库); 使用 CDN 加载这些依赖文件152. 什么是路由懒加载? 路由懒加载有什么好处? 如何实现路由懒加载?路由懒加载是指通过异步的方式来加载对应的路由组件(默认情况是将所有的组件全部加载并打包).路由懒加载的好处: 可以提高页面的加载速度, 尤其是首页的加载速度(因为使用了懒加载后, 加载首页的时候, 就不需要加载其他页面对应的组件, 在需要的时候再加载)具体实现:import Vue from &#39;vue&#39;;import Router from &#39;vue-router&#39;;&#x2F;&#x2F; 异步导入组件&#x2F;&#x2F; 异步加载方式一const List &#x3D; resolve &#x3D;&gt; require([&#39;@&#x2F;components&#x2F;list&#39;], resolve);&#x2F;&#x2F; 异步加载方式二const Detail &#x3D; () &#x3D;&gt; import(&#x2F;* webpackChunkName: &quot;group-master&quot; *&#x2F; &#39;@&#x2F;components&#x2F;detail&#39;)Vue.use(Router);export default new Router(&#123;&#x2F;&#x2F; 路由规则routes:[ &#123;path:&#39;&#x2F;list&#39;,component:List&#125;,&#123;path:&#39;&#x2F;detail&#39;,component:Detail&#125;],&#x2F;&#x2F; 路由模式: 默认 hash, 可选值 hash(如#&#x2F;index)|history(&#x2F;index)67153. Vue 中如何触发一个自定义事件?通过 this.$emit(event, ’数据’) 可以触发自定义事件的执行.154. Vue 中如何监听自定义事件的执行?通过 this.$on(event,callback)可以监听自定义事件的执行155. Vue 中如何移除自定义事件?通过this.$off(event,callback)可以移除一个自定义事件; 如果某些特殊场 景 下 , 一个事件被触发一次后就需要将其移除, 可 以 使 用this.$once(event,callback)进行事件注册156. vm.$mount(selector)方法的作用是什么?手动将一个 vue 实例挂载到页面上157. Vue 中 keep-alive 组件的作用是什么?mode:&#39;history&#39;&#125;);var MyComponent &#x3D; Vue.extend(&#123; template: &#39;&lt;div&gt;Hello!&lt;&#x2F;div&gt;&#39;&#125;)&#x2F;&#x2F; 创建并挂载到 #app (会替换 #app) new MyComponent().$mount(&#39;#app&#39;)&#x2F;&#x2F; 同上new MyComponent(&#123; el: &#39;#app&#39; &#125;)68keep-alive 可以将被包裹的组件暂存在内存当中, 当页面切换的时候, 组件不会被重复的销毁和创建, 从而可以提高整体性能, 同时也可以保存组件的一些状态.158. Vue 中如何手动销毁一个 vue 实例?调用 vm.$destroy()可销毁一个 vue 实例(清理它与其它实例的连接，解绑它的全部指令及事件监听器)159. Vue 中有哪些内置的组件?component, slot, transition, transition-group, keep-alive160. vue 实例中有哪些属性?vm.$data 可以获取 vm 实例对象 data 中的数据;vm.$props 可以获取 vm 组件接收到的 props 对象数据;vm.$el 可以获取 vm 实例对象的根 dom 元素;&lt;!-- 动态组件由 vm 实例的属性值 &#96;componentId&#96; 控制 --&gt; &lt;component :is&#x3D;&quot;componentId&quot;&gt;&lt;&#x2F;component&gt;&lt;!--tansition 动画组件的使用--&gt; &lt;transition&gt; &lt;div v-if&#x3D;&quot;ok&quot;&gt;toggled content&lt;&#x2F;div&gt;&lt;&#x2F;transition&gt;var MyComponent &#x3D; Vue.extend(&#123; template: &#39;&lt;div&gt;Hello!&lt;&#x2F;div&gt;&#39;&#125;)69vm.$refs 可以获取 vm 实例中注册过 ref 特性的所有 dom 元素和组件实例.161. Vue.use(plugin)的作用是什么, 使用的时候需要注意什么问题?Vue.use 的作用是安装一个 Vue 插件, 该方法需要在调用 new Vue()之前被调用.162. vm.$nextTick(fn)的作用是什么?延迟某个操作的执行, 直到 dom 更新以后在执行.163. vue 中的混入(mixin)有什么作用?var vm &#x3D; new MyComponent().$mount() document.getElementById(&#39;app&#39;).appendChild(vm.$el) &lt;body&gt; &lt;div id&#x3D;&quot;app&quot;&gt;&lt;h1 ref&#x3D;&quot;h1&quot;&gt;&#123;&#123;title&#125;&#125;&lt;&#x2F;h1&gt;&lt;&#x2F;div&gt;&lt;&#x2F;body&gt; &lt;script&gt;var vm &#x3D; new Vue(&#123; el: &#39;#app&#39;, data: &#123;title: &#39;这是一个标题&#39; &#125;created: function () &#123; this.$nextTick(() &#x3D;&gt; &#123;&#x2F;&#x2F; 在 created 里直接操作 ref 会报错this.$refs.h1.innerHTML &#x3D; &#39;这是更新以后的标题&#39;;&#125;);&#125;&#125;);70混入 (mixin) 提供了一种非常灵活的方式，来分发 Vue 组件中的可复用功能。一个混入对象可以包含任意组件选项。当组件使用混入对象时，所有混入对象的选项将被“混合”进入该组件本身的选项。当组件和混入对象含有同名选项时，这些选项将以恰当的方式进行“合并”。比如，数据对象在内部会进行递归合并，并在发生冲突时以组件数据优先。同名钩子函数将合并为一个数组，因此都将被调用。另外，混入对象的钩子将在组件自身钩子之前调用。164. 如何开发一个 vue 插件?Vue.js 的插件应该暴露一个 install 方法。这个方法的第一个参数是Vue 构造器，第二个参数是一个可选的选项对象&#x2F;&#x2F; 定义插件const myPlugin&#x3D;&#123; install:(Vue,options)&#x3D;&gt;&#123;&#x2F;&#x2F; 1. 添加全局方法或属性Vue.myGlobalMethod &#x3D; function () &#123;&#x2F;&#x2F; 逻辑...&#125;&#x2F;&#x2F; 2. 添加全局指令Vue.directive(&#39;my-directive&#39;, &#123;bind (el, binding, vnode, oldVnode) &#123;&#x2F;&#x2F; 逻辑...&#125;&#125;)&#x2F;&#x2F; 3. 添加实例方法Vue.prototype.$myMethod &#x3D; function (methodOptions) &#123;&#x2F;&#x2F; 逻辑...&#125;&#x2F;&#x2F; 4. 注入组件选项(混入) Vue.mixin(&#123;created: function () &#123;71165. 什么是 ssr? 如何实现 ssr?ssr 是全拼(server side rendering) ,中文意思, 服务端渲染, 让页面的渲染在服务端完成, 生产环境必须部署nodeJS 的环境, 因为服务端渲染必须借助 nodeJS 来完成. vue 中可以使用 nuxt 框架实现服务端渲染.166. 什么是 SPA?SPA(Single Page Application), 单页面应用程序, 使用vue, react, angular 创建的项目都属于 SPA. 因为整个项目只有一个页面, 其他页面都是在该页面的基础上局部刷新而来的.传统方式创建的项目都是 MPA(Mutilple Page Application)多页面应用程序.167. 使用 vue,react,angular 开发的 SPA 单页面应用有什么优缺点? &#125;&#125;)&#x2F;&#x2F; 5. 注册全局组件Vue.component(&#39;myCompent&#39;,&#123; template:&#39;&lt;h1&gt;loading...&lt;&#x2F;h1&gt;&#39;&#125;);&#125; &#125;export default myPlugin;&#x2F;&#x2F; 调用插件Vue.use(myPlugin,&#123;&#125;)72单页面应用虽然性能方面得到了提升, 但是有一个致命的缺点就是不利于 seo, 搜索引擎几乎不会抓取单页面应用.168. 某某公司 vue 机试题Html 部分&lt;div id&#x3D;&quot;app&quot;&gt; &lt;div&gt; &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;phone1&quot;&gt; &lt;button @click&#x3D;&quot;getHandle&quot;&gt;get 测试&lt;&#x2F;button&gt; &lt;span&gt;&#123;&#123;res1&#125;&#125;&lt;&#x2F;span&gt;&lt;&#x2F;div&gt; &lt;div&gt; &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;phone2&quot;&gt; &lt;button @click&#x3D;&quot;postHandle&quot;&gt;post 测试&lt;&#x2F;button&gt; &lt;span&gt;&#123;&#123;res2&#125;&#125;&lt;&#x2F;span&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;73Js 部分React169. 什么是虚拟 DOM, 使用虚拟 DOM 有什么优势?虚拟 dom 相当于在 js 和真实 dom 中间加了一个缓存，利用 dom diff 算法避免了没有必要的 dom 操作，从而提高性能。用 JavaScript 对象结构表示 DOM 树的结构；然后用这个树构建一个真正的 DOM 树，插到文档当中,当状态变更的时候，重新构造一棵新的对象树。然后用新的树和旧的树进行比较，记录两棵树差异把所new Vue(&#123; el: &#39;#app&#39;, data: &#123;phone1: 123,phone2: 456, res1:&#39;&#39;,res2:&#39;&#39;, baseUrl:&#39;http:&#x2F;&#x2F;47.96.26.207:8099&#x2F;api&#x2F;Users&#39;&#125;,methods: &#123; getHandle() &#123;axios.get(&#96;$&#123;this.baseUrl&#125;&#x2F;GetTest?phone&#x3D;$&#123;this.phone1&#125;&#96;,).then ((data)&#x3D;&gt;&#123;this.res1&#x3D;data.result;&#125;);&#125;,postHandle() &#123; axios.post(&#96;$&#123;this.baseUrl&#125;&#x2F;PostTest&#96;,&#123;phone:this.phone2&#125;).then((&#123;data&#125;)&#x3D;&gt;&#123;this.res2&#x3D;data.result;&#125;);&#125; &#125;74记录的差异应用到步骤 1 所构建的真正的 DOM 树上，视图就更新了。170. 简单介绍下 react 中的 diff 算法?把树形结构按照层级分解，只比较同级元素。给列表结构的每个单元添加唯一的 key 属性，方便比较。React只会匹配相同 class 的 component（这里面的 class 指的是组件的名字）合并操作，调用 component 的 setState 方法的时候, React 将其标记为 dirty.到每一个事件循环结束, React 检查所有标记 dirty 的component 重新绘制.选择性子树渲染。开发人员可以重写 shouldComponentUpdate 提高diff 的性能。&#x2F;&#x2F; 创建对比函数function updateChildren(vnode, newVnode) &#123; var children &#x3D; vnode.children || []var newChildren &#x3D; newVnode.children || []children.forEach(function (childrenVnode, index) &#123;&#x2F;&#x2F; 首先拿到对应新的节点var newChildVnode &#x3D; newChildren[index]&#x2F;&#x2F; 判断节点是否相同if (childrenVnode.tag &#x3D;&#x3D;&#x3D; newChildVnode.tag) &#123;&#x2F;&#x2F; 如果相同执行递归，深度对比节点updateChilren(childrenVnode, newChildVnode)&#125; else &#123;&#x2F;&#x2F; 如果不同则将旧的节点替换成新的节点repleaseNode(childrenVnode, newChildVnode) &#125;&#125;)75171. 什么是 Redux?Redux 是一个状态管理工具, 不仅可以在 react 中使用, 也可在其他框架中使用, 甚至可以脱离框架本身使用. redux 中有几个核心的组成部分:store 存储数据的对象,必须通过 createStore 方法来创建;action 更新数据的规则, 必须有一个属性 state, 值必须是字符串;reducer 更新数据的函数, 需要传入 state 状态数据和 action 更新规则. 在 react 中使用 redux 的时候, 一般会使用 react-redux 来简化使用步骤.172. React 有哪些常用的组件库?PC 端组件库:element-ui(饿了么推出的前端组件库), ant-design(阿里巴巴的前端组件库, 几乎覆盖了三大框架); zent(有赞推出的 PC 端组件库)173. React 中如何操作 DOM?&#125;&#x2F;&#x2F; 节点替换函数function repleaseNode(vnode, newVnode) &#123; var elem &#x3D; vnode.elemvar newEle &#x3D; createElement(newVnode) &#125;76在需要进行 dom 操作的标签上设置一个 ref 属性, 保证值不要重复, 后期在js 部分可以通过”this.refs.属性名”来获取标签的虚拟dom 对象.174. 什么是高阶组件(HOC)?函数的返回值是一个函数, 我们称之为高阶函数. 同理一个组件返回值如果还是一个组件, 那么就称之为高阶组件. redux 中提供的connect 就是一个高阶组件.175. React 中调用 setState 后发生了什么?在代码中调用 setState 函数之后，React 会将传入的参数对象与组件当前的状态合并，然后触发所谓的调和过程（Reconciliation）。经过调和过程，React 会以相对高效的方式根据新的状态构建 React 元素树并且着手重新渲染整个 UI 界面。在 React 得到元素树之后，React 会自动计算出新的树与老树的节点差异，然后根据差异对界面进行最小化重渲染。在差异计算算法中，React 能够相对精确地知道哪些位置发生了改变以及应该如何改变，这就保证了按需更新，而不是全部重新渲染。176. React 中状态 state 和属性 props 有什么不同?state 是组件的私有数据, 可读可写, props 是只读属性, 一般来自外部(比如父组件)77177. React 中有几种创建组件的方式?通过函数的方式创建组件, 此种方式创建的组件为无状态组件(不常用);React.createClass();通过 class 类的方式创建组件(须继承 React.Component), 实际开发中使用此种方式.178. React 中的组件按照职责不同, 可以分为几种类型? 根据组件的职责通常把组件分为 UI 组件和容器组件;UI 组件负责 UI 的呈现，容器组件负责管理数据和逻辑; 两者通过 React-Redux 提供 connect 方法联系起来.179. 类组件(Class component)和函数式组件(Functional component)之间有何不同?类组件不仅允许你使用更多额外的功能，如组件自身的状态和生命周期钩子，也能使组件直接访问 store 并维持状态;当组件仅是接收props，并将组件自身渲染到页面时，该组件就是一个 &#39;无状态组件(stateless component)&#39;，可以使用一个纯函数来创建这样的组件。这种组件也被称为哑组件(dumb components)或展示组件.180. 说说 react 的生命周期函数? 初始化阶段：78getDefaultProps:获取实例的默认属性getInitialState:获取每个实例的初始化状态componentWillMount：组件即将被装载、渲染到页面上render:组件在这里生成虚拟的 DOM 节点componentDidMount:组件真正在被装载之后运行中状态：componentWillReceiveProps:组件将要接收到属性的时候调用shouldComponentUpdate:组件接受到新属性或者新状态的时候（可以返回 false，接收数据后不更新，阻止 render 调用，后面的函数不会被继续执行了）componentWillUpdate:组件即将更新不能修改属性和状态render:组件重新描绘componentDidUpdate:组件已经更新销毁阶段：componentWillUnmount:组件即将销毁181. react 性能优化可以使用哪个生命周期函数？shouldComponentUpdate 这个方法用来判断是否需要调用 render 方法重新描绘 dom。因为 dom 的描绘非常消耗性能，如果我们能在shouldComponentUpdate 方法中能够写出更优化的 dom diff 算法，可以极大的提高性能。79182. 应该在 React 组件的何处发起 Ajax 请求? 在 React 组件中，应该在 componentDidMount 中发起网络请求。这个方法会在组件第一次“挂载”(被添加到 DOM)时执行，在组件的生命周期中仅会执行一次。更重要的是，你不能保证在组件挂载之前 Ajax 请求已经完成，如果是这样，也就意味着你将尝试在一个未挂载的组件上调用 setState，这将不起作用。在 componentDidMount 中发起网络请求将保证这有一个组件可以更新了。183. React 如何实现服务端渲染?Next.js 是一个轻量级的 React 服务端渲染应用框架.184. 自定义的 react 组件首字母为什必须要大写?Babel 在对 jsx 代码进行编译的时候, 如果首字母大写, 就把其当做react 组件编译, 编译成 js 对象; 如果首字母小写,则认为是一个普通的 html 标签, 会解析成普通字符串.185. setState 什么时候是同步,什么时候是异步?这里的“异步”不是说异步代码实现. 而是说 react 会先收集变更,然后再进行统一的更新. setState 在原生事件和 setTimeout 中都是同步的. 在合成事件和钩子函数中是异步的. 在 setState 中, 会根据一个isBatchingUpdates 判断是直接更新还是稍后更新, 它的默认值是false. 但 是 React 在 调 用 事 件 处 理 函 数 之 前 会 先 调 用batchedUpdates 这 个 函 数 , batchedUpdates 函 数 会 将80isBatchingUpdates 设置为 true. 因此, 由 react 控制的事件处理过程, 就变成了异步(批量更新).186. React 事件机制跟原生事件有什么区别?React 的事件使用驼峰命名, 跟原生的全部小写做区分.不能通过return false 来阻止默认行为, 必须明确调用 preventDefault 去阻止浏览器的默认响应.187. React 事件中为什么要绑定 this 或者要用箭头函数?事实上, 这并不算是 react 的问题, 而是 this 的问题. 但是也是react 中 经常 出现 的问 题 . 因 此也 讲一 下&lt;button type&#x3D;&quot;button&quot; onClick&#x3D;&#123;this.handleClick&#125;&gt;Click Me&lt;&#x2F;button&gt;这里的 this 是当事件被触发时进行绑定的. this 的值会回退到默认绑定，即值为 undefined，这是因为类声明和原型方法是以严格模式运行。我们可以使用 bind 绑定到组件实例上. 而不用担心它的上下文.因为箭头函数中的 this 指向的是定义时的 this，而不是执行时的 this. 所以箭头函数同样也可以解决.188. 谈谈 react 中的事件机制在组件挂载的阶段, 根据组件生命的 react 事件, 给 document 添加事件 addEventListener, 并添加统一的事件处理函数 dispatchEvent. 将所有的事件和事件类型以及 react 组件进行关联, 将这个关系保存在一个 map 里. 当事件触发的时候, 首先生成合成事件, 根据组81件 id 和事件类型找到对应的事件函数, 模拟捕获流程, 然后依次触发对应的函数.189. 谈谈 jsx 的原理&lt;div&gt;Hello ConardLi&lt;&#x2F;div&gt;实际上, babel 帮我们将这个语法转换成React.createElement(&#39;div&#39;, null, &#96;Hello ConardLi&#96;)190. Jsx 在书写的时候和 html 有什么不同?必须有一个根标签在最外层包裹(因为这里的标签需要babel 编译, 编译成 React.createElement(‘标签名’,’属性对象’, ’内容’) )双标签和单标签(&lt;br&#x2F;&gt;,&lt;hr&#x2F;&gt;)都必须闭合, 否则无法通过编译191. 在 jsx 中如果非要创建多个平行标签, 该如何处理? 在 jsx 的最外层使用&lt;&gt;&lt;&#x2F;&gt;进行包裹;或者使用&lt;React.Fragment&gt;&lt;&#x2F;React.Fragment&gt;标签进行包裹; 两种方式本质是一样的, 底层都是通过document.createDocumentFragment()创建了一个虚拟 dom 标签.82Angular192. Angular 脚手架如何快速创建一个组件? ng g component [目录名&#x2F;组件名]193. Angular 中模块和组件之间有什么样的关系?一个 angular 应用默认必须包含一个模块, 这个模块一般称为根模块, 这个根模块一般必须包含一个组件, 这个组件称为根组件, 应用启动的时候, 会默认加载根组件. 一个应用中可以声明多个模块, 将不同的功能和页面组件注册在不同的模块中, 但是这些模块必须直接或间接的注入到中根模块中. 使用模块可以将一个复杂的应用分成很部分, 每部分有包含各自不通过的功能组件, 从而构成一个完整的应用.前端构建工具 194. 你了解到前端有哪些项目构建工具? webpack, gulp,grunt195. webpack 和 gulp 在进行代码合并的时候还有什么不同?webpack 是基于 commonjs 模块化规范进行代码合并, 而 gulp 只是简单的代码合并.83const path&#x3D;require(&#39;path&#39;);const HtmlWebapckPlugin&#x3D;require(&#39;html-webpack-plugin&#39;); const htmlPlugin&#x3D;new HtmlWebapckPlugin(&#123;template:path.join( dirname,&#39;src&#x2F;index.html&#39;), filename:&#39;index.html&#39;&#125;);module.exports&#x3D;&#123;&#x2F;&#x2F; 打包模式, 可值:development(开发模式),production(生产模式) mode:&#39;development&#39;,&#x2F;&#x2F; 插件配置节点plugins:[&#x2F;&#x2F; html-webpack-plugin 作用:根据模板,在内存中创建一个 html 页面htmlPlugin],resolve:&#123;&#x2F;&#x2F; 配置省略的文件后缀extensions: [&#39;.js&#39;, &#39;.jsx&#39;, &#39;.json&#39;],&#x2F;&#x2F; 配置根路径alias:&#123;&#39;@&#39;:path.join( dirname,&#39;.&#x2F;src&#39;)&#125;&#125;,module:&#123;196. 列举几个 gulp 中常用的插件? 合并文件: gulp-concat;压缩 js: gulp-uglify;文件重命名: gulp-rename; 压 缩 css: gulp-minify-css 压缩 html: gulp-hmltmin启动开发服务器: gulp-connect拷贝文件: gulp-copy197. webpack 有哪些常见的配置? webpack.config.js:84微信小程序 198. 微信小程序目前有几种主流的开发模式? 微信官方:原生方式;&#x2F;&#x2F; 配置 loader rules:[ &#123;test:&#x2F;\.js|jsx$&#x2F;, use:&#39;babel-loader&#39;, exclude:&#x2F;node_modules&#x2F;&#125;,&#123;test: &#x2F;\.scss$&#x2F;, use: [&#39;style-loader&#39;, &#123;loader: &#39;css-loader&#39;, options: &#123;modules: &#123;localIdentName: &#39;[name]-[local]-[hash:5]&#39;&#125; &#125;&#125;,&#39;sass-loader&#39;]&#125;,&#123;test: &#x2F;\.(png|jpg|gif|svg|eot|ttf|woff|woff2)$&#x2F;, loader: &#39;url-loader&#39;, &#x2F;&#x2F; 需 要 依 赖 file-loader options: &#123;limit: 10000&#125; &#125; ] &#125; &#125;85wepy(微信官方推出的开发框架, 为了迎合目前主流前端框架的语法和提高开发效率);第三方公司:mpvue(使用 vue 的语法开发小程序, 是一个阉割版的 vue)uni-app(使用 vue 的语法进行开发, 是一个阉割版的 vue, 据说一套代码可以编译出运行在多个平台的应用)199. 简单介绍微信小程序的开发过程首先得注册以为微信小程序, 因为小程序开发过程中需要一个 appid; 其次下载腾讯官方的开发者工具(开发者工具必须使用个人微信登录), 小程序只能运行在开发这工具或者微信应用内部;创建应用, 填入申请的 appid, 即可快速生成小程序的项目结构.200. 微信小程序中的 tabbar 导航如何制作小程序中的 tabbar 底部导航是配置出来的, 只需要在应用配置文件中添加一个 tabbar 配置阶段, 按照官方文档配置即可, tabbar 数量至少 2 个, 最多 5 个.201. 微信小程序中如何实现页面跳转? 小程序页面跳转:使用组件&lt;navigator url&#x3D;”..&#x2F;home&#x2F;home”&gt;目标页面&lt;&#x2F;navigator&gt;使用 api: wx.navigateTo(&#123;url:’..&#x2F;home&#x2F;home’&#125;)86wx.request(&#123;Tabbar 页 面 跳 转 : wx.switchTabbar(&#123;url:’..&#x2F;index&#x2F;index’&#125;)使用组件&lt;navigator url&#x3D;”..&#x2F;home&#x2F;home” open-type&#x3D;”switchTab”&gt;目标页面&lt;&#x2F;navigator&gt;202. 简单描述微信小程序的生命周期?小程序的生命周期分为应用生命周期和页面生命周期. 应用生命周期:onLaunch: 应用启动, 只执行一次;onShow: 应用切换到前台;onHide: 应用切换到后台模式;noError: 运行阶段出现错误;onPageNotFound: 找不到页面页面生命周期:onLoad: 页面开始加载;onReady: 页面加载完毕;onShow: 页面进入焦点状态;onHide: 页面进入后台状态203. 微信小程序中如何请求数据接口? 通过 wx.request87204. 如何优化小程序代码包的体积?分包加载,使用分包加载可以让小程序代码包体积达到 8M(最多四个分包,每个分包最大 2M);将资源文件尽量放在远程服务器端.205. 你了解到微信小程序有哪些组件库?Vant Weapp, iview Weapp, minui, WeUI, iview-mpvueTypeScript206. Typescript 中有哪些数据类型?number(数值), string(字符型), boolean(布尔), object(对象),undefined(未定义), null(空性), any(任意类型), never, 元组, 枚举, 数 组207. Typescript 和 javascript 的区别?url: &#39;test.php&#39;, &#x2F;&#x2F;仅为示例，并非真实的接口地址data: &#123;x: &#39;&#39;,y: &#39;&#39;&#125;,header: &#123;&#39;content-type&#39;: &#39;application&#x2F;json&#39; &#x2F;&#x2F; 默认值&#125;,success(res) &#123; console.log(res.data) &#125;&#125;)88Typescript 是 javascript 的一个超集, 是 es6 的实现, 支持所有 es6 的语法, Typescript 只是在开发过程中编写的一种中间语言, 浏览器并不能直接解析 Typescript, 上线以后需要将 Typescript 转换成 javascript.208. 什么是装饰器?代码版本控制工具 209. git 中有哪些常用的命令? 初始化仓库: git init添加暂存区: git add 文件名提交到本地仓库: git commit -m ‘注释‘推送到远程仓库: git push 仓库地址 分支名称拉取远程仓库代码: git pull克隆仓库: git clone 仓库地址创建分支: git branch 分支名称切换分支: git checkout 分支名称查看分支: git branch合并分支: git merge 分支名称查看日志: git log (git log --oneline) 查看所有日志: git reflog版 本 回 退 : git reset --hard 版 本 号 (commit-id 可 以 通 过 git log--oneline 获取)89210. git 和 svn 有什么不同?git 是一个分布式仓库管理系统, 每个人本地都有一个本地仓库,svn 是一个集中式仓库管理系统, 仓库只有一个. svn 一般需要服务端给每个人分配账号和密码, git 是使用 ssh 公钥&#x2F;秘钥对来区分不同程序员的.211. git 有哪些常用的图形界面客户端工具? Sourcetree, TortoiseGit212. 在线 Git 代码托管平台有哪些? github(https:&#x2F;&#x2F;www.github.com), gitlab(https:&#x2F;&#x2F;www.gitlab.com), gitee(https:&#x2F;&#x2F;www.gitee.com), coding(https:&#x2F;&#x2F;coding.net),腾讯云开发者平台(https:&#x2F;&#x2F;dev.tencent.com), bitbucket(https:&#x2F;&#x2F;bitbucket.org&#x2F;product&#x2F;)服务器编程 NodeJS213. Nodejs 中有哪些常用内置模块?http; fs(文件系统); path(路径); querystring(查询字符串); url(解析 url)90214. 常用第三方模块express; mysql(操作 mysql); cookie-parser(解析 cookie 的中间件); express-session(处理 session); crypt(加密模块)215. Express 框架如何快速创建一个服务器?216. Express 中路由模块的使用步骤&#x2F;&#x2F; 引入 expressconst express&#x3D;require(&#39;express&#39;)&#x2F;&#x2F; 创建服务器const app&#x3D;express();&#x2F;&#x2F; 监听路由app.get(&#39;&#x2F;&#39;,(req,res)&#x3D;&gt;&#123; res.send(&#39;server running&#39;);&#125;)&#x2F;&#x2F; 启动服务器app.listen(&#39;3000&#39;,()&#x3D;&gt;&#123;console.log(&#39;server running at http:&#x2F;&#x2F;localhost:3000&#39;)&#125;);var express &#x3D; require(&#39;express&#39;)&#x2F;&#x2F; 1. 创建一个路由容器var router &#x3D; express.Router() router.get(&#39;&#x2F;get&#39;, function (req, res) &#123;res.send(&#39;请求了&#x2F;get&#39;)&#125;)router.get(&#39;&#x2F;list&#39;, function (req, res) &#123;res.send(&#39;请求了 &#x2F;list&#39;)&#125;)router.post(&#39;&#x2F;add&#39;, function (req, res) &#123;res.send(&#39;请求了 &#x2F;add&#39;)&#125;)&#x2F;&#x2F; 创建服务器91217. 使用 http 模块快速开启一个 web 服务器Hybird(混合) APP218. 目前流行的混合 App 开发方式Appcan, Hbuilder(X), ApiCloud, 这几中方式大同小异, 都是通过网页的方式开发 app, 然后通过开发工具将代码上传到远程服务器进行在线打包, 开发工具本身会提供一些基础的 api 来帮助我们操作移动终端.219. 什么是 Ionic 和 cordova?const app&#x3D;express();&#x2F;&#x2F; 注册路由中间件app.use(router)&#x2F;&#x2F; 启动服务器app.listen(&#39;3000&#39;,()&#x3D;&gt;&#123;console.log(&#39;server running at http:&#x2F;&#x2F;localhost:3000&#39;)&#125;);var http &#x3D; require(&#39;http&#39;); http.createServer(function (request, response) &#123;&#x2F;&#x2F; 发送 HTTP 头部&#x2F;&#x2F; HTTP 状态值: 200 : OK&#x2F;&#x2F; 内容类型: text&#x2F;plainresponse.writeHead(200, &#123; &#39;Content-Type&#39;: &#39;text&#x2F;plain&#39; &#125;);&#x2F;&#x2F; 发送响应数据 &quot;Hello World&quot; response.end(&#39;Hello World\n&#39;);&#125;).listen(8888);92Ionic 是一个专门针对移动端的组件库, 主要应用于 angular 系列框架的开发中.cordova 是一个移动应用打包工具, 可以将使用 angular+Ionic 开发的移动端网页打包成可以在移动终端中安装的app 应用, cordova 提供了一些基础 api( 比如读取手机通讯录, 获取摄像头权限...), 对于移动终端的一些操作, 必须调用 codorva 提供的基础 api 才能完成.使用 Ionic+cordova 可以实现移动端混合 app 的开发.220. 什么是 react-native?react-native 是 facebook 公司基于 react 的语法设计的一个开发原生移动 app 的解决方案, 可以实现维护一套代码, 即可打包出可以运行在安卓和苹果上的移动应用. 性能层面几乎和原生方式开发的应用接近.221. 什么是 flutter?Flutter 是谷歌的移动 UI 框架，可以快速在 iOS 和 Android 上构建高质量的原生用户界面。 Flutter 可以与现有的代码一起工作。在全世界，Flutter 正在被越来越多的开发者和组织使用，并且 Flutter 是完全免费、开源的。学习 flutter 必须先学习 dart 语言, dart 是谷歌针对移动端开发设计的一门开发语言, 目的是替代 javascript 的功能.222. 什么是 weex?93Weex 是使用 vue 的语法来开发原生 app, 可以使用一套代码, 打包出运行在安卓和苹果两个操作系统上的移动应用,需要在本地配置打包环境, 和react-native 的工作原理类似. 性能层面几乎和原生方式开发的应用接近.223. 你所了解到的产品原型和设计图的共享平台有哪些? (产品原型和设计图的共享平台,可以帮助互联网团队更好地管理文档和设计图。可以实现在线展示网页原型,自动生成设计图标注,与团队共享设计图,展示页面之间的跳转关系, 前端程序员可以从该平台上直接下载设计师设计好的设计图的切片, 并且可以在线查看设计图标注信息)常用产品原型共享平台有: 蓝湖, 墨刀, xiaopiu, Mockplus实际开发相关 224. 商城的购物车是怎么实现的?商城购物车一般会写在本地存储,比如cookie 或者localStorage 中,会采用数组格式的字符串来存储,主要会存储商品id, 商品名称, 商品价格, 商品数量等信息(当然商品价格等敏感信息后期还是以后端为准, 此处存储只是为了方便在页面展示), 如果过要考虑兼容问题, 建议存储 在 cookie 里(因为 localStorage 低版本的浏览器不支持).如果不考兼容问题, 使用 localStorage 性能会更好. 购物车可以在用户未登录的状态就可以添加, 也可以在用户登录以后再添加, 这个完全取决于具94体业务场景.225. 前后端分离的项目如何实现登录状态的保持?前后端分离的项目一般会使用 token 实现登录状态保持.token 其实就是一个随机字符串, 当用户在登录页面输入账号和密码后, 前端将账号密码发送给后端, 后端校验完账号和密码后, 会生成一个随机的不重复的字符串(即 token), 并将其响应给前端, 前端拿到该 token 后, 需要在客户端进行持久化(一般会写在 localStorage 或者sessionStorage 中, 如果是 SPA 会存储在 sessionStorage 中, 如果是MPA 则储存在 localStorage 中), 那么下次在向后端数据接口发送请求的时候, 一般需要将 token 一并发送给后端数据接口, 后端数据接口会对 token 进行校验, 如果合法则正常响应请求, 如果不合法, 则提示未登录. 前端则根据本地存储中是否存在 token 判断用户是否处于登录状态.226. 前后端分离开发的后台管理系统一般如何实现权限管理?首先某个角色有哪些权限肯定是事先配置好的, 并且存储在了数据库里. 当某个账号登录后, 后端数据接口则需要返回该账号对应角色的权限列表, 前端则需要根据该权限列表, 动态渲染管理系统的导航, 当然后端数据接口也会做二次权限校验(当某一个角色请求一个自己没有的授权的数据接口或页面的时候, 后端数据接口也不会正常响应).95const lang&#x3D;&#123; zh:&#123;mainNavi:[ &quot;首页&quot;, &quot;成功案例&quot;, &quot;关于我们&quot;, &quot;联系我们&quot;, &quot;注册&quot;, &quot;登录&quot; ]&#125;,en:&#123;mainNavi:[&quot;home&quot;,&quot;succss cases&quot;, &quot;about me&quot;, &quot;concat us&quot;, &quot;register&quot;, &quot;login&quot;] &#125;227. 如何通过最原始的方式实现一个多语言版的网站?简单来说,一般是通过配置语言包来实现的, 对于一个多语言的版的网页, 并不一定是网页上所有的地方都需要实现多语言, 可能只是某些关键的导航部分会实现多语言. 所以可以准备一个 json 配置文件, 结构大体如下(只是简单举例):当用户选择语言后, 可以将用户选择的语言类型存储在本地存储中, 接着可以根据语言类型,从该语言配置文件中获取对应的配置节点, 动态在页面上输出.228. 如何实现从列表页跳入详情页,并从详情页面返回列表页时,滚96动条还在当时的位置,并且数据不刷新?为了保证返回时，我们还能回到刚才的位置，那么就需要做本地数据存储。[考虑到保证数据和上次用户看到的一致]本地缓存的字段有页码、点击的位置（滚动条的位置），列表数据（具体字段，请自行结合实际） 进行本地缓存。合理的使用本地缓存数据有 cookie 、sessionStorage，至于为啥要用两个，可以自行查阅，着重看一下存储大小的限制问题当从详情返回列表时，首先从缓存中取页码、点击的位置（滚动条的位置），列表数据，如果有位置、列表数据，则直接将列表数据渲染到页面，并滚动到存储的位置点.229. 微信小程序中如何实现页面后退时重新刷新页面?在后退页面的 onShow 方法中手动调用一下 onLoad 方法, 代码如下230. Vue 开发中如果由于某种特殊原因数据更新之后, 页面层没有同步更新, 该如何处理?调用 vm.$forceUpdate()方法强制刷新页面, 该方法可以迫使 Vue 实例重新渲染.231. Vue 中如何动态设置页面的 title 标题?Page(&#123;onShow()&#123; this.onLoad();&#125;&#125;);97const router &#x3D; new VueRouter(&#123; routes: [...],scrollBehavior (to, from, savedPosition) &#123;&#x2F;&#x2F; return 期望滚动到哪个的位置232. 在 vue 中,当切换到新路由时，想要页面滚到顶部，或者页面后退时,想保持原先的滚动位置, 该如何实现?const router &#x3D; new Router(&#123; routes: [&#123; &#x2F;* （首页）默认路由地址 *&#x2F; path: &#39;&#x2F;&#39;,component: login, meta: &#123;title: &#39;首页入口&#39; &#125;&#125;,&#123;path: &#39;&#x2F;apply&#39;, component: apply, meta: &#123;title: &#39;申请&#39; &#125;&#125;,&#123; &#x2F;* Not Found 路由，必须是最后一个路由 *&#x2F; path: &#39;*&#39;,component: NotFound, meta: &#123;title: &#39;找不到页面&#39; &#125; &#125; ]&#125;);router.beforeEach((to, from, next) &#x3D;&gt; &#123;&#x2F;* 路由发生变化修改页面 title *&#x2F; if (to.meta.title) &#123;document.title &#x3D; to.meta.title&#125;next()&#125;)98scrollBehavior 方 法 接 收 to 和 from 路 由 对 象 。 第 三 个 参 数savedPosition 当且仅当通过浏览器的前进&#x2F;后退按钮触发时才可用。这个方法返回滚动位置的对象信息，长这样：&#123; x: number, y: number &#125;233. vue 项目在开发阶段如何解决跨域请求数据? 使用 vue-cli-3.0 版本创建的项目解决跨域请求数据: 第一步: 在项目根目录下创建 vue.config.js第二步: 在 vue.config.js 中添加如下配置节点&#x2F;&#x2F; 返回原来的位置&#x2F;&#x2F; return savePosition&#x2F;&#x2F; 返回页面顶部return &#123; x: 0, y: 0 &#125; &#125;&#125;)module.exports &#x3D; &#123;&#x2F;&#x2F; 开发服务器配置节点devServer: &#123; open: true,host: &#39;localhost&#39;, port: 8081,https: false, hotOnly: false, proxy: &#123; &#x2F;&#x2F; 配置跨域&#39;&#x2F;api&#39;: &#123;&#x2F;&#x2F; 数据接口服务器地址target: &#39;http:&#x2F;&#x2F;localhost:5001&#x2F;api&#x2F;&#39;, ws: true,changOrigin: true, pathRewrite: &#123;&#39;^&#x2F;api&#39;: &#39;&#39;&#125; &#125; &#125;99 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="免责声明：该文来自传智播客，仅供学习使用，禁止用于商业用途，禁止转载，否则追究法律责任！-1"><a href="#免责声明：该文来自传智播客，仅供学习使用，禁止用于商业用途，禁止转载，否则追究法律责任！-1" class="headerlink" title="免责声明：该文来自传智播客，仅供学习使用，禁止用于商业用途，禁止转载，否则追究法律责任！"></a>免责声明：该文来自传智播客，仅供学习使用，禁止用于商业用途，禁止转载，否则追究法律责任！</h3><h3 id="文中难免有错误，获取完整版pdf文档关注微信公众号“51学代码”，回复“前端面试”获取资料。-1"><a href="#文中难免有错误，获取完整版pdf文档关注微信公众号“51学代码”，回复“前端面试”获取资料。-1" class="headerlink" title="文中难免有错误，获取完整版pdf文档关注微信公众号“51学代码”，回复“前端面试”获取资料。"></a>文中难免有错误，获取完整版pdf文档关注微信公众号“51学代码”，回复“前端面试”获取资料。</h3><p><img src="1.png"></p>]]></content>
      
      
      <categories>
          
          <category> 前端面试宝典 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端面试宝典 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何下载魔镜壁纸中的图片</title>
      <link href="year/04/22/t/"/>
      <url>year/04/22/t/</url>
      
        <content type="html"><![CDATA[<h2 id="如何下载魔镜壁纸中的图片"><a href="#如何下载魔镜壁纸中的图片" class="headerlink" title="如何下载魔镜壁纸中的图片"></a>如何下载魔镜壁纸中的图片</h2><p>魔镜壁纸是腾讯管家出品的，一般在桌面助手中或者单独下载。这个软件可以定时切换桌面壁纸，里面有不好好的壁纸，无奈喜欢的壁纸只能收藏没办法下载。但是！凡是能显示到桌面的图片都可以下载，下面我教大家怎么通过腾讯的桌面助手自己找到壁纸下载的地址.</p><p>1.首先是电脑上已经安装好魔镜壁纸或者桌面整理了。</p><p>2.打开壁纸中心，一般桌面上有可以点击切换的六棱形小插件也可以进入</p><p><img src="1.jpg"></p><p>3.选择你喜欢的壁纸点击一下桌面背景就切换了，如果想下载当前的桌面就不要切换了哟</p><p>4.打开桌面整理自带的搜索工具（如果没有搜索工具的可以下载everything软件，这里就不赘述了）</p><p><img src="2.png"></p><p>5.出现搜索栏后点击一下会弹出大个儿的搜索栏可以输入要搜索的东西（第一次点击会慢一些，因为要对你电脑里的文件建立一个索引，方便后期搜索更快，没看懂的可以忽略这句话😄）</p><p>6.我们要搜索什么呢？重点来了！在桌面右键，点击个性化(R) 进入个性化设置界面，找到主题，然后会发现这里居然有桌面壁纸的文件名称！！！</p><p><img src="3.jpg"></p><p><img src="4.png"></p><p>7.然后你就懂了，然后在搜索栏输入文件名中的关键字就可以里看到已经搜索出来了！！！ 在搜索出来的文件名中双击一下或者右键就可以进入到文件所在目录！！！</p><p><img src="5.png"></p><p><img src="6.png"></p><p>8.最后我们就打开我们的图片了，我们可以右键选择保存到桌面，然后我们就可以使用这张图片了，你学会了吗？关注我带你了解更多知识。</p><h3 id="其他的壁纸存放位置："><a href="#其他的壁纸存放位置：" class="headerlink" title="其他的壁纸存放位置："></a>其他的壁纸存放位置：</h3><h4 id="win-R-输入下面命令即可找到目录"><a href="#win-R-输入下面命令即可找到目录" class="headerlink" title="win+R   输入下面命令即可找到目录"></a>win+R   输入下面命令即可找到目录</h4><p>%localappdata%\Packages\Microsoft.Windows.ContentDeliveryManager_cw5n1h2txyewy\LocalState\Assets</p><h4 id="系统默认的桌面墙纸放在C-WINDOWS-Web-Wallpaper文件夹下。"><a href="#系统默认的桌面墙纸放在C-WINDOWS-Web-Wallpaper文件夹下。" class="headerlink" title="系统默认的桌面墙纸放在C:\WINDOWS\Web\Wallpaper文件夹下。"></a>系统默认的桌面墙纸放在C:\WINDOWS\Web\Wallpaper文件夹下。</h4><h4 id="网上单击设为桌面的图片存放在C-Documents-and-Settings-lgj-Local-Settings-Temporary-Internet-Files文件夹下"><a href="#网上单击设为桌面的图片存放在C-Documents-and-Settings-lgj-Local-Settings-Temporary-Internet-Files文件夹下" class="headerlink" title="网上单击设为桌面的图片存放在C:\Documents and Settings\lgj\Local Settings\Temporary Internet Files文件夹下"></a>网上单击设为桌面的图片存放在C:\Documents and Settings\lgj\Local Settings\Temporary Internet Files文件夹下</h4><p>更多知识欢迎关注微信公众号“51学代码”</p><p><img src="51x.png"></p>]]></content>
      
      
      <categories>
          
          <category> 如何下载魔镜壁纸中的图片 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客添加HTML页面</title>
      <link href="year/04/20/s/"/>
      <url>year/04/20/s/</url>
      
        <content type="html"><![CDATA[<h4 id="第一步，在博客根目录的source文件夹下，新建文件夹用于存放HTML文件"><a href="#第一步，在博客根目录的source文件夹下，新建文件夹用于存放HTML文件" class="headerlink" title="第一步，在博客根目录的source文件夹下，新建文件夹用于存放HTML文件"></a>第一步，在博客根目录的<code>source</code>文件夹下，新建文件夹用于存放HTML文件</h4><p><img src="1.png"></p><p>我分别建了love 和 xiangce 两个文件夹，可以将HTML文件css、js等文件放入建好的文件夹中，html文件改为index.html</p><h3 id="第二步，在博客根目录的配置文件-config-yml文件里，跳过渲染"><a href="#第二步，在博客根目录的配置文件-config-yml文件里，跳过渲染" class="headerlink" title="第二步，在博客根目录的配置文件_config.yml文件里，跳过渲染"></a>第二步，在博客根目录的配置文件<code>_config.yml</code>文件里，跳过渲染</h3><p><img src="2.png"></p><p>注意格式：这里如果你是只创建了一个文件夹，要跳过它目录下所有文件的渲染，就写：</p><pre class="line-numbers language-none"><code class="language-none"># 跳过文件夹下所有文件skip_render:   - &quot;文件夹名&#x2F;*&quot;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果文件夹下还有子文件夹，那就这样写：</p><pre class="line-numbers language-none"><code class="language-none"># 跳过子文件夹skip_render:   - &quot;文件夹名&#x2F;子文件夹名&#x2F;*&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>或者更简单直接的方式</p><pre class="line-numbers language-none"><code class="language-none"># 跳过文件夹下所有子文件夹和文件skip_render:   - &quot;文件夹名&#x2F;**&quot;   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="3.png"></p><p>最后找到主题的配置文件添加路经：</p><p><img src="4.png"></p><p>名字依据自己所加内容更改，然后我们 hexo clean 、  hexo  g 、hexo s 本地查看效果：</p><p><img src="5.png"></p><p>此时我们点击它就会跳转到我们的html页面：</p><p><img src="6.png"></p><p>赶快来试试吧！</p><p>更多知识欢迎关注微信公众号“ 51学代码 ”</p><p><img src="01.png"></p>]]></content>
      
      
      <categories>
          
          <category> hexo加入html页面 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo加入html页面 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web前端概述</title>
      <link href="year/04/20/r/"/>
      <url>year/04/20/r/</url>
      
        <content type="html"><![CDATA[<hr><h3 id="Web前端工程师技术点概述"><a href="#Web前端工程师技术点概述" class="headerlink" title="Web前端工程师技术点概述"></a>Web前端工程师技术点概述</h3><p>前端到底是什么？</p><p>前端和HTML5有什么关系？</p><p>前端可以做什么？以后的发展方向是什么？</p><p>Web前端工程师只是一个概念性的名称，它一般叫前端工程师，有时候也叫h5工程师（以前的说明）。现在的Web工程师更多的叫前端（大前端）</p><p>以前的前端工程师可能只是做网页，但是现在的前端工程师基本涉及到全栈化开发</p><pre class="line-numbers language-mermaid" data-language="mermaid"><code class="language-mermaid">graph TDA[前端工程师]--&gt;B[PC页面]A--&gt;C[手机端页面]A--&gt;D[网页游戏]A--&gt;E[各种小程序]A--&gt;F[公众号]A--&gt;G[安卓]A--&gt;H[IOS]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="前端的技术栈"><a href="#前端的技术栈" class="headerlink" title="前端的技术栈"></a>前端的技术栈</h3><ol><li><p>精通HTML，CSS，了解HTML5的新特性，熟练使用div+css进行布局，精通各种布局方式</p><p>流式布局、弹性布局，响应式布局，自适应布局</p><p>熟练的进行页面重构，熟悉各种浏览器的特性与兼容性，熟练的通过原型图转换为网页效果图</p></li><li><p>精通<code>JavaScript</code>原理，熟练的使用ES5，ES6进行代码开发</p></li><li><p>熟悉面向对象开发，了解高类聚与低耦合，熟悉对象特性与原型链</p></li><li><p>熟练操作网页的DOM与BOM进行开发【今天会用到】</p></li><li><p>Ajax数据通讯，fetch数据通讯以及HTTP协议的处理</p></li><li><p>知道了下结常见的基础操作框架<code>jQuery</code>,<code>bootstrap</code></p></li><li><p><code>nodejs</code>，<code>express</code>,路由，<code>service</code>以及<code>mysql</code>或<code>mongodb</code>的数据库后台开发，及<code>webApi</code>的开发方式</p></li><li><p><code>webpack</code></p></li><li><p><code>sass/scss/less/stylues</code></p></li><li><p><code>vue</code>及<code>vue</code>全家桶</p></li><li><p><code>axios</code>数据请求以及状态码，请求拦截，拦截器等</p></li><li><p>微信小程序开发，<code>uniApp</code>混合式APP开发（开发安卓与IOS的）</p></li><li><p><code>react</code>及全家桶开发</p></li></ol><p>…….</p><p>后面还有好多没有列举</p><hr><h3 id="前端知识点串联"><a href="#前端知识点串联" class="headerlink" title="前端知识点串联"></a>前端知识点串联</h3><p>今天我们将会把HTML+CSS+JavaScript的知识做一个串联，以基础授课为主，案例为铺来完成我们的学习</p><p>【我们要慢慢的走向正式班的授课模式】</p><h4 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h4><p>CSS常称九大选择【共11个类型】，不同的选择器决定我们的使用场景会不一样</p><p>CSS常进行样式的操作，我们如果要设置网页中某一个标签的样式，则可以通过它来进行，CSS的代码一般写在3个地方</p><p><strong>第一个地方</strong></p><p>直接将CSS代码写在标签的<code>style</code>属性里面去</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>一号标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">border</span><span class="token punctuation">:</span> 1px solid red<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>标哥哥<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token property">border</span><span class="token punctuation">:</span> 2px solid blue<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>三号标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在上面的HTML代码里面，我们看到可以给它添加一个<code>style</code>，然后在里面输入我们的样式内容，任何HTML都可以</p><p><strong>第二种方式</strong></p><p>上面的写法虽然说非常方便，但是有个问题很严重，如下</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token property">border</span><span class="token punctuation">:</span> 1px solid blue<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>标哥<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token property">border</span><span class="token punctuation">:</span> 1px solid blue<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>真帅<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token property">border</span><span class="token punctuation">:</span> 1px solid blue<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>哈哈哈<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>上面的h3标签样式都是一样的，我们要简化它的操作，操作如下</p><ol><li>将<code>style</code>属性转换成<code>&lt;style&gt;</code>标签，放在<code>&lt;head&gt;</code>里面</li><li>将原来的CSS代码写在<code>&lt;style&gt;</code>标签里面，然后使用<code>&#123;&#125;</code>包括</li><li>因为这段CSS代码是为<code>&lt;h2&gt;</code>标签提供样式的，所以我们可以把它的前面添加一个<code>h3</code>，最终代码如下</li></ol><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token selector">h3</span><span class="token punctuation">&#123;</span>        <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>        <span class="token property">border</span><span class="token punctuation">:</span> 1px solid blue<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span> <span class="token punctuation">></span></span>标哥<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span> <span class="token punctuation">></span></span>真帅<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span> <span class="token punctuation">></span></span>哈哈哈<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这么做的目的就极大的提供了我们的效率，后期的大多数开发里面，都使用的是这一种方式</p><p><strong>第三个地方</strong></p><p>我们可以新建一个CSS的文件，然后再去书写的CSS代码</p><hr><p>针对第二种的方式，我们要知道它的语法</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">h3</span><span class="token punctuation">&#123;</span>    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>    <span class="token property">border</span><span class="token punctuation">:</span> 1px solid blue<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>上面的代码的语法其实是下面这种方式</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">选择器</span><span class="token punctuation">&#123;</span>    <span class="token property">CSS属性</span><span class="token punctuation">:</span>CSS属性值<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>选择器就是用于选择某些元素然后设置某些样式</p><p>在选择器里面，我们有11种选择器，现在我们先列表常用的选择器</p><ol><li><p>标签选择器</p><p>以标签的名子为选择器的名子来进行选择，如下所示</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token selector">h1</span><span class="token punctuation">&#123;</span>        <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">h2</span><span class="token punctuation">&#123;</span>        <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">h3</span><span class="token punctuation">&#123;</span>        <span class="token property">color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">p</span><span class="token punctuation">&#123;</span>        <span class="token property">color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>第一个<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>第二个<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>第三个<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>第四个<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>第五个<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>标签选择器是一种最直观的选择器</p></li><li><p>ID选择器</p><p>这是一种比较常用的选择器，一般用于精确选择某一个元素</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token comment">/* 只希望把标哥哥设置为红色 */</span>    <span class="token comment">/* #a代表的就是id="a" */</span>    <span class="token selector">#a</span><span class="token punctuation">&#123;</span>        <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>标哥哥<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>小姐姐<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="01.png"></p></li><li><p>子代选择器</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token selector">#box1</span><span class="token punctuation">&#123;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>        <span class="token property">border</span><span class="token punctuation">:</span> 2px solid red<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/* 将盒子内部的h2设置为蓝色 */</span>    <span class="token selector">#box1>h2</span><span class="token punctuation">&#123;</span>        <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>我在盒子的里面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>我在盒子的外边<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>伪类与伪元素选择器</p><p>伪类与伪元素选择器非常重要，学好这个代码会少很多，我们之前已经学过了几个常用的伪类选择器</p><ul><li><code>:hover</code>代表鼠标放上去的效果</li><li><code>:active</code>代表鼠标按下去以后的效果</li><li><code>:nth-child</code>选中第几个子元素经</li></ul></li></ol><blockquote><p>剩下的选择器将在下次基础课程当中完整讲解，本次课程的基础是以案例为目标来讲的</p></blockquote><h4 id="CSS的定位与变换"><a href="#CSS的定位与变换" class="headerlink" title="CSS的定位与变换"></a>CSS的定位与变换</h4><p>为了完成我们的案例效果，我们需要使用到CSS当中一些常用样式属性</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">选择器</span><span class="token punctuation">&#123;</span>    <span class="token property">CSS属性</span><span class="token punctuation">:</span>CSS属性值<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>上面的基础里面，我们已经可以通过选择器完成HTML元素的选择，再我应该要通过样式去设置它了</p><p>所以当我们想实现环形动画的时候，我们就要掌握其中的2个基本点</p><h5 id="子绝父相"><a href="#子绝父相" class="headerlink" title="子绝父相"></a>子绝父相</h5><p>子绝父相是一种布局概念，它可以让元素以另一个元素标准进行布局【定位的基础】</p><p>子绝父相就是子级元素使用绝对定位 而父级元素使用相对定位</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token selector">#box</span><span class="token punctuation">&#123;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>        <span class="token property">border</span><span class="token punctuation">:</span> 2px solid black<span class="token punctuation">;</span>        <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">#a</span><span class="token punctuation">&#123;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> deeppink<span class="token punctuation">;</span>        <span class="token comment">/* 绝对定位 */</span>        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">#b</span><span class="token punctuation">&#123;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> lightseagreen<span class="token punctuation">;</span>        <span class="token comment">/* 绝对定位 */</span>        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>第一个盒子<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>b<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>第二个盒子<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="变换transform"><a href="#变换transform" class="headerlink" title="变换transform"></a>变换transform</h5><p>变换是CSS3当中最常的一种特效，目前主流的变换方式有以下几种</p><ol><li>位移<code>translate</code></li><li>缩放<code>scale</code></li><li>旋转<code>rotate</code></li></ol><hr><p><strong>位移translate</strong></p><p>位移指的是元素在X轴，Y轴或Z轴上面发生位子的变化</p><ol><li><code>translateX</code>沿着X轴发生位移</li><li><code>translateY</code>沿着Y轴发生位移</li><li><code>translateZ</code>沿着Z轴发生位移</li></ol><blockquote><p>关于位置移动有个口诀：左负右正，上负下正</p></blockquote><p><strong>缩放scale</strong></p><p>缩放指元素的大小像放大镜一样发生了变化</p><ol><li><code>scaleX</code>在X轴上缩放</li><li><code>scaleY</code>在Y轴上缩放</li><li><code>scale</code>在X轴与Y轴同时缩放</li><li><code>scale3d</code>在X轴与Y轴和Z轴上面同时缩放</li></ol><blockquote><p>缩放是以倍数为单位，默认是<code>1:1</code></p></blockquote><p><strong>旋转rotate</strong></p><p>旋转是元素沿着某一个角度去发生变换</p><ol><li><code>rotateX</code>沿着X轴旋转</li><li><code>rotateY</code>沿着Y轴旋转</li><li><code>rotateZ</code>沿着Z轴去旋转</li></ol><blockquote><p>注意事项：</p><ol><li>旋转是以角度为单位<code>deg</code></li><li>Z轴上面顺时针是正数，逆时针是负数</li><li>X轴与Y轴执行“握手原则”去判断，握手进去的方向是正，反之为负</li></ol></blockquote><p><strong>开启3D的模式</strong></p><p>目前开启3D模式主要有2种</p><ol><li><p>添加视角</p><p>一般是在变换元素的外层添加<code>perspective</code>即可实现</p></li><li><p>形成Z轴也可以实现3D</p><p>默认情况下，网页上面的空间都是平面空间，不可能有3D，也就不可以有Z轴，但是可以添加<code>transform-style:preserve-3d;</code>来转换成3D空间</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token selector">#box</span><span class="token punctuation">&#123;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>        <span class="token property">border</span><span class="token punctuation">:</span> 2px solid black<span class="token punctuation">;</span>        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateX</span><span class="token punctuation">(</span>15deg<span class="token punctuation">)</span> <span class="token function">rotateY</span><span class="token punctuation">(</span>15deg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/* 将这个盒子由平面空间转换为3D空间 */</span>        <span class="token property">transform-style</span><span class="token punctuation">:</span> preserve-3d<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">#a</span> <span class="token punctuation">&#123;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> deeppink<span class="token punctuation">;</span>        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateZ</span><span class="token punctuation">(</span>50px<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>旋转<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="CSS过渡"><a href="#CSS过渡" class="headerlink" title="CSS过渡"></a>CSS过渡</h4><p>CSS中的过渡指的元素由一个值变成另一个值的时候，实现一个缓慢的过渡效果</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    这是一个盒子<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token selector">.a</span><span class="token punctuation">&#123;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.a:hover</span><span class="token punctuation">&#123;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当鼠标放在<code>.a</code>的元素上面的时候，宽度由100px变成200px是一瞬间完成的，我们希望它有一个过渡效果，怎么办呢？</p><p>我们可以把上面的CSS代码换成这个代码</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.a</span><span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>    <span class="token property">transition</span><span class="token punctuation">:</span> width 2s<span class="token punctuation">,</span>height 2s 2s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.a:hover</span><span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>过渡主要使用的是<code>transition</code>来完成的</p><h4 id="CSS的动画"><a href="#CSS的动画" class="headerlink" title="CSS的动画"></a>CSS的动画</h4><ol><li>动画的定义</li><li>动画的使用</li></ol><h4 id="JavaScript的语法基础"><a href="#JavaScript的语法基础" class="headerlink" title="JavaScript的语法基础"></a>JavaScript的语法基础</h4><p>JavaScript是我们网页开发过程当中最重要的一个环节，它与我们的<code>Java</code>语言有很多相似之处，它也是一门编程语言，是Web前端开发过程当中必不可少的一个环节</p><p>JavaScript的代码一般写在网页面<code>&lt;script&gt;</code>里面</p><p>更多知识欢迎关注微信公众号“ 51 学代码 ”</p><p><img src="1.png"></p>]]></content>
      
      
      <categories>
          
          <category> 前端概述 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客搭建教程</title>
      <link href="year/04/17/p/"/>
      <url>year/04/17/p/</url>
      
        <content type="html"><![CDATA[<h2 id="一、hexo博客搭建教程："><a href="#一、hexo博客搭建教程：" class="headerlink" title="一、hexo博客搭建教程："></a>一、hexo博客搭建教程：</h2><p>1、作者主题仓库介绍 <a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md">https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md</a> </p><p>以及 Yafine大佬 Hexo+github搭建博客(超级详细版，精细入微)<a href="https://yafine-blog.cn/posts/4ab2.html">https://yafine-blog.cn/posts/4ab2.html</a><br>鉴于有的小伙伴从主题作者的GitHub仓库下载速度慢，个人把作者的仓库同步到码云上了，不定期进行同步更新，地址：<a href="https://gitee.com/yafine66/hexo-theme-matery">https://gitee.com/yafine66/hexo-theme-matery</a></p><p>方便大家下载。<br>2、前者能解决大部分问题，还有问题请先百度/谷歌，也可以去主题github issues上搜搜看，尝试自己去解决问题，这对自己有好处。<br>3、上述已经解决90%的问题了，实在找不到办法，请把你的问题用最明了最清晰的语言表达（贴上代码及报错）发到群里，（QQ群：670694035）群友看到后，会试着帮你解决问题的。大佬可能会缺席，但不会迟到。</p><h2 id="二、将hexo博客部署到腾讯云或者阿里云服务器上："><a href="#二、将hexo博客部署到腾讯云或者阿里云服务器上：" class="headerlink" title="二、将hexo博客部署到腾讯云或者阿里云服务器上："></a>二、将hexo博客部署到腾讯云或者阿里云服务器上：</h2><p>参考：<a href="https://zhuanlan.zhihu.com/p/120322118">https://zhuanlan.zhihu.com/p/120322118</a></p><p>其中他的最后一步会出现错误，用他的方法解决不了，实际上我们应该在服务器里增加命令</p><p>需要到服务器端将git-receive-pack和git-upload-pack链接到/usr/bin/中</p><p>执行以下两条命令（切记！！！一定得去服务器端增加这两条命令）</p><p>ln -s /usr/local/git/bin/git-receive-pack /usr/bin/git-receive-pack</p><p>ln -s /usr/local/git/bin/git-upload-pack /usr/bin/git-upload-pack </p><p>然后重新部署就可以了。</p><p>欢迎关注微信公众号“51学代码”</p><p><img src="51x.png"></p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css动画案例-大风车、芝麻开门、桃心</title>
      <link href="year/04/15/q/"/>
      <url>year/04/15/q/</url>
      
        <content type="html"><![CDATA[<h3 id="项目准备"><a href="#项目准备" class="headerlink" title="项目准备"></a>项目准备</h3><h4 id="素材准备"><a href="#素材准备" class="headerlink" title="素材准备"></a>素材准备</h4><p>本次项目无需素材准备</p><h4 id="技术准备"><a href="#技术准备" class="headerlink" title="技术准备"></a>技术准备</h4><ol><li>使用到了第一次到第三次周末班的技术点，变换transform,使用到了动画及阶段型动画</li><li>使用到了“子绝父相”</li><li>动画的状态的改变以及伪类<code>:hover</code>的应用</li></ol><h4 id="开发工具的准备"><a href="#开发工具的准备" class="headerlink" title="开发工具的准备"></a>开发工具的准备</h4><p>本次项目，我们使用的是<code>HbuilderX</code>来完成的</p><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p>前端项目的创建非常简单</p><ol><li>直接在桌面上创建一个文件夹，命名为”bgg_dfc”</li><li>将刚刚创建好的文件夹插入到<code>HbuilderX</code>的开发工具里面</li><li>在刚刚创建的项目里面，点击鼠标右键 ，选择新建一个<code>html</code>文件，我们命名为<code>01.html</code></li></ol><p>最终结果如下</p><p><img src="01.png"></p><p> 上面的代码，我们说明一下</p><p><code>&lt;head&gt;&lt;/head&gt;</code>代表的是浏览器的头部信息</p><p><code>&lt;title&gt;&lt;/title&gt;</code>代表网页的标题</p><p><code>&lt;body&gt;&lt;/body&gt;</code>代表浏览器的网页的主体部分</p><h3 id="大风车案例"><a href="#大风车案例" class="headerlink" title="大风车案例"></a>大风车案例</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>标哥哥的大风车<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 样式 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">.big-box</span><span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 450px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 450px<span class="token punctuation">;</span><span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span><span class="token comment">/* 设置圆角边框 ，变成一个圆 */</span><span class="token property">border-radius</span><span class="token punctuation">:</span> 225px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* .box 相当于class="box" */</span><span class="token selector">.box</span><span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 400px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 400px<span class="token punctuation">;</span><span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span><span class="token property">right</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span><span class="token property">bottom</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span><span class="token property">border-radius</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span><span class="token property">animation-name</span><span class="token punctuation">:</span> box_ani<span class="token punctuation">;</span> <span class="token comment">/*动画的名称*/</span><span class="token property">animation-duration</span><span class="token punctuation">:</span> 5s<span class="token punctuation">;</span>  <span class="token comment">/*动画播放一次的时间*/</span><span class="token property">animation-iteration-count</span><span class="token punctuation">:</span> infinite<span class="token punctuation">;</span> <span class="token comment">/*动画执行无穷次*/</span><span class="token property">animation-timing-function</span><span class="token punctuation">:</span> linear<span class="token punctuation">;</span>  <span class="token comment">/*动画匀速执行*/</span><span class="token punctuation">&#125;</span><span class="token comment">/* 分组 */</span><span class="token selector">.one,.two,.three,.four</span><span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span><span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span><span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span><span class="token property">top</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span><span class="token property">transform-origin</span><span class="token punctuation">:</span> left top<span class="token punctuation">;</span><span class="token property">border-bottom-left-radius</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span><span class="token property">border-bottom-right-radius</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.one</span><span class="token punctuation">&#123;</span><span class="token property">background-color</span><span class="token punctuation">:</span> deeppink<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.two</span><span class="token punctuation">&#123;</span><span class="token property">background-color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateZ</span><span class="token punctuation">(</span>90deg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.three</span><span class="token punctuation">&#123;</span><span class="token property">background-color</span><span class="token punctuation">:</span> aqua<span class="token punctuation">;</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateZ</span><span class="token punctuation">(</span>180deg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.four</span><span class="token punctuation">&#123;</span><span class="token property">background-color</span><span class="token punctuation">:</span> lightseagreen<span class="token punctuation">;</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateZ</span><span class="token punctuation">(</span>270deg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 定义动画使用 */</span><span class="token atrule"><span class="token rule">@keyframes</span> box_ani</span><span class="token punctuation">&#123;</span><span class="token selector">0%</span><span class="token punctuation">&#123;</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateZ</span><span class="token punctuation">(</span>0deg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">100%</span><span class="token punctuation">&#123;</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateZ</span><span class="token punctuation">(</span>360deg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>big-box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>one<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>two<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>three<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>four<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面是最基本的大风车案例，我们现在希望做一次扩展</p><ol><li>风车默认是没有转的，我的鼠标如果放上去以后，才开始转</li><li>鼠标如果在购车上面按住鼠标不松开的时候，风车转的速度要快一些</li></ol><p>要完成上面的点有2人个问题需要克服</p><ol><li>鼠标放在某一个元素上面的效果我们应该怎么办</li><li>鼠标按下去的效果我们应该怎么办</li></ol><p>要实现上面的东西，我们就要接解新的知识点，这个知识是属于CSS的<strong>伪类</strong>环节</p><p><img src="02.png"></p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 鼠标放在box上面以后，它要开始动画 */</span><span class="token selector">.box:hover</span><span class="token punctuation">&#123;</span>    <span class="token property">animation-play-state</span><span class="token punctuation">:</span> running<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 鼠标按下去以后，播放速度要加快 */</span><span class="token selector">.box:active</span><span class="token punctuation">&#123;</span>    <span class="token property">animation-duration</span><span class="token punctuation">:</span> 1s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="芝麻开门案例"><a href="#芝麻开门案例" class="headerlink" title="芝麻开门案例"></a>芝麻开门案例</h3><p><img src="03.png"></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>开门大吉<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">.door</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 700px<span class="token punctuation">;</span><span class="token property">border</span><span class="token punctuation">:</span> 5px solid black<span class="token punctuation">;</span><span class="token property">font-size</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span><span class="token property">perspective</span><span class="token punctuation">:</span> 700px<span class="token punctuation">;</span><span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span><span class="token comment">/* 鼠标光标变成手的形状 */</span><span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.left-door</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 250px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 700px<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span> deeppink<span class="token punctuation">;</span><span class="token comment">/* 转为行内块级元素 */</span><span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span><span class="token property">transform-origin</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span><span class="token comment">/* 添加一个过渡 */</span><span class="token property">transition</span><span class="token punctuation">:</span> all 1s linear<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 右边的门设置为蓝色 */</span><span class="token selector">.right-door</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 250px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 700px<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span> lightseagreen<span class="token punctuation">;</span><span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span><span class="token property">transform-origin</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span><span class="token property">transition</span><span class="token punctuation">:</span> all 1s linear<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* #aaa代表的就是id="aaa"+代表兄弟元素,>代表子元素 */</span><span class="token selector">#aaa:checked+.door>.left-door</span><span class="token punctuation">&#123;</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateY</span><span class="token punctuation">(</span>30deg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">#aaa:checked+.door>.right-door</span><span class="token punctuation">&#123;</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateY</span><span class="token punctuation">(</span>-30deg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">#aaa</span><span class="token punctuation">&#123;</span><span class="token comment">/* 隐藏某一个元素 */</span><span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>aaa<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>door<span class="token punctuation">"</span></span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>aaa<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>left-door<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>right-door<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><h4 id="css样式总结"><a href="#css样式总结" class="headerlink" title="css样式总结"></a>css样式总结</h4><ol><li><code>class</code>代表在CSS里面使用<code>.</code>来表示 ，如<code>.box</code>就相当于<code>class=&quot;box&quot;</code></li><li><code>width</code>与<code>height</code>分别用于设置宽度与高度</li><li><code>border</code>是用于设置边框的，<code>border:2px solid black</code>代表的是2个像素的实线的黑色边框</li><li>变换使用<code>transorm</code>,<code>rotate</code>是旋转</li><li><code>transform-origin</code>设置变换的起点位置</li><li><code>border-radius</code>用于设置圆角边框 </li><li><code>border-bottom-left-radius</code>左下角的圆角边框</li><li><code>:hover</code>代表鼠标放上去以后的特殊状态效果</li><li><code>:active</code>代表鼠标按下以后的特殊状态效果</li><li><code>animation-play-state</code>代表动画播放的状态，<code>running</code>代表正常播放，<code>paused</code>代表动画暂停</li><li><code>transition</code>过渡，指元素的样式 由一个状态变成另一个状态的过渡效果【与动画很相似】</li><li><code>display:none</code>隐藏元素</li><li><code>:checked</code>复选框选中以后的状态</li><li><code>cursor:pointer</code>鼠标光标变成手的形状</li></ol><h3 id="桃心案例"><a href="#桃心案例" class="headerlink" title="桃心案例"></a>桃心案例</h3><p><img src="04.png"></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>桃心<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">.box</span><span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 480px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 400px<span class="token punctuation">;</span><span class="token property">border</span><span class="token punctuation">:</span> 2px solid black<span class="token punctuation">;</span><span class="token property">font-size</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 左边的心宽度240，高度400，背景blue */</span><span class="token comment">/* 右边的心宽度240，高度400，背景red */</span><span class="token comment">/* 左右两个盒子排在一行 */</span><span class="token selector">.left</span><span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 240px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 400px<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span><span class="token property">border-top-left-radius</span><span class="token punctuation">:</span> 120px<span class="token punctuation">;</span><span class="token property">border-top-right-radius</span><span class="token punctuation">:</span> 120px<span class="token punctuation">;</span><span class="token comment">/* 设置变化的起点 */</span><span class="token property">transform-origin</span><span class="token punctuation">:</span> right bottom<span class="token punctuation">;</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateZ</span><span class="token punctuation">(</span>45deg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.right</span><span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 240px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 400px<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span><span class="token property">border-top-left-radius</span><span class="token punctuation">:</span> 120px<span class="token punctuation">;</span><span class="token property">border-top-right-radius</span><span class="token punctuation">:</span> 120px<span class="token punctuation">;</span><span class="token comment">/* 设置变化的起点 */</span><span class="token property">transform-origin</span><span class="token punctuation">:</span> left bottom<span class="token punctuation">;</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateZ</span><span class="token punctuation">(</span>-45deg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><ol><li><p>子绝父相：当一个元素如果要以另一个元素为标准进行位置设置的时候，最好的办法就是“子绝父相”</p><p>子绝父相就是子级元素使用绝对定位（<code>position:absolute</code>），父级元素使用相对定位（<code>position:relative</code>）</p></li><li><p>分组选择器：当几个元素的样式相同的时候，我们可以使用分组选择器来简化我们的代码 </p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.one,.two,.three,.four</span><span class="token punctuation">&#123;</span>    <span class="token comment">/*代码*/</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>动画的定义我们仍然使用<code>@keyframes</code></p></li><li><p>元素如果想排在一行，可以把元素转换为行内块级元素<code>display:inline-block</code></p></li><li><p>如果转换元素以后中间的缝隙，则在父级元素上面添加<code>font-size:0px</code></p></li><li><p>选择器当中，<code>.</code>代表的是class，<code>#</code>代表的是id</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">#aaa</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token selector">.box</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 教程来源：软帝标哥</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> css动画 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css动画案例-西游记</title>
      <link href="year/04/04/o/"/>
      <url>year/04/04/o/</url>
      
        <content type="html"><![CDATA[<h3 id="项目准备"><a href="#项目准备" class="headerlink" title="项目准备"></a>项目准备</h3><ol><li><p>素材准备，本次案例我们将使用西游记的素材，并且会介绍一个新的图片格式（精灵图）</p><p>什么是精灵图：就是一个张图片上面有多个图像区域</p></li><li><p>知识点准备</p><p>本次案例我们采用HTML+CSS的方式去完成，基本知识点要准备如下</p><ul><li>HTML语言基础</li><li>CSS语言基础，class选择器，基础CSS样式</li><li>定义动画<code>@keyframes</code>，使用动画<code>animation</code></li></ul></li></ol><p>本次课程主要是对动画做了扩展，讲解了两种类型的动画 </p><pre class="line-numbers language-mermaid" data-language="mermaid"><code class="language-mermaid">graph TDA[动画类型]--&gt;B[流畅动画]A--&gt;C[帧动画]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>背景实现的是流畅动画，而人物的行走是帧动画</p><h3 id="项目创建"><a href="#项目创建" class="headerlink" title="项目创建"></a>项目创建</h3><ol><li>在桌面上面创建一个<code>bgg_xyj</code>的文件夹，然后打开我们的开发工具<code>HBuilderX</code>，最后将刚刚创建好的文件夹拖入进去</li><li>将之前准备好的素材<code>img</code>文件夹拖入到刚刚创建的项目文件夹当中</li><li>在当前的项目下面新建一个<code>index.html</code>的文件</li></ol><p><img src="image-20210321102528396.png"></p><h3 id="开发过程"><a href="#开发过程" class="headerlink" title="开发过程"></a>开发过程</h3><p>在整个项目的开发过程当中，我们先从基础开始学起，我们本来是有师徒4个人，我们只用先完成一个人的就可以了的，后面的我们可以参照完成</p><p><img src="image-20210321102907913.png" alt="image-20210321102907913"></p><p>我们得到的上面的这种素材图，我们要将这样的素材转换成一个可以行走的动画效果，所以我们可以把这样的素材图片看成是一个“胶卷”，这个胶卷在不停的放电影 </p><p>一个胶卷不可能在放映的时候同时展示这么多图片，只能一张一张的展示，所以我们要用设置一个人物大小就行了</p><p><img src="image-20210321103058295.png" alt="image-20210321103058295"></p><p>我们通过属性可以看到整个图片的宽度是<code>1600px</code>，高度则是<code>180px</code>，而这个图片里面8个人物，所以每个人物的宽度是<code>1600px/8=200px</code></p><p><strong>首先，我们先完成孙悟空的</strong></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token comment">/* .monkey_sun就相当于class="monkey_sun" */</span>    <span class="token selector">.monkey_sun</span> <span class="token punctuation">&#123;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 180px<span class="token punctuation">;</span>        <span class="token property">border</span><span class="token punctuation">:</span> 2px solid red<span class="token punctuation">;</span>        <span class="token comment">/* 相对定位 */</span>        <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.img_sun</span><span class="token punctuation">&#123;</span>        <span class="token comment">/* 绝对定位 */</span>        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>        <span class="token property">left</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span>        <span class="token property">top</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 第一步：先在网页上面创建一个盒子 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>monkey_sun<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 在这里需要插入孙悟空的图片 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>img/1.png<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>img_sun<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>经过我们的实例分析以后，我们发现，这个图片需要经过8个阶段去完成，每个阶段都显示对象的一张图片，这样我们会引出我们的动画的另一种形式**阶段型动画</p><p>什么是阶段型动画？就是我们的动画是有阶段进行的</p><p><img src="image-20210321114148431.png" alt="image-20210321114148431"></p><h4 id="定义阶段型动画"><a href="#定义阶段型动画" class="headerlink" title="定义阶段型动画"></a>定义阶段型动画</h4><p>之前在上一次的周末班里面，我们已经知道定义动画使用<code>@keyframes</code>来进行，所以我们也通过关键来定义今天的动画</p><table><thead><tr><th>阶段</th><th>开始时间</th><th>结束时间</th><th>图片位置</th></tr></thead><tbody><tr><td>1</td><td>0</td><td>12.5</td><td>0</td></tr><tr><td>2</td><td>12.6</td><td>25</td><td>-200</td></tr><tr><td>3</td><td>25.1</td><td>37.5</td><td>-400</td></tr><tr><td>4</td><td>37.6</td><td>50</td><td>-600</td></tr><tr><td>5</td><td>50.1</td><td>62.5</td><td>-800</td></tr><tr><td>6</td><td>62.6</td><td>75</td><td>-1000</td></tr><tr><td>7</td><td>75.1</td><td>87.5</td><td>-1200</td></tr><tr><td>8</td><td>87.6</td><td>100</td><td>-1400</td></tr></tbody></table><p>根据上面的图表，我们可以定义出如下的阶段型动画</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 定义了一个动画 */</span><span class="token atrule"><span class="token rule">@keyframes</span> ani_sun</span><span class="token punctuation">&#123;</span>    <span class="token selector">0%,12.5%</span><span class="token punctuation">&#123;</span>        <span class="token property">left</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">12.6%,25%</span><span class="token punctuation">&#123;</span>        <span class="token property">left</span><span class="token punctuation">:</span> -200px<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">25.1%,37.5%</span><span class="token punctuation">&#123;</span>        <span class="token property">left</span><span class="token punctuation">:</span> -400px<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">37.6%,50%</span><span class="token punctuation">&#123;</span>        <span class="token property">left</span><span class="token punctuation">:</span> -600px<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">50.1%,62.5%</span><span class="token punctuation">&#123;</span>        <span class="token property">left</span><span class="token punctuation">:</span> -800px<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">62.6%,75%</span><span class="token punctuation">&#123;</span>        <span class="token property">left</span><span class="token punctuation">:</span> -1000px<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">75.1%,87.5%</span><span class="token punctuation">&#123;</span>        <span class="token property">left</span><span class="token punctuation">:</span> -1200px<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">87.6%,100%</span><span class="token punctuation">&#123;</span>        <span class="token property">left</span><span class="token punctuation">:</span> -1400px<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当上面的动画定义好了以后，我们还需要去调用这个动画</p><h4 id="帧动画"><a href="#帧动画" class="headerlink" title="帧动画"></a>帧动画</h4><p>我们如果采用上面的方式去完成的时候，发现计算阶段的时候很麻烦，同时有的阶段时间不是等分的</p><p>为了更好的解决这个问题，在CSS的动画当中，演变出了一个新的东西，叫<strong>帧动画</strong>（顾名思义就是一帧一帧的动画）</p><p><strong>定义动画</strong></p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@keyframes</span> ani_sun</span> <span class="token punctuation">&#123;</span>    <span class="token selector">0%</span> <span class="token punctuation">&#123;</span>        <span class="token property">left</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">100%</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/*这里的值变成了-1600px*/</span>        <span class="token property">left</span><span class="token punctuation">:</span> -1600px<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>调用动画</strong></p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.img_sun</span> <span class="token punctuation">&#123;</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span>    <span class="token property">animation-name</span><span class="token punctuation">:</span> ani_sun<span class="token punctuation">;</span>    <span class="token property">animation-duration</span><span class="token punctuation">:</span> 0.8s<span class="token punctuation">;</span>     <span class="token property">animation-iteration-count</span><span class="token punctuation">:</span> infinite<span class="token punctuation">;</span>    <span class="token comment">/* steps(8)代表把动画拆分成8帧去运行 */</span>    <span class="token property">animation-timing-function</span><span class="token punctuation">:</span> <span class="token function">steps</span><span class="token punctuation">(</span>8<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的代码当中，我们让系统自动的从0%~100%拆分成了8个步骤（拆分成8帧去运行）</p><p>当我们通过上面的代码完成了孙悟空的效果以后，其它的动画效果也是一样的</p><h4 id="动画的视觉差"><a href="#动画的视觉差" class="headerlink" title="动画的视觉差"></a>动画的视觉差</h4><p>所谓动画的视觉差其实就是利用特殊的素材图片实现一个循环动画的效果，在本次的案例当中我们可以看到背景图片是在不停的滚动，它其实就是一个特殊的背景图片</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>西游记背景<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">.bg-box</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 1920px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 786px<span class="token punctuation">;</span><span class="token property">border</span><span class="token punctuation">:</span> 5px solid deeppink<span class="token punctuation">;</span><span class="token property">margin</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span><span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span> <span class="token comment">/*相对定位*/</span><span class="token comment">/* 溢出隐藏 */</span><span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.img-box</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>1920px * 2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 786px<span class="token punctuation">;</span><span class="token comment">/* 设置背景图片，图片只有1920px,但是盒子有3840px ，如果图片小于盒子，则会自动的重复平铺*/</span><span class="token property">background-image</span><span class="token punctuation">:</span><span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>img/bg.jpg<span class="token punctuation">)</span></span><span class="token punctuation">;</span><span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token comment">/*绝对定位*/</span><span class="token property">left</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span><span class="token property">top</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span><span class="token property">animation-name</span><span class="token punctuation">:</span> ani_bg<span class="token punctuation">;</span><span class="token property">animation-duration</span><span class="token punctuation">:</span> 15s<span class="token punctuation">;</span><span class="token property">animation-iteration-count</span><span class="token punctuation">:</span> infinite<span class="token punctuation">;</span><span class="token property">animation-timing-function</span><span class="token punctuation">:</span> linear<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token atrule"><span class="token rule">@keyframes</span> ani_bg</span><span class="token punctuation">&#123;</span><span class="token selector">0%</span><span class="token punctuation">&#123;</span><span class="token property">left</span><span class="token punctuation">:</span> -1920px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">100%</span><span class="token punctuation">&#123;</span><span class="token property">left</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bg-box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>img-box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里背景的动画视觉差其实就是两个图片的首尾相连</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li><p><code>overflow</code>是盒子的溢出处理，当一个小的容器里面放一个大的元素，就会存在溢出的情况，<code>overflow:hidden</code>就是溢出隐藏</p></li><li><p>关于<code>margin:auto</code>居中</p><p><a href="http://www.softeem.xin:8090/archives/%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B#%E5%85%83%E7%B4%A0%E7%B1%BB%E5%9E%8B">http://www.softeem.xin:8090/archives/%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B#%E5%85%83%E7%B4%A0%E7%B1%BB%E5%9E%8B</a></p></li><li><p>关于定位以后的Z轴问题（脱流问题），请参考</p><p><a href="http://www.softeem.xin:8090/archives/%E5%AE%9A%E4%BD%8D#%E7%BB%9D%E5%AF%B9%E5%AE%9A%E4%BD%8D">http://www.softeem.xin:8090/archives/%E5%AE%9A%E4%BD%8D#%E7%BB%9D%E5%AF%B9%E5%AE%9A%E4%BD%8D</a></p></li><li><p>合理的使用CSS的分组选择器可以提供开发效率，关于CSS的分组选择器，请参考</p><p><a href="http://www.softeem.xin:8090/archives/CSS%E5%9F%BA%E7%A1%80#css%E9%80%89%E6%8B%A9%E5%99%A8">http://www.softeem.xin:8090/archives/CSS%E5%9F%BA%E7%A1%80#css%E9%80%89%E6%8B%A9%E5%99%A8</a></p></li><li><p>关于元素里面的<strong>块级元素</strong>与<strong>行内块级</strong>元素，请参考</p><p><a href="http://www.softeem.xin:8090/archives/%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B#%E5%85%83%E7%B4%A0%E7%B1%BB%E5%9E%8B">http://www.softeem.xin:8090/archives/%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B#%E5%85%83%E7%B4%A0%E7%B1%BB%E5%9E%8B</a></p></li><li><p>关于如果让元素居中的问题，还请参考第2点</p></li><li><p>关于元素的垂直居中，一直是一个痛点，这个后面会开专题讲解</p></li></ol><p>​     教程来源：软帝标哥</p>]]></content>
      
      
      <categories>
          
          <category> css动画 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css动画案例-3D相册</title>
      <link href="year/04/04/n/"/>
      <url>year/04/04/n/</url>
      
        <content type="html"><![CDATA[<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>本次项目我们使用开发工具为<code>HBuilderX</code>来进行</p><ol><li>设置开发软件的主题为你自己合适的主题</li><li>设置快捷键为<code>VS Code</code>的快捷</li><li>本次项目需要准备素材图片</li></ol><h3 id="项目创建"><a href="#项目创建" class="headerlink" title="项目创建"></a>项目创建</h3><p>使用HbuilderX 来创建项目，我们可以采取一种<strong>最简单</strong>的方式来创建项目</p><ol><li>在电脑的桌面上面创建一个英文的文件夹，如<code>bgg</code></li><li>将之前准备好的素材文件夹<code>img</code>剪切到<code>bgg</code>的文件夹里面</li><li>将<code>bgg</code>文件夹拖入到<code>HBuilderX</code>这个开发工具里面去</li></ol><h3 id="开始项目"><a href="#开始项目" class="headerlink" title="开始项目"></a>开始项目</h3><ol><li><p>在当前项目下面新建一个<code>index.html</code>的文件，这是一个网页文件，新的项目当中，代码如下</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>开始设置中间的盒子</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>接下来设置样式</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* .box相当于class="box" */</span><span class="token selector">.box</span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 280px<span class="token punctuation">;</span>    <span class="token comment">/* 设置了一个2px的实线的白色边框 */</span>    <span class="token property">border</span><span class="token punctuation">:</span> 2px solid white<span class="token punctuation">;</span>    <span class="token comment">/* 固定定位，固定的定在浏览器的某一个地方 */</span>    <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>    <span class="token comment">/* calc是CSS属性当中计算的使用 */</span>    <span class="token property">left</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>50% - 100px<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>50% - 140px<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>代码说明</strong>：</p><ol><li><code>.box</code>相当于html标签中的<code>class=&quot;box&quot;</code></li><li><code>border</code>代表设置元素的边框,<code>solid</code>是实线</li><li><code>position:fixed</code>是固定定位，具体可能参照<a href="http://www.softeem.xin:8090/archives/%E5%AE%9A%E4%BD%8D#%E5%9B%BA%E5%AE%9A%E5%AE%9A%E4%BD%8D">http://www.softeem.xin:8090/archives/%E5%AE%9A%E4%BD%8D#%E5%9B%BA%E5%AE%9A%E5%AE%9A%E4%BD%8D</a></li><li><code>calc</code>代表CSS中的计算</li></ol></blockquote></li><li><p>开始设置里面的第1张图片</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token comment">/* .box相当于class="box" */</span>    <span class="token selector">.box</span> <span class="token punctuation">&#123;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 280px<span class="token punctuation">;</span>        <span class="token comment">/* 设置了一个2px的实线的白色边框 */</span>        <span class="token property">border</span><span class="token punctuation">:</span> 2px solid white<span class="token punctuation">;</span>        <span class="token comment">/* 固定定位，固定的定在浏览器的某一个地方 */</span>        <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>        <span class="token comment">/* calc是CSS属性当中计算的使用 */</span>        <span class="token property">left</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>50% - 100px<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token property">top</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>50% - 140px<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/* 把平面的盒子变成一个3D的盒子 */</span>        <span class="token property">transform-style</span><span class="token punctuation">:</span> preserve-3d<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.box>img</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/* 把图片的宽度与高度设置成与外边的盒子相同 */</span>        <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/* 选中class="box"下边的第1张图片 */</span>    <span class="token selector">.box>img:nth-child(1)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/* 我要让这一张图片沿着Y轴去旋转30度 ,并且在Z轴上面向前走300px*/</span>        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateY</span><span class="token punctuation">(</span>30deg<span class="token punctuation">)</span> <span class="token function">translateZ</span><span class="token punctuation">(</span>300px<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>img/2014.jpg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的代码里面，我们用到了CSS3当中的变换属性<code>transform</code>，这一块可以参考<a href="http://www.softeem.xin:8090/archives/%E5%8F%98%E6%8D%A2">http://www.softeem.xin:8090/archives/%E5%8F%98%E6%8D%A2</a></p><p>其中还用到了3D变换</p></li><li><p>按照第1张图片的思路，我们把剩下的11张图片也放进去</p><p>当我们按照我们的思维进行代码完成，在里面添加了剩下的图片代码</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>img/2014.jpg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>img/2015.jpg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>img/2016.jpg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>img/2017.jpg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>img/2018上.jpg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>img/w01.jpg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>img/w02.jpg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>img/w03.jpg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>img/w04.jpg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>img/w05.jpg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>img/w06.jpg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>img/w07.jpg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们发现一个问题，这个图片是从上向下在排列，并没有符合我们的要求，<strong>那么，我们怎么样让片都从于同一个位置开始呢？</strong></p><p>这个时候我们要让所有的图片都以<code>box</code>盒子的左上角为开始，这怎么办呢？</p><p>针对于这一种，在前端布局里面，有一个思路叫<font style="color:red;font-size:22px;text-decoration:wavy blue underline">子绝父相</font></p><p><a href="http://www.softeem.xin:8090/archives/%E5%AE%9A%E4%BD%8D#%E5%85%B3%E4%BA%8E%E5%AD%90%E7%BB%9D%E7%88%B6%E7%9B%B8">http://www.softeem.xin:8090/archives/%E5%AE%9A%E4%BD%8D#%E5%85%B3%E4%BA%8E%E5%AD%90%E7%BB%9D%E7%88%B6%E7%9B%B8</a></p><p><strong>子绝父相：</strong>当一个元素如果要以另一外元素为标准进行位置布局的时候，最好的办法就是在父级元素上面设置<code>相对定位</code>,而在所有的子级元素上面设置<code>绝对定位</code>，这样就实现了子绝父相的布局</p></li></ol><h3 id="CSS动画的应用"><a href="#CSS动画的应用" class="headerlink" title="CSS动画的应用"></a>CSS动画的应用</h3><p>在CSS里面，如果要使用动画，必须经历下面两个阶段</p><pre class="line-numbers language-mermaid" data-language="mermaid"><code class="language-mermaid">graph LRA[定义动画]--&gt;B[调用动画]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="动画的定义"><a href="#动画的定义" class="headerlink" title="动画的定义"></a>动画的定义</h4><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@keyframes</span> 动画名称</span> <span class="token punctuation">&#123;</span>    <span class="token selector">from</span> <span class="token punctuation">&#123;</span><span class="token comment">/*动画开始*/</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">to</span> <span class="token punctuation">&#123;</span><span class="token comment">/*动画结束*/</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面我们就使用语法定义了一个旋转360度的动画 </p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 在CSS里面，我们可以定义一个动画 */</span><span class="token atrule"><span class="token rule">@keyframes</span> zhuan</span> <span class="token punctuation">&#123;</span>    <span class="token selector">from</span> <span class="token punctuation">&#123;</span>        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateY</span><span class="token punctuation">(</span>0deg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">to</span> <span class="token punctuation">&#123;</span>        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateY</span><span class="token punctuation">(</span>360deg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="动画的调用"><a href="#动画的调用" class="headerlink" title="动画的调用"></a>动画的调用</h4><p>在调用动画的时候，要使用CSS的属性去调用，这个属性就是<code>animation</code></p><ol><li><code>animation-name</code>动画的名称</li><li><code>animation-duration</code>动画的时间 </li><li><code>animation-iteration-count</code>动画执行的次数</li><li><code>animation-timing-function</code>动画执行的时间函数（动画的效果）</li></ol><p>目前我们使用的就是上面的四个</p><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>标哥最帅<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">body</span> <span class="token punctuation">&#123;</span><span class="token property">background-color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.box</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 280px<span class="token punctuation">;</span><span class="token property">border</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span><span class="token property">left</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>50% - 100px<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">top</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>50% - 140px<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">transform-style</span><span class="token punctuation">:</span> preserve-3d<span class="token punctuation">;</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateX</span><span class="token punctuation">(</span>-20deg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* 调用动画 */</span><span class="token property">animation-name</span><span class="token punctuation">:</span> zhuan<span class="token punctuation">;</span><span class="token comment">/* 设置动画执行一次需要10s */</span><span class="token property">animation-duration</span><span class="token punctuation">:</span> 10s<span class="token punctuation">;</span><span class="token comment">/* 设置动画无限次循环 */</span><span class="token property">animation-iteration-count</span><span class="token punctuation">:</span> infinite<span class="token punctuation">;</span><span class="token comment">/* 设置动画匀速播放 */</span><span class="token property">animation-timing-function</span><span class="token punctuation">:</span> linear<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.box>img</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span><span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span><span class="token property">left</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span><span class="token property">top</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span><span class="token property">border-radius</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span><span class="token property">box-shadow</span><span class="token punctuation">:</span> 0px 0px 15px white<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.box>img:nth-child(1)</span> <span class="token punctuation">&#123;</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateY</span><span class="token punctuation">(</span>30deg<span class="token punctuation">)</span> <span class="token function">translateZ</span><span class="token punctuation">(</span>500px<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.box>img:nth-child(2)</span> <span class="token punctuation">&#123;</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateY</span><span class="token punctuation">(</span>60deg<span class="token punctuation">)</span> <span class="token function">translateZ</span><span class="token punctuation">(</span>500px<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.box>img:nth-child(3)</span> <span class="token punctuation">&#123;</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateY</span><span class="token punctuation">(</span>90deg<span class="token punctuation">)</span> <span class="token function">translateZ</span><span class="token punctuation">(</span>500px<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.box>img:nth-child(4)</span> <span class="token punctuation">&#123;</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateY</span><span class="token punctuation">(</span>120deg<span class="token punctuation">)</span> <span class="token function">translateZ</span><span class="token punctuation">(</span>500px<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.box>img:nth-child(5)</span> <span class="token punctuation">&#123;</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateY</span><span class="token punctuation">(</span>150deg<span class="token punctuation">)</span> <span class="token function">translateZ</span><span class="token punctuation">(</span>500px<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.box>img:nth-child(6)</span> <span class="token punctuation">&#123;</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateY</span><span class="token punctuation">(</span>180deg<span class="token punctuation">)</span> <span class="token function">translateZ</span><span class="token punctuation">(</span>500px<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.box>img:nth-child(7)</span> <span class="token punctuation">&#123;</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateY</span><span class="token punctuation">(</span>210deg<span class="token punctuation">)</span> <span class="token function">translateZ</span><span class="token punctuation">(</span>500px<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.box>img:nth-child(8)</span> <span class="token punctuation">&#123;</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateY</span><span class="token punctuation">(</span>240deg<span class="token punctuation">)</span> <span class="token function">translateZ</span><span class="token punctuation">(</span>500px<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.box>img:nth-child(9)</span> <span class="token punctuation">&#123;</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateY</span><span class="token punctuation">(</span>270deg<span class="token punctuation">)</span> <span class="token function">translateZ</span><span class="token punctuation">(</span>500px<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.box>img:nth-child(10)</span> <span class="token punctuation">&#123;</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateY</span><span class="token punctuation">(</span>300deg<span class="token punctuation">)</span> <span class="token function">translateZ</span><span class="token punctuation">(</span>500px<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.box>img:nth-child(11)</span> <span class="token punctuation">&#123;</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateY</span><span class="token punctuation">(</span>330deg<span class="token punctuation">)</span> <span class="token function">translateZ</span><span class="token punctuation">(</span>500px<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.box>img:nth-child(12)</span> <span class="token punctuation">&#123;</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateY</span><span class="token punctuation">(</span>360deg<span class="token punctuation">)</span> <span class="token function">translateZ</span><span class="token punctuation">(</span>500px<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 在CSS里面，我们可以定义一个动画 */</span><span class="token atrule"><span class="token rule">@keyframes</span> zhuan</span> <span class="token punctuation">&#123;</span><span class="token selector">from</span> <span class="token punctuation">&#123;</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateX</span><span class="token punctuation">(</span>-20deg<span class="token punctuation">)</span> <span class="token function">rotateY</span><span class="token punctuation">(</span>0deg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">to</span> <span class="token punctuation">&#123;</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateX</span><span class="token punctuation">(</span>-20deg<span class="token punctuation">)</span> <span class="token function">rotateY</span><span class="token punctuation">(</span>360deg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>img/2014.jpg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>img/2015.jpg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>img/2016.jpg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>img/2017.jpg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>img/2018上.jpg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>img/w01.jpg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>img/w02.jpg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>img/w03.jpg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>img/w04.jpg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>img/w05.jpg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>img/w06.jpg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>img/w07.jpg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="女朋友相册完整版代码如下："><a href="#女朋友相册完整版代码如下：" class="headerlink" title="女朋友相册完整版代码如下："></a>女朋友相册完整版代码如下：</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>女朋友相册<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>css/index.css<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>audio</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>你的酒馆对我打了烊.mp3<span class="token punctuation">"</span></span> <span class="token attr-name">autoplay</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>autoplay<span class="token punctuation">"</span></span> <span class="token attr-name">controls</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>controls<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>audio</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cube<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>out_front<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>img/1.jpg<span class="token punctuation">"</span></span>  <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pic<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>out_back<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>img/2.jpg<span class="token punctuation">"</span></span>  <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pic<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>out_left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>img/3.jpg<span class="token punctuation">"</span></span>  <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pic<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>out_right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>img/4.jpg<span class="token punctuation">"</span></span>  <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pic<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>out_top<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>img/5.jpg<span class="token punctuation">"</span></span>  <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pic<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>out_bottom<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>img/6.jpg<span class="token punctuation">"</span></span>  <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pic<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>in_front<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>img/7.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>in_pic<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>in_back<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>img/8.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>in_pic<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>in_left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>img/9.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>in_pic<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>in_right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>img/10.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>in_pic<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>in_top<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>img/11.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>in_pic<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>in_bottom<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>img/12.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>in_pic<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="css代码："><a href="#css代码：" class="headerlink" title="css代码："></a>css代码：</h2><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">html</span><span class="token punctuation">&#123;</span><span class="token property">background</span><span class="token punctuation">:</span> #000<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*最外层容器样式*/</span><span class="token selector">.wrap</span><span class="token punctuation">&#123;</span><span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span><span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span><span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span><span class="token property">margin</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span><span class="token comment">/*改变左右上下,图片方块移动*/</span><span class="token punctuation">&#125;</span><span class="token comment">/*包裹所有容器样式*/</span><span class="token selector">.cube</span><span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span><span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span><span class="token property">transform-style</span><span class="token punctuation">:</span> preserve-3d<span class="token punctuation">;</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateX</span><span class="token punctuation">(</span>-30deg<span class="token punctuation">)</span> <span class="token function">rotateY</span><span class="token punctuation">(</span>-80deg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">-webkit-animation</span><span class="token punctuation">:</span> rotate 20s infinite<span class="token punctuation">;</span><span class="token comment">/*匀速*/</span><span class="token property">animation-timing-function</span><span class="token punctuation">:</span> linear<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token atrule"><span class="token rule">@-webkit-keyframes</span> rotate</span><span class="token punctuation">&#123;</span><span class="token selector">from</span><span class="token punctuation">&#123;</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateX</span><span class="token punctuation">(</span>0deg<span class="token punctuation">)</span> <span class="token function">rotateY</span><span class="token punctuation">(</span>0deg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">to</span><span class="token punctuation">&#123;</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateX</span><span class="token punctuation">(</span>360deg<span class="token punctuation">)</span> <span class="token function">rotateY</span><span class="token punctuation">(</span>360deg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token selector">.cube div</span><span class="token punctuation">&#123;</span><span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span><span class="token property">opacity</span><span class="token punctuation">:</span> 0.8<span class="token punctuation">;</span><span class="token property">transition</span><span class="token punctuation">:</span> all .4s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*定义所有图片样式*/</span><span class="token selector">.pic</span><span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.cube .out_front</span><span class="token punctuation">&#123;</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateY</span><span class="token punctuation">(</span>0deg<span class="token punctuation">)</span> <span class="token function">translateZ</span><span class="token punctuation">(</span>100px<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.cube .out_back</span><span class="token punctuation">&#123;</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateZ</span><span class="token punctuation">(</span>-100px<span class="token punctuation">)</span> <span class="token function">rotateY</span><span class="token punctuation">(</span>180deg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.cube .out_left</span><span class="token punctuation">&#123;</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateY</span><span class="token punctuation">(</span>90deg<span class="token punctuation">)</span> <span class="token function">translateZ</span><span class="token punctuation">(</span>100px<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.cube .out_right</span><span class="token punctuation">&#123;</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateY</span><span class="token punctuation">(</span>-90deg<span class="token punctuation">)</span> <span class="token function">translateZ</span><span class="token punctuation">(</span>100px<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.cube .out_top</span><span class="token punctuation">&#123;</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateX</span><span class="token punctuation">(</span>90deg<span class="token punctuation">)</span> <span class="token function">translateZ</span><span class="token punctuation">(</span>100px<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.cube .out_bottom</span><span class="token punctuation">&#123;</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateX</span><span class="token punctuation">(</span>-90deg<span class="token punctuation">)</span> <span class="token function">translateZ</span><span class="token punctuation">(</span>100px<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*定义小正方体样式*/</span><span class="token selector">.cube span</span><span class="token punctuation">&#123;</span><span class="token property">display</span><span class="token punctuation">:</span> bloack<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span><span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span><span class="token property">top</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span><span class="token property">left</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.cube .in_pic</span><span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.cube .in_front</span><span class="token punctuation">&#123;</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateY</span><span class="token punctuation">(</span>0deg<span class="token punctuation">)</span> <span class="token function">translateZ</span><span class="token punctuation">(</span>50px<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.cube .in_back</span><span class="token punctuation">&#123;</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateZ</span><span class="token punctuation">(</span>-50px<span class="token punctuation">)</span> <span class="token function">rotateY</span><span class="token punctuation">(</span>180deg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.cube .in_left</span><span class="token punctuation">&#123;</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateY</span><span class="token punctuation">(</span>90deg<span class="token punctuation">)</span> <span class="token function">translateZ</span><span class="token punctuation">(</span>50px<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.cube .in_right</span><span class="token punctuation">&#123;</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateY</span><span class="token punctuation">(</span>-90deg<span class="token punctuation">)</span> <span class="token function">translateZ</span><span class="token punctuation">(</span>50px<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.cube .in_top</span><span class="token punctuation">&#123;</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateX</span><span class="token punctuation">(</span>90deg<span class="token punctuation">)</span> <span class="token function">translateZ</span><span class="token punctuation">(</span>50px<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.cube .in_bottom</span><span class="token punctuation">&#123;</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateX</span><span class="token punctuation">(</span>-90deg<span class="token punctuation">)</span> <span class="token function">translateZ</span><span class="token punctuation">(</span>50px<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*鼠标移入后样式*/</span><span class="token selector">.cube:hover .out_front</span><span class="token punctuation">&#123;</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateY</span><span class="token punctuation">(</span>0deg<span class="token punctuation">)</span> <span class="token function">translateZ</span><span class="token punctuation">(</span>200px<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.cube:hover .out_back</span><span class="token punctuation">&#123;</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateZ</span><span class="token punctuation">(</span>-200px<span class="token punctuation">)</span> <span class="token function">rotateY</span><span class="token punctuation">(</span>180deg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.cube:hover .out_left</span><span class="token punctuation">&#123;</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateY</span><span class="token punctuation">(</span>90deg<span class="token punctuation">)</span> <span class="token function">translateZ</span><span class="token punctuation">(</span>200px<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.cube:hover .out_right</span><span class="token punctuation">&#123;</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateY</span><span class="token punctuation">(</span>-90deg<span class="token punctuation">)</span> <span class="token function">translateZ</span><span class="token punctuation">(</span>200px<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.cube:hover .out_top</span><span class="token punctuation">&#123;</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateX</span><span class="token punctuation">(</span>90deg<span class="token punctuation">)</span> <span class="token function">translateZ</span><span class="token punctuation">(</span>200px<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.cube:hover .out_bottom</span><span class="token punctuation">&#123;</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateX</span><span class="token punctuation">(</span>-90deg<span class="token punctuation">)</span> <span class="token function">translateZ</span><span class="token punctuation">(</span>200px<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最终效果如下(我只是截了一张静态图，实际为动态3D效果)：</p><p><img src="01.png"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本次项目当中用到了技术点</p><ol><li><code>transform</code>变换</li><li><code>trasnform-style</code>:变换的方式，里面有3D变换</li><li><code>rotate</code>旋转</li><li><code>translate</code>位移</li><li><code>@keyframe</code>定义动画</li><li><code>animation</code>使用动画 </li><li>“子绝父相”的使用</li></ol><p>​     教程来源：软帝标哥</p>]]></content>
      
      
      <categories>
          
          <category> css动画 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css动画案例-吃豆人和火星圆环</title>
      <link href="year/03/30/m/"/>
      <url>year/03/30/m/</url>
      
        <content type="html"><![CDATA[<h3 id="吃豆人和火星圆环案例"><a href="#吃豆人和火星圆环案例" class="headerlink" title="吃豆人和火星圆环案例"></a>吃豆人和火星圆环案例</h3><p><img src="chi.gif"></p><h4 id="1-创建项目"><a href="#1-创建项目" class="headerlink" title="1. 创建项目"></a>1. 创建项目</h4><p>先在桌面创建一个文件夹，然后将这个文件夹拖动到开发具<code>HbuilderX</code>里面</p><h4 id="2-创建html网页"><a href="#2-创建html网页" class="headerlink" title="2.创建html网页"></a>2.创建html网页</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面是最基本的网页结构，你们可以把这个网页结构看成是一个人</p><p><code>&lt;head&gt;&lt;/head&gt;</code>可以看成是一个人的头部</p><p><code>&lt;body&gt;&lt;/body&gt;</code>可以看成是一个人身体</p><p><code>&lt;title&gt;&lt;/title&gt;</code>浏览器的标题，也相当于人的姓名</p><h4 id="3-先完成头部的部分"><a href="#3-先完成头部的部分" class="headerlink" title="3.先完成头部的部分"></a>3.先完成头部的部分</h4><p>根据我们的分析，我们是希望得到一半圆就可以了</p><p><img src="image-20210328103310045.png"></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token comment">/* class在样式里面有一个特殊的符号叫. */</span>    <span class="token selector">.header_up</span><span class="token punctuation">&#123;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 400px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>        <span class="token property">border-top-left-radius</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>        <span class="token property">border-top-right-radius</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>header_up<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过上面的代码，我们已经将吃豆人的上半个脑袋画出来了，接下来，我们先不画下半个脑袋 ，我们先脑袋动起来</p><p>在之前的学习里面，我们已经形成了X,Y,Z轴的概念，并且也熟悉了变换的相关知识点，如果没有印象的学生可能参考下面的基础笔记 </p><p><a href="http://www.softeem.xin:8090/archives/%E5%8F%98%E6%8D%A2">http://www.softeem.xin:8090/archives/%E5%8F%98%E6%8D%A2</a></p><p>现在我们要使用动画来让上边的脑袋动起来，接下来所使用到的2个点就是<strong>动画的定义</strong>与<strong>动画的使用</strong></p><p><a href="http://www.softeem.xin:8090/archives/CSS%E5%8A%A8%E7%94%BB">http://www.softeem.xin:8090/archives/CSS%E5%8A%A8%E7%94%BB</a></p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* class在样式里面有一个特殊的符号叫. */</span><span class="token selector">.header_up</span><span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 400px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>    <span class="token property">border-top-left-radius</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>    <span class="token property">border-top-right-radius</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>    <span class="token comment">/* 变换 */</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateZ</span><span class="token punctuation">(</span>0deg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/* 动画的名称 */</span>    <span class="token property">animation-name</span><span class="token punctuation">:</span> ani_header_up<span class="token punctuation">;</span>    <span class="token comment">/* 动画的时间 */</span>    <span class="token property">animation-duration</span><span class="token punctuation">:</span> 2s<span class="token punctuation">;</span>    <span class="token comment">/* 动画重复的次数,infinite代表无穷次 */</span>    <span class="token property">animation-iteration-count</span><span class="token punctuation">:</span> infinite<span class="token punctuation">;</span>    <span class="token comment">/* 动画匀速执行 */</span>    <span class="token property">animation-timing-function</span><span class="token punctuation">:</span> linear<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 定义一个动画 */</span><span class="token atrule"><span class="token rule">@keyframes</span> ani_header_up</span><span class="token punctuation">&#123;</span>    <span class="token selector">0%</span><span class="token punctuation">&#123;</span>        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateZ</span><span class="token punctuation">(</span>0deg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">50%</span><span class="token punctuation">&#123;</span>        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateZ</span><span class="token punctuation">(</span>-30deg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">100%</span><span class="token punctuation">&#123;</span>        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateZ</span><span class="token punctuation">(</span>0deg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>完成眼晴部分</strong></p><p>首先我们可以根据之前所学习的”子绝父相”去完成，关于子绝父相，可以参考下面的笔记 </p><p><a href="http://www.softeem.xin:8090/archives/%E5%AE%9A%E4%BD%8D">http://www.softeem.xin:8090/archives/%E5%AE%9A%E4%BD%8D</a></p><p><strong>完成豆子的部分</strong></p><p>为了更好的去理解我们的代码，我们在当前的文件夹项目下面新建一个html的文件，命名为02.html</p><h3 id="土星圆环案例"><a href="#土星圆环案例" class="headerlink" title="土星圆环案例"></a>土星圆环案例</h3><p><img src="tuxinanli.gif" alt="土星圆环案例"></p><h3 id="1-创建项目-1"><a href="#1-创建项目-1" class="headerlink" title="1. 创建项目"></a>1. 创建项目</h3><ul><li><p>先在桌面上面创建一个文件夹，命名为<code>huan</code>，然后将这个文件夹拖入到<code>HbuilderX</code>这个开发工具里面</p></li><li><p>在当前项目的夹文件夹下面创建一个<code>index.html</code>的文件，并在浏览器中打开</p></li><li><p>开始编码</p></li></ul><h3 id="2-项目代码"><a href="#2-项目代码" class="headerlink" title="2.项目代码"></a>2.项目代码</h3><ul><li><p>先把网页的背景设置为黑色</p></li><li><p>设置一个盒子，并设置圆锥渐变，具体的基础知识可以参考下面的笔记</p><p><a href="http://www.softeem.xin:8090/archives/%E6%B8%90%E5%8F%98#%E5%9C%86%E9%94%A5%E6%B8%90%E5%8F%98">http://www.softeem.xin:8090/archives/%E6%B8%90%E5%8F%98#%E5%9C%86%E9%94%A5%E6%B8%90%E5%8F%98</a></p></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>标哥哥----土星圆环<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">body</span> <span class="token punctuation">&#123;</span><span class="token property">background-color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.box</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 400px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 400px<span class="token punctuation">;</span><span class="token comment">/* 圆锥渐变 */</span><span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">conic-gradient</span><span class="token punctuation">(</span>red<span class="token punctuation">,</span> blue<span class="token punctuation">,</span> green<span class="token punctuation">,</span> deeppink<span class="token punctuation">,</span> gold<span class="token punctuation">,</span> red<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">border-radius</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span><span class="token comment">/* 变换：旋转X轴70度 旋转Y轴15度 */</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateX</span><span class="token punctuation">(</span>70deg<span class="token punctuation">)</span> <span class="token function">rotateY</span><span class="token punctuation">(</span>13deg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* 使用定义好的动画效果 */</span><span class="token property">animation</span><span class="token punctuation">:</span> ani_box 10s infinite linear<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.small-box</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 400px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 400px<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span><span class="token comment">/* scale是缩放 */</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span>0.68<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">border-radius</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.circle</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span><span class="token comment">/* 绝对定位 */</span><span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span><span class="token comment">/* 左负右正，上负下正 */</span><span class="token property">left</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>50% - 100px<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">top</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>50% - 100px<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">border-radius</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span><span class="token comment">/* 设置盒子的阴影 */</span><span class="token property">box-shadow</span><span class="token punctuation">:</span> 0px 0px 30px 10px deeppink inset<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.main</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 400px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 400px<span class="token punctuation">;</span><span class="token comment">/* 相对定位 */</span><span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 定义一个动画 */</span><span class="token atrule"><span class="token rule">@keyframes</span> ani_box</span><span class="token punctuation">&#123;</span><span class="token selector">0%</span><span class="token punctuation">&#123;</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateX</span><span class="token punctuation">(</span>70deg<span class="token punctuation">)</span> <span class="token function">rotateY</span><span class="token punctuation">(</span>13deg<span class="token punctuation">)</span> <span class="token function">rotateZ</span><span class="token punctuation">(</span>0deg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">100%</span><span class="token punctuation">&#123;</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateX</span><span class="token punctuation">(</span>70deg<span class="token punctuation">)</span> <span class="token function">rotateY</span><span class="token punctuation">(</span>13deg<span class="token punctuation">)</span> <span class="token function">rotateZ</span><span class="token punctuation">(</span>360deg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>main<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 环 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>small-box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 球 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>circle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li><p><code>transform</code>变换的属性</p><ul><li><code>rotate</code>旋转</li><li><code>scale</code>缩放</li></ul></li><li><p><code>border-radius</code>设置一个圆角，它有四个角</p></li><li><p>“子绝父相”：当一个元素以另一个元素为标准进行位置设置的时候，最好使用子绝父相</p></li><li><p>元素类型的转换</p><p><strong>块级元素</strong>：默认独自占有用一行</p><p><strong>行内块级元素</strong>：可以排在同一行</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">diaplay</span><span class="token punctuation">:</span>inline-block<span class="token punctuation">;</span> <span class="token comment">/*将元素转换为行内块级元素*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><code>overflow:hidden</code>溢出隐藏</p></li><li><p><code>@keyframes</code>用于定义动画，<code>animation</code>用于使用动画</p></li><li><p><code>conic-gradient</code>圆锥渐变的使用</p></li><li><p><code>HbuilderX</code>开发工具的使用及项目的创建</p><p>教程来源：软帝杨标老师</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> css动画 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue项目环境搭建</title>
      <link href="year/03/30/l/"/>
      <url>year/03/30/l/</url>
      
        <content type="html"><![CDATA[<h1 id="项目环境安装"><a href="#项目环境安装" class="headerlink" title="项目环境安装"></a>项目环境安装</h1><h4 id="一、技术选型"><a href="#一、技术选型" class="headerlink" title="一、技术选型"></a>一、技术选型</h4><p>Vue全家桶+Node.js/Mysql或者PHP/Mysql</p><h4 id="二、工具Node-js安装"><a href="#二、工具Node-js安装" class="headerlink" title="二、工具Node.js安装"></a>二、工具Node.js安装</h4><p>（1）：打开官方网站：<a href="https://nodejs.org/en/">https://nodejs.org/en/</a></p><p><img src="node%E4%B8%8B%E8%BD%BD.png"></p><p>（2）：选择对应的node版本进行下载</p><p><img src="%E9%80%89%E6%8B%A9node%E7%89%88%E6%9C%AC.png"></p><p>（3）：安装node.js后，进行版本检查</p><p><img src="%E6%A3%80%E6%9F%A5node%E7%89%88%E6%9C%AC.png"></p><h4 id="三、使用VSCode开发工具新建Vue项目"><a href="#三、使用VSCode开发工具新建Vue项目" class="headerlink" title="三、使用VSCode开发工具新建Vue项目"></a>三、使用VSCode开发工具新建Vue项目</h4><p>（1）：新建项目文件夹，名字为:MyShop</p><p><img src="%E6%96%B0%E5%BB%BA%E9%A1%B9%E7%9B%AE.png"></p><p>（2）：选中文件夹，反键使用VsCode打开项目</p><p>（3）：使用ctrl+~打开终端命令</p><p><img src="%E6%89%93%E5%BC%80%E7%BB%88%E7%AB%AF.png"></p><p>（4）：使用淘宝镜像执行cnpm命令</p><p>​     npm install -g cnpm –registry=<a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a></p><p>​     <span style="color:red">注：因为npm是国外的服务，用起来比较卡。需要换成淘宝的cnpm</span></p><p>（5）：全局安装vue脚手架   cnpm install -g vue-cli</p><p>​     <span style="color:red">会提示一下报错：</span></p><p><img src="%E8%BF%90%E8%A1%8C%E8%84%9A%E6%89%8B%E6%9E%B6%E6%8A%A5%E9%94%99.PNG"></p><p>​     <span style="color:red">解决办法如下：</span></p><ol><li><p>管理员身份打开powerShell </p><p><img src="WindowsPowerShell%E6%8A%A5%E9%94%99.png"></p></li><li><p>输入set-ExecutionPolicy RemoteSigned ，回车</p></li><li><p>输入Y，回车</p><p><img src="%E8%A7%A3%E5%86%B3powershell.PNG"></p><p>4.再次安装vue脚手架</p></li></ol><p>​       cnpm install -g vue-cli</p><p><img src="%E5%AE%89%E8%A3%85%E8%84%9A%E6%89%8B%E6%9E%B6.png"></p><p>（6）：全局安装webpack</p><p>​     Cnpm install -g webpack</p><p><img src="%E5%AE%89%E8%A3%85webpack.png"></p><p>​    <span style="color:red">注意：第一次安装时，步骤不能乱，一定不能乱！</span></p><p>（7）：新建项目</p><p>​    vue init webpack</p><p>   <span style="color:red">注意：项目名字一定要小写，大写会报错</span></p><p>（8）：安装图解</p><p><img src="%E5%AE%89%E8%A3%85%E5%9B%BE%E8%A7%A3.png"></p><p>  <span style="color:red">注意：ESlint(严选模式)一定要选NO，否则心态爆炸！</span></p><p>（9）:执行npm命令</p><p>​    cnpm install</p><p>   <span style="color:red">注意：必须执行此命令，要不然一直会报错</span></p><p>（10）：运行项目</p><p>​    npm run serve</p><p><img src="%E8%BF%90%E8%A1%8C%E9%A1%B9%E7%9B%AE.png"></p><p><span style="color:red">参考文档：<a href="https://www.jianshu.com/p/02b12c600c7b">https://www.jianshu.com/p/02b12c600c7b</a></span></p><p><a href="https://www.cnblogs.com/zyskr/p/10609288.html">https://www.cnblogs.com/zyskr/p/10609288.html</a></p><h4 id="四、安装饿了么UI前端框架"><a href="#四、安装饿了么UI前端框架" class="headerlink" title="四、安装饿了么UI前端框架"></a>四、安装饿了么UI前端框架</h4><p>cnpm i element-ui -S</p><p><img src="%E5%AE%89%E8%A3%85%E9%A5%BF%E4%BA%86UI.png"></p><h4 id="五、安装less和sass预处理"><a href="#五、安装less和sass预处理" class="headerlink" title="五、安装less和sass预处理"></a>五、安装less和sass预处理</h4><p>（1）：cnpm install <a href="mailto:&#x6c;&#101;&#115;&#x73;&#x40;&#51;&#x2e;&#x39;&#x2e;&#48;">&#x6c;&#101;&#115;&#x73;&#x40;&#51;&#x2e;&#x39;&#x2e;&#48;</a> -s  </p><p>（2）：cnpm install <a href="mailto:&#108;&#101;&#115;&#115;&#x2d;&#x6c;&#111;&#97;&#100;&#101;&#x72;&#64;&#x35;&#x2e;&#48;&#46;&#48;">&#108;&#101;&#115;&#115;&#x2d;&#x6c;&#111;&#97;&#100;&#101;&#x72;&#64;&#x35;&#x2e;&#48;&#46;&#48;</a> -s</p><p>  <span style="color:red">注意：一定要写版本号，否则less自动安装最新版本，会和vue-cli不兼容一直报错。</span></p><p>  <span style="color:red">解决报错的话使用cnpm install重新安装一遍！</span></p><p>六、安装axios</p><p>（1）：cnpm install axios</p><p>（2）：cnpm install –save axios vue-axios</p><p> <span style="color:red">注意：不安装axios的话，不能使用post/get等提交方式，会报错！</span></p><p> <span style="color:red">文字高亮：Vetur</span></p><h1 id="登录页面功能"><a href="#登录页面功能" class="headerlink" title="登录页面功能"></a>登录页面功能</h1><h4 id="一、新建登录页面"><a href="#一、新建登录页面" class="headerlink" title="一、新建登录页面"></a>一、新建登录页面</h4><p><img src="%E6%96%B0%E5%BB%BA%E7%99%BB%E5%BD%95.png"></p><h4 id="二、页面样式以及布局"><a href="#二、页面样式以及布局" class="headerlink" title="二、页面样式以及布局"></a>二、页面样式以及布局</h4><pre class="line-numbers language-vue.js" data-language="vue.js"><code class="language-vue.js">&lt;style scoped lang&#x3D;&quot;less&quot;&gt;.login-box &#123;  border: 1px solid #dcdfe6;  width: 350px;  margin: 180px auto;  padding: 35px 35px 15px 35px;  border-radius: 5px;  -webkit-border-radius: 5px;  -moz-border-radius: 5px;  box-shadow: 0 0 25px palegreen;&#125;.login-title &#123;  text-align: center;  margin: 0 auto 40px auto;  color: #66cd00;  font-size: 30px;  font-weight: bold;&#125;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（1）：初始化表单</p><pre class="line-numbers language-vue.js" data-language="vue.js"><code class="language-vue.js">&lt;template&gt;&lt;div class&#x3D;&quot;login-box&quot;&gt;&lt;!-- 声明表单 --&gt; &lt;el-form&gt;    &lt;span class&#x3D;&quot;login-title&quot;&gt;欢迎登录&lt;&#x2F;span&gt;    &lt;!-- 表单项 --&gt;     &lt;el-form-item label&#x3D;&quot;用户名&quot; prop&#x3D;&quot;U_LoginName&quot;&gt;        &lt;el-col :span&#x3D;&quot;22&quot;&gt;           &lt;!-- 按钮 --&gt;           &lt;!-- v-model：双向绑定 --&gt;          &lt;el-input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;LoginForm.username&quot;&gt;&lt;&#x2F;el-input&gt;        &lt;&#x2F;el-col&gt;      &lt;&#x2F;el-form-item&gt;      &lt;el-form-item label&#x3D;&quot;密码&quot; prop&#x3D;&quot;U_Password&quot;&gt;        &lt;el-col :span&#x3D;&quot;22&quot;&gt;          &lt;el-input type&#x3D;&quot;password&quot; v-model&#x3D;&quot;LoginForm.password&quot;&gt;&lt;&#x2F;el-input&gt;        &lt;&#x2F;el-col&gt;      &lt;&#x2F;el-form-item&gt;      &lt;el-form-item&gt;          &lt;!-- 登录和注册按钮 --&gt;          &lt;!-- @click:按钮指令，绑定事件 --&gt;        &lt;el-button type&#x3D;&quot;primary&quot; @click&#x3D;&quot;loginSubmit(&#39;LoginForm&#39;)&quot;&gt;登录&lt;&#x2F;el-button&gt;        &lt;el-button type&#x3D;&quot;primary&quot;&gt;注册&lt;&#x2F;el-button&gt;      &lt;&#x2F;el-form-item&gt; &lt;&#x2F;el-form&gt; &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）：Vue双向绑定和ajax提交</p><pre class="line-numbers language-vue.js" data-language="vue.js"><code class="language-vue.js">&lt;script&gt;&#x2F;&#x2F; export default:导出模块，可以给其他组件使用&#x2F;&#x2F; name:组件名字，其他直接调用此名字就可以使用export default &#123;  name:&quot;login&quot;,  data()  &#123;    return &#123;      LoginForm:&#123;        username:&quot;&quot;,        password:&quot;&quot;      &#125;    &#125;  &#125;,  &#x2F;&#x2F; vue之中的函数，一般是执行点击事件  methods:&#123;    &#x2F;&#x2F; loginSubmit：登录事件    loginSubmit()    &#123;       this.$http.post(&quot;http:&#x2F;&#x2F;timemeetyou.com:8889&#x2F;api&#x2F;private&#x2F;v1&#x2F;login&quot;,this.LoginForm).then((data)&#x3D;&gt;&#123;                if(data.data.meta.status&#x3D;&#x3D;&quot;200&quot; &amp;&amp; data.data.meta.msg&#x3D;&#x3D;&quot;登录成功&quot;)                &#123;                     window.sessionStorage.setItem(&#39;token&#39;, data.data.data.token)                     this.$router.push(&#39;&#x2F;menu&#39;)                &#125;                else                &#123;                  alert(&quot;用户名或密码错误&quot;)                &#125;        &#125;)           &#125;  &#125;&#125;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><span style="color:blue">（3）：修改路由</span></p><p><span style="color:red">①：在route/index.js路由文件中添加页面路径地址</span></p><pre class="line-numbers language-vue.js" data-language="vue.js"><code class="language-vue.js">import Login from &#39;..&#x2F;components&#x2F;Login.vue&#39;Vue.use(Router)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><span style="color:red">②：在路由中设置主页面</span></p><pre class="line-numbers language-vue.js" data-language="vue.js"><code class="language-vue.js">export default new Router(&#123;  routes: [    &#123;      path: &#39;&#x2F;&#39;,      name: &#39;Login&#39;,      component: Login    &#125;  ]&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><span style="color:red">注意：component: Login中的Login，要和import中的一致</span></p><p><span style="color:blue">（4）：在main.js文件中添加饿了么UI引用</span></p><pre class="line-numbers language-vue.js" data-language="vue.js"><code class="language-vue.js">import ElementUI from &#39;element-ui&#39;;import &#39;element-ui&#x2F;lib&#x2F;theme-chalk&#x2F;index.css&#39;;&#x2F;&#x2F;把饿了么UI定义成全局组件，在任何地方都能使用Vue.use(ElementUI);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="%E7%99%BB%E5%BD%95%E9%A1%B5%E9%9D%A2.png"></p><h4 id="三、跳转主页面"><a href="#三、跳转主页面" class="headerlink" title="三、跳转主页面"></a>三、跳转主页面</h4><p>（1）：在Login.vue组件设置跳转</p><p>this.$router.push(‘/Main’)</p><p>（2）：新建main.vue主页面</p><p><img src="%E6%96%B0%E5%BB%BA%E4%B8%BB%E9%A1%B5%E9%9D%A2.png"></p><p>（3）：点击登录按钮，进行跳转</p><p><span style="color:red">提示以下错误：</span></p><pre class="line-numbers language-vue.js" data-language="vue.js"><code class="language-vue.js">TypeError: Cannot read property &#39;post&#39; of undefined<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><span style="color:blue">需要在main.js中添加axios的引用</span></p><pre class="line-numbers language-vue.js" data-language="vue.js"><code class="language-vue.js">&#x2F;&#x2F;引入axios&#x2F;&#x2F;类似于ajaximport axios from &quot;axios&quot;Vue.prototype.$http &#x3D; axiosaxios.interceptors.request.use((config) &#x3D;&gt; &#123;  config.headers.Authorization &#x3D; window.sessionStorage.getItem(&#39;token&#39;)  return config;&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在src的components的目录下面新建menu.vue和main.vue</p><p>在router的index.js中导入跳转的主页面</p><p><img src="01.png"></p><p>并在下方添加其路经</p><p><img src="02.png"></p><p>在menu.vue文件中添加代码</p><pre class="line-numbers language-vue.js" data-language="vue.js"><code class="language-vue.js">&lt;template&gt;&lt;div id&#x3D;&quot;app&quot;&gt;  &lt;!-- 声明一个容器 --&gt;    &lt;el-container class&#x3D;&quot;home-container&quot;&gt;      &lt;el-header&gt;       电商管理后台      &lt;img src&#x3D;&quot;..&#x2F;assets&#x2F;Main-logo.png&quot;&#x2F;&gt;      &lt;el-button type&#x3D;&quot;info&quot;&gt;退出&lt;&#x2F;el-button&gt;      &lt;&#x2F;el-header&gt;    &lt;&#x2F;el-container&gt;   &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;style lang&#x3D;&quot;less&quot; scoped&gt;  html,  body,  #app&#123;    height: 100%;    margin: 0px;    padding: 0px;    min-width: 1080px;  &#125;  .home-container&#123;    height: 100%;  &#125;  .el-header&#123;    background-color:#9cc3dd;    text-align: center;    line-height: 60px;    position: relative;  &#125;  img&#123;    position: absolute;    left: 20px;    height: 100%;  &#125;  .el-button&#123;    position: absolute;    right: 20px;    top: 10px;  &#125;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行项目npm run dev   </p><p>成功后会出现运行地址，把它复制到浏览器中运行此时会出现以下界面</p><p><img src="03.png"></p><p>我们输入用户名：admin  密码：123456  点击登录就会跳转一个新页面如下：</p><p><img src="04.png"></p><p>此时我们就完成了从登录到跳转的页面。</p><p>更多知识关注微信公众号“ 51 学代码 ”</p><p><img src="1.png"></p>]]></content>
      
      
      <categories>
          
          <category> vue项目环境搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>豆瓣电影微信小程序开发教程</title>
      <link href="year/03/09/k_dou_ban_dian_ying_wei_xin_xiao_cheng_xu/"/>
      <url>year/03/09/k_dou_ban_dian_ying_wei_xin_xiao_cheng_xu/</url>
      
        <content type="html"><![CDATA[<h1 id="豆瓣电影微信小程序开发教程"><a href="#豆瓣电影微信小程序开发教程" class="headerlink" title="豆瓣电影微信小程序开发教程"></a>豆瓣电影微信小程序开发教程</h1><h5 id="一、程序安装"><a href="#一、程序安装" class="headerlink" title="一、程序安装"></a>一、程序安装</h5><p>1)：百度搜素“微信公众平台”，进行开发账号注册，如下图所示：</p><p><img src="%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%89%E8%A3%85.png"></p><p>2)：注册完毕后，依次选择“开发”-&gt;“工具”-&gt;“下载”,根据机器操作系统类型，选择相应的开发工具软件，如下图所示：</p><p><img src="%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%89%E8%A3%851.png"></p><p>3)：右键以管理员身份运行下载的工具安装文件，然后点击“下一步”，如下图所示：</p><p><img src="%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%89%E8%A3%852.png"></p><p>4)：直至安装结束，点击“完成”，如下图所示：</p><p><img src="%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%89%E8%A3%853.png"></p><h5 id="二、设置页头页尾导航栏"><a href="#二、设置页头页尾导航栏" class="headerlink" title="二、设置页头页尾导航栏"></a>二、设置页头页尾导航栏</h5><h6 id="1-：找到app-json文件"><a href="#1-：找到app-json文件" class="headerlink" title="1)：找到app.json文件"></a>1)：找到app.json文件</h6><p><img src="%E8%AE%BE%E7%BD%AE%E9%A1%B5%E5%A4%B4.png"></p><h6 id="2）：设置页头中的背景颜色-名字-字体颜色"><a href="#2）：设置页头中的背景颜色-名字-字体颜色" class="headerlink" title="2）：设置页头中的背景颜色/名字/字体颜色"></a>2）：设置页头中的背景颜色/名字/字体颜色</h6><p><img src="%E8%AE%BE%E7%BD%AE%E9%A1%B5%E5%A4%B41.png"></p><h6 id="3）：设置页尾导航"><a href="#3）：设置页尾导航" class="headerlink" title="3）：设置页尾导航"></a>3）：设置页尾导航</h6><p><img src="%E9%A1%B5%E5%B0%BE.png"></p><p>①:设置底部导航栏文字颜色/选中颜色/背景颜色</p><p>②:设置底部导航栏中第一个属性的页面路径/图片/选中时候图片/文字</p><p>③:设置第二个属性的页面路径/图片/选中时候图片/文字</p><p>④:设置第三个属性的页面路径/图片/选中时候图片/文字</p><p><span style="color:red">注:底部导航栏最少要有2个!</span></p><p><img src="%E9%A1%B5%E5%B0%BE1.png"></p><h5 id="三、主页面轮播图"><a href="#三、主页面轮播图" class="headerlink" title="三、主页面轮播图"></a>三、主页面轮播图</h5><h6 id="1-新建主页面"><a href="#1-新建主页面" class="headerlink" title="1):新建主页面"></a>1):新建主页面</h6><p><img src="%E6%96%B0%E5%BB%BA%E4%B8%BB%E9%A1%B5%E9%9D%A2.png"></p><p>①:页面的js文件,是页面的生命周期,主要是用来请求api数据/处理数据/执行按钮事件等</p><p>②:json文件是用来处理json数据</p><p>③:.wxml是用来显示页面内容,绑定/显示数据</p><p>④:wxss页面样式文件</p><h6 id="2-轮播图样式"><a href="#2-轮播图样式" class="headerlink" title="2):轮播图样式"></a>2):轮播图样式</h6><p><img src="%E8%BD%AE%E6%92%AD%E5%9B%BE.png"></p><h6 id="3-在js文件中设置图片路径"><a href="#3-在js文件中设置图片路径" class="headerlink" title="3):在js文件中设置图片路径"></a>3):在js文件中设置图片路径</h6><p><img src="%E8%BD%AE%E6%92%AD%E5%9B%BE1.png"></p><h6 id="4-wxml页面样式布局"><a href="#4-wxml页面样式布局" class="headerlink" title="4):wxml页面样式布局"></a>4):wxml页面样式布局</h6><p><img src="%E8%BD%AE%E6%92%AD%E5%9B%BE2.png"></p><h5 id="四、调用豆瓣api接口显示数据"><a href="#四、调用豆瓣api接口显示数据" class="headerlink" title="四、调用豆瓣api接口显示数据"></a>四、调用豆瓣api接口显示数据</h5><p><img src="%E8%AF%B7%E6%B1%82%E6%95%B0%E6%8D%AE.png"></p><p>①:发起数据请求</p><p>②:设置请求的URL地址</p><p>③:设置请求的数据格式</p><p>④:得到请求的数据</p><p>⑤:把请求过来的数据保存到数组中,并且发送到前台页面</p><p><span style="color:red">注:初始请求的代码必须放在onload中,请求的参数不能少!</span></p><h6 id="1-得到请求结果"><a href="#1-得到请求结果" class="headerlink" title="1):得到请求结果"></a>1):得到请求结果</h6><p><img src="%E8%AF%B7%E6%B1%82%E6%95%B0%E6%8D%AE1.png"></p><p>①:得到的数据是一个对象集合,里面存放着每条数据,页面上就是显示这些数据!</p><h5 id="五、页面显示豆瓣电影数据"><a href="#五、页面显示豆瓣电影数据" class="headerlink" title="五、页面显示豆瓣电影数据"></a>五、页面显示豆瓣电影数据</h5><h6 id="1-显示电影的图片"><a href="#1-显示电影的图片" class="headerlink" title="1):显示电影的图片"></a>1):显示电影的图片</h6><p><img src="%E6%98%BE%E7%A4%BA%E7%94%B5%E5%BD%B1%E5%9B%BE%E7%89%87.png"></p><h6 id="2-设置图片的样式"><a href="#2-设置图片的样式" class="headerlink" title="2):设置图片的样式"></a>2):设置图片的样式</h6><p><img src="%E6%98%BE%E7%A4%BA%E7%94%B5%E5%BD%B1%E5%9B%BE%E7%89%871.png"></p><p><span style="color:red">3):页面显示如下所示</span></p><p><img src="%E6%98%BE%E7%A4%BA%E5%9B%BE%E7%89%872.png"></p><p><span style="color:red">注：一定要覆盖project.config.json文件</span></p><h6 id="4-显示右侧电影信息"><a href="#4-显示右侧电影信息" class="headerlink" title="4):显示右侧电影信息"></a>4):显示右侧电影信息</h6><p><img src="%E6%98%BE%E7%A4%BA%E7%94%B5%E5%BD%B1%E4%BF%A1%E6%81%AF.png"></p><p>①:页面样式代码</p><p><img src="%E6%98%BE%E7%A4%BA%E7%94%B5%E5%BD%B1%E4%BF%A1%E6%81%AF1.png"></p><p>②:最终结果如下:</p><p><img src="%E6%98%BE%E7%A4%BA%E7%94%B5%E5%BD%B1%E4%BF%A1%E6%81%AF2.png"></p><h5 id="六、电影推荐功能"><a href="#六、电影推荐功能" class="headerlink" title="六、电影推荐功能"></a>六、电影推荐功能</h5><h6 id="1-数据请求页面"><a href="#1-数据请求页面" class="headerlink" title="1):数据请求页面"></a>1):数据请求页面</h6><p><img src="%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90.png"></p><pre class="line-numbers language-none"><code class="language-none">url: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;j&#x2F;search_subjects?type&#x3D;movie&amp;tag&#x3D;北美&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><span style="color:red">注:默认显示北美电影数据,如果想看其他地区的,可以修改地区!</span></p><h6 id="2-页面内容"><a href="#2-页面内容" class="headerlink" title="2):页面内容"></a>2):页面内容</h6><p><img src="%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%902.png"></p><h6 id="3-页面样式"><a href="#3-页面样式" class="headerlink" title="3):页面样式"></a>3):页面样式</h6><p><img src="%E7%94%B5%E5%BD%B1%E6%9F%A5%E8%AF%A21.png"></p><h6 id="4-页面显示结果"><a href="#4-页面显示结果" class="headerlink" title="4):页面显示结果"></a>4):页面显示结果</h6><p><img src="%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%903.png"></p><h6 id="5）：显示下拉列表"><a href="#5）：显示下拉列表" class="headerlink" title="5）：显示下拉列表"></a>5）：显示下拉列表</h6><p>​    ①:设置下拉列表样式</p><p>​    <img src="%E4%B8%8B%E6%8B%89%E5%88%97%E8%A1%A8%E6%A0%B7%E5%BC%8F.png"></p><p>②:设置下拉列表样式</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;* 输入框内字体大小 *&#x2F;.select_text&#123;  font-size: 30rpx;&#125;&#x2F;* 下拉列表图片 *&#x2F;.select_img&#123;  width: 40rpx;  height: 40rpx;  display: block;  transition:transform 0.3s;  margin-left: 260px;&#125;&#x2F;* 搜索框的样式 *&#x2F;.select_box&#123;  background: #fff;  width: 100%;  &#x2F;* 相对定位 *&#x2F;  position: relative;&#125;.select&#123;  width: 100%;  height: 70rpx;  border:1px solid #efefef;  border-radius: 8rpx;  display: flex;  align-items: center;  padding: 0 20rpx;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>显示默认数据：</p><p><img src="%E8%AE%BE%E7%BD%AE%E9%BB%98%E8%AE%A4%E6%95%B0%E6%8D%AE.png"></p><p>③:显示结果</p><p><img src="%E4%B8%8B%E6%9D%A5%E4%BA%86%E5%88%97%E7%BB%93%E6%9E%9C.png"></p><p>④:点击下拉图片触发事件</p><p><img src="%E4%B8%8B%E6%8B%89%E4%BA%8B%E4%BB%B6.png"></p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;点击下拉图片，触发事件selectTap()&#123;  wx.showToast(&#123;    title: &#39;成功&#39;   &#125;)&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>显示结果：</p><p><img src="%E5%BC%B9%E5%87%BA%E6%8F%90%E7%A4%BA.png"></p><p>触发下拉列表：、</p><pre class="line-numbers language-none"><code class="language-none">selectTap()&#123;  this.setData(&#123;    show: !this.data.show  &#125;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> show:false,//控制下拉列表的显示隐藏，false隐藏、true显示</p><p>⑤:下拉列表的内容</p><p><img src="%E4%B8%8B%E6%8B%89%E5%88%97%E8%A1%A8%E6%95%B0%E6%8D%AE.png"></p><p>⑥：下拉列表内容js代码</p><p><img src="%E4%B8%8B%E6%8B%89%E5%88%97%E8%A1%A8%E5%86%85%E5%AE%B9.png"></p><p>⑦：下拉列表样式</p><pre class="line-numbers language-none"><code class="language-none">.option_box&#123;  position: absolute;  top: 70rpx;  width: 100%;  border:1px solid #efefef;  box-sizing: border-box;  overflow-y: auto;  background: #fff;  &#x2F;* 点击下拉列表显示动画特效 *&#x2F;  transition: height 0.3s;&#125;.option&#123;  display: block;  line-height: 40rpx;  font-size: 30rpx;  border-bottom: 1px solid #efefef;  padding: 10rpx;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>⑧：具体结果</p><p><img src="%E4%B8%8B%E6%8B%89%E5%88%97%E8%A1%A8%E7%9A%84%E7%BB%93%E6%9E%9C1.png"></p><p>⑨：选中下拉列表得到结果</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 点击下拉列表optionTap(e)&#123;  let Index&#x3D;e.currentTarget.dataset.index;&#x2F;&#x2F;获取点击的下拉列表的下标  this.setData(&#123;    index:Index,    show:!this.data.show  &#125;);  if(Index&#x3D;&#x3D;1)  &#123;    &#x2F;&#x2F;所有调用电影的数据，必须写在这里    var page&#x3D;this;    &#x2F;&#x2F; wx.request:请求豆瓣电影数据    wx.request(&#123;      url: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;j&#x2F;search_subjects?type&#x3D;movie&amp;tag&#x3D;台湾&#39;,      header:&#123;        &#39;Content-Type&#39;:&#39;json&#39;      &#125;,      success:function(res)&#123;        var result&#x3D;res.data.subjects;        console.log(result)        page.setData(&#123;movies:result&#125;);      &#125;    &#125;)  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="七、点击显示电影详情页面"><a href="#七、点击显示电影详情页面" class="headerlink" title="七、点击显示电影详情页面"></a>七、点击显示电影详情页面</h5><h6 id="1-在app-js之中设置跳转"><a href="#1-在app-js之中设置跳转" class="headerlink" title="1):在app.js之中设置跳转"></a>1):在app.js之中设置跳转</h6><p><img src="%E7%94%B5%E5%BD%B1%E8%AF%A6%E6%83%852.png"></p><h6 id="2-在recommand-js页面中添加detail事件"><a href="#2-在recommand-js页面中添加detail事件" class="headerlink" title="2):在recommand.js页面中添加detail事件"></a>2):在recommand.js页面中添加detail事件</h6><p><img src="%E7%94%B5%E5%BD%B1%E8%AF%A6%E6%83%853.png"></p><h6 id="3-点击任意一部电影进行跳转"><a href="#3-点击任意一部电影进行跳转" class="headerlink" title="3):点击任意一部电影进行跳转"></a>3):点击任意一部电影进行跳转</h6><p><img src="%E7%94%B5%E5%BD%B1%E8%AF%A6%E6%83%85%E9%A1%B5%E9%9D%A23.png"></p><h5 id="八、显示电影详情数据"><a href="#八、显示电影详情数据" class="headerlink" title="八、显示电影详情数据"></a>八、显示电影详情数据</h5><h6 id="1-根据ID查询电影详情数据"><a href="#1-根据ID查询电影详情数据" class="headerlink" title="1):根据ID查询电影详情数据"></a>1):根据ID查询电影详情数据</h6><p><img src="%E7%94%B5%E5%BD%B1%E8%AF%A6%E6%83%854.png"></p><h6 id="2-显示详情数据"><a href="#2-显示详情数据" class="headerlink" title="2):显示详情数据"></a>2):显示详情数据</h6><p><img src="%E7%94%B5%E5%BD%B1%E8%AF%A6%E6%83%855.png"></p><h6 id="3-页面代码"><a href="#3-页面代码" class="headerlink" title="3):页面代码"></a>3):页面代码</h6><p><img src="%E7%94%B5%E5%BD%B1%E8%AF%A6%E6%83%856.png"></p><h6 id="4-样式代码"><a href="#4-样式代码" class="headerlink" title="4):样式代码"></a>4):样式代码</h6><p><img src="%E8%AF%A6%E6%83%85%E9%A1%B5%E9%9D%A2%E6%A0%B7%E5%BC%8F.png"></p><h6 id="5-显示结果"><a href="#5-显示结果" class="headerlink" title="5):显示结果"></a>5):显示结果</h6><p><img src="%E7%94%B5%E5%BD%B1%E8%AF%A6%E6%83%85%E9%A1%B5%E9%9D%A2%E7%BB%93%E6%9E%9C.png"></p><h5 id="九、电影查询"><a href="#九、电影查询" class="headerlink" title="九、电影查询"></a>九、电影查询</h5><h6 id="1-页面内容"><a href="#1-页面内容" class="headerlink" title="1):页面内容"></a>1):页面内容</h6><p><img src="%E7%94%B5%E5%BD%B1%E6%9F%A5%E8%AF%A23.png"></p><h6 id="2-页面样式"><a href="#2-页面样式" class="headerlink" title="2):页面样式"></a>2):页面样式</h6><p><img src="%E7%94%B5%E5%BD%B1%E6%9F%A5%E8%AF%A24.png"></p><h6 id="3-显示结果"><a href="#3-显示结果" class="headerlink" title="3):显示结果"></a>3):显示结果</h6><p><img src="%E7%94%B5%E5%BD%B1%E6%9F%A5%E8%AF%A25.png"></p><h5 id="十、显示搜索结果"><a href="#十、显示搜索结果" class="headerlink" title="十、显示搜索结果"></a>十、显示搜索结果</h5><h6 id="1-页面内容-1"><a href="#1-页面内容-1" class="headerlink" title="1):页面内容"></a>1):页面内容</h6><p><img src="%E6%98%BE%E7%A4%BA%E6%90%9C%E7%B4%A2%E7%BB%93%E6%9E%9C.png"></p><h6 id="2-页面样式-1"><a href="#2-页面样式-1" class="headerlink" title="2):页面样式"></a>2):页面样式</h6><pre class="line-numbers language-none"><code class="language-none">.inputShow&#123;    padding-left: 35px;    color: white;    font-size: 12px;  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="3-显示搜索结果"><a href="#3-显示搜索结果" class="headerlink" title="3):显示搜索结果"></a>3):显示搜索结果</h6><p><img src="%E6%98%BE%E7%A4%BA%E6%90%9C%E7%B4%A0%E7%BB%93%E6%9E%9C1.png"></p><h5 id="十一、显示搜索的豆瓣电影"><a href="#十一、显示搜索的豆瓣电影" class="headerlink" title="十一、显示搜索的豆瓣电影"></a>十一、显示搜索的豆瓣电影</h5><h6 id="1-页面js代码"><a href="#1-页面js代码" class="headerlink" title="1):页面js代码"></a>1):页面js代码</h6><p><img src="%E7%94%B5%E5%BD%B1%E6%9F%A5%E8%AF%A26.png"></p><p><span style="color:red">注:其中的token代表是身份验证ID,每隔1-2天需要更换一次,防止重复提交</span></p><p><span style="color:red">token的来源网站:<a href="https://docs.apipost.cn/view/d0d08da057f52c32#2534700">https://docs.apipost.cn/view/d0d08da057f52c32#2534700</a></span></p><h6 id="2-显示json数据"><a href="#2-显示json数据" class="headerlink" title="2):显示json数据"></a>2):显示json数据</h6><p><img src="%E7%94%B5%E5%BD%B1%E6%9F%A5%E8%AF%A27.png"></p><h6 id="3-页面内容显示"><a href="#3-页面内容显示" class="headerlink" title="3):页面内容显示"></a>3):页面内容显示</h6><p><img src="%E7%94%B5%E5%BD%B1%E6%9F%A5%E8%AF%A28.png"></p><h6 id="4-页面样式"><a href="#4-页面样式" class="headerlink" title="4):页面样式"></a>4):页面样式</h6><pre class="line-numbers language-none"><code class="language-none">&#x2F;* 1px&#x3D;0.07毫米 *&#x2F;&#x2F;* &#x2F;&#x2F;movie-info:图片和电影信息之间的间距 *&#x2F;.movie-info&#123;  color: #FFFFFF;  font-size: 12px;  padding-top: 20px;  line-height: 20px;  margin-left: 30px;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">.SearchButton&#123;  background-color: #DD5E0E;  color: white;  font-size: 17px;  height: 54rpx;  line-height: 54rpx;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="5-页面显示结果"><a href="#5-页面显示结果" class="headerlink" title="5):页面显示结果"></a>5):页面显示结果</h6><p><img src="%E7%94%B5%E5%BD%B1%E6%9F%A5%E8%AF%A29.png"></p><p>更多知识请扫描二维码关注微信公众号” 51学代码 “</p><p><img src="1.png"></p>]]></content>
      
      
      <categories>
          
          <category> 微信小程序开发 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java Web服务器的介绍</title>
      <link href="year/03/07/j_javaweb_fu_wu_qi_jie_shao/"/>
      <url>year/03/07/j_javaweb_fu_wu_qi_jie_shao/</url>
      
        <content type="html"><![CDATA[<p><strong>一、Java Web服务器的介绍</strong></p><p>Web服务器：是指能够为发出请求的浏览器提供文档的程序。服务器是一</p><p>种被动程序，只有浏览器发出请求的时候才会响应。</p><p>主流的Web服务器有：</p><p>1.WebLogic：Bea公司开发的一个收费的大型服务器软件，后被Oracle收购，支持Java EE 所有规范。</p><p>2.Tomcat：由Apache、Sun和其他一些公司及个人共同开发而成。该服务器支持全部 JSP以及Servlet规范。因为Tomcat技术先进、性能稳定，而且开源免费，因而深受Java爱好者的喜爱并得到了部分软件开发商的认可，成为目前比较流行的Web服务器。学习JavaWeb开发一般都使用Tomcat服务器。</p><p>3.JBoss：一个开源的支持Java  EE规范的应用服务器，但是其核心服务不包含Servlet和 JSP,所以一般情况下，它会与Tomcat等服务器绑定使用</p><p><strong>二、Tomcat的下载与使用</strong></p><p>下载地址为：<a href="http://tomcat.apache.org/download-80.cgi">http://tomcat.apache.org/download-80.cgi</a></p><p>可根据自己的电脑选择软件版本。</p><p>打开下载好的Tomcat,其目录为</p><p><img src="1.png"></p><p>接下来我们打开bin目录，找到startup.bat,双击打开它，此时服务器已启动</p><p><img src="2.png"></p><p>接下来我们访问浏览器，我们输入localhost:8080回车，我们可以看到如图，</p><p><img src="3.png"></p><p>此时就说明Tomcat服务已经开启成功了</p><p>想要关闭它就在bin目录下找到shutdown.bat,双击一下就可关闭Tomcat服务器。</p><p><strong>三、Tomcat的目录结构：</strong></p><p>​         bin   脚本目录(启动和停止：(startup.bat, shutdown.bat)</p><p>​         conf  配置目录(server.xml、web.xml)</p><p>​         lib   存放jar包</p><p>​         logs    日志文件存放的位置(程序运行时操作系统)</p><p>​         temp   临时文件</p><p>​         webapps  用于存放web项目的</p><p>​         work       Tomcat处理 jsp 页面工作目录</p><p><strong>四、Tomcat启动后出现乱码的解决方案：</strong></p><p>​        1.打开Tomcat目录的conf文件夹，然后打开logging.properties文件，修改如下图</p><p>​           <img src="4.png"></p><p>​         然后重新启动Tomcat乱码就解决了</p><p><strong>五、Tomcat服务器使用浏览器打开webapps下的项目txt文件乱码问题：</strong></p><ol><li><p>Tomcat文件设置编码格式为utf-8，如果不行就执行下面一步</p></li><li><p>将txt文件utf-8格式另存为UTF-8-BOM格式乱码解决。</p><p>更多知识关注本站微信公众号”51学代码”</p></li></ol><p><img src="51x.png"></p>]]></content>
      
      
      <categories>
          
          <category> Tomcat </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java Web </tag>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习路线</title>
      <link href="year/01/28/i_java_xue_xi_xian_lu/"/>
      <url>year/01/28/i_java_xue_xi_xian_lu/</url>
      
        <content type="html"><![CDATA[<p> <strong>阶段一 （夯实基础）</strong> </p><p> <strong>Java基础语法</strong> </p><pre class="line-numbers language-java" data-language="java"><code class="language-java">学习目标:    1.熟悉Java等基本概念    2.掌握Eclipse&#x2F;IDEA集成开发工具的安装、配置和应用    3.熟悉Java基本语法、基本类型、运算符和表达式    4.掌握分支、循环逻辑语句、数组等知识的应用知识点列表:    JDK、JRE、JVM基本概念    Java环境搭建和配置    安装和使用Eclipse&#x2F;IDEA开发环境    Java基本数据类型    变量,运算符,表达式    分支语句,循环语句、    数组，数组应用。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <strong>Java面向对象编程</strong> </p><pre class="line-numbers language-java" data-language="java"><code class="language-java">学习目标:    1.理解面向对象思想和概念    2.学会面向对象分析方法    3.掌握类、对象、继承、多态的使用    4.熟悉重写、重载、抽象类、内部类以及设计模式的应用知识点列表:    类、对象、属性、方法、构造器    封装、继承、多态    重写、重载    访问权限控制符    this和super、static、final    抽象类和接口,内部类    各种设计模式    Java设计原则<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <strong>Java核心类库</strong> </p><pre class="line-numbers language-java" data-language="java"><code class="language-java">学习目标:    1.掌握Java核心类库的应用，例如字符串、日期、集合的处理    2.掌握异常处理、IO流对文件读写、多线程应用、网络编程实现计算机之间通讯    3.熟悉Java泛型和反射技术的应用知识点列表:    Java核心类    Java字符串、日期处理    包装类、集合、数据结构    异常和异常处理    Java IO、NIO、多线程编程    线程同步机制、并发包    JAVA网络编程    Java泛型和注解    Java反射机制<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <strong>算法与数据结构</strong> </p><pre class="line-numbers language-java" data-language="java"><code class="language-java">学习目标:    掌握常用算法和数据结构知识点列表:    常用排序算法    常用查找算法    常用数据结构    一阶段刷题( 20道大厂面试题 )<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <strong>数据库</strong> </p><pre class="line-numbers language-java" data-language="java"><code class="language-java">学习目标:    1. 熟悉MySQL数据库的安装和使用    2. 精通SQL语句的编写和优化    3. 掌握数据库设计原则和方法    4. 了解视图、序列、索引概念和应用    5. 创建用户、给用户授权操作知识点列表:    精通mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <strong>JDBC技术</strong> </p><pre class="line-numbers language-java" data-language="java"><code class="language-java">学习目标:    1. 熟悉JDBC API应用，掌握Java对数据库的访问方法    2. 掌握如何实现对数据库的增删改查    3. 如何使用安全的数据库访问方式    4. 如何提升数据库操作性能，学会DAO模式的封装知识点列表:    DBC 核心API    CRUD操作    Statement应用    PreparedStatement应用    预防SQL注入攻击    事务安全控制、高并发控制    批处理技术    dbcp、druid各种连接池的使用    DAO封装模式<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <strong>XML与JSON</strong> </p><pre class="line-numbers language-java" data-language="java"><code class="language-java">学习目标:    1. 熟悉XML文件的基本语法和规范    2. 了解SAX和DOM的区别    3. 掌握Dom4j工具的使用和XPATH的快速解析技术    4. 掌握JSON语法与解析知识点列表:    XML基本语法    DTD和Schema    XML解析SAX和DOM    Java核心类Dom4j应用    XPATH技术应用    JSON语法    JSON解析库<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <strong>H5前端</strong> </p><pre class="line-numbers language-java" data-language="java"><code class="language-java">学习目标:    1. 熟悉HTML5语法和标记    2. 能熟练设计体验度高的HTML页面    3. 能实现对特殊功能的界面设计，例如画图表、视频音频播放、地理定位等    4. 熟悉CSS3语法和属性    5. 能熟悉对HTML内容进行渲染，例如文字样式、列表和表格样式、动画、元素定位和布局    6. 熟悉JavaScript基本语法    7. 掌握对HTML元素的处理、浏览器窗体的处理、事件处理等    8. 熟练实现对HTML页面的表单校验和页面特效的处理 HTML5应用程序缓存，本地存储技术localStorage和 sessionStorage的使用    知识点列表:    HTML5基本文档结构    标题、图片标记    链接、列表、表格标记    表单标记    CSS基础语法    CSS文本、列表、表格样式    CSS盒子模型    CSS浮动布局、定位    CSS弹性盒子    JavaScript语言基础    JavaScript闭包和自执行    JavaScript DOM编程    JavaScript事件模型    Window对象模型    HTML5画布    Web存储、音频&#x2F;视频、拖放    本地存储    移动端适配    CSS3边框、背景    CSS3动画、特效    C33文字特效、盒子模型    JDBC jQuery选择器、事件    jQuery文档处理、特效    Bootstrap按钮、表格、列表等样式处理    Bootstrap布局、弹框、特效样式处理<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <strong>JavaEE基础</strong> </p><pre class="line-numbers language-javaEE" data-language="javaEE"><code class="language-javaEE">学习目标:    1、掌握Tomcat的安装和使用    2、熟悉Servlet概念和开发规范    3、掌握session和cookie状态管理技术    4、掌握Filter和Listener组件的使用    5、掌握Servlet实现验证码和文件上传功能    6.熟悉JSP基本语法和标记    7.掌握JSP中9大内置对象应用    8.能熟练使用JSTL和EL显示数据掌握4.JSP+Servlet+JavaBean技术构建的MVC应用    9.熟悉Ajax作用和原理    10.掌握XMLHttpRequest对象的使用    11.熟悉JSON语法并熟练与Ajax结合运用    12.熟练掌握jQuery中$.ajax、$.load、$.post、$.get等函数的使用    13.掌握ajax表单提交和文件上传功能知识点列表:    HTTP协议    Tomcat配置和部署    Servlet生命周期    Servlet编写规范和配置    GET请求与POST请求的区别    接收用户请求的参数    中文接收乱码处理    ServletContext    ServletConfig    重定向与转发    Servlet+DAO工厂模式应用    Cookie与Session    Servlet实现文件上传功能    JSP 基本语法    JSP三大指令    JSP标记应用    JSP九内置对象    JSP四域对象    JSP异常处理    JSTL和 EL表达式    JSP新特性    Filter    Listener    MVC设计模式    Ajax作用和原理    XMLHttpRequest对象    Ajax局部刷新、异步处理    jQuery与Ajax技术    Ajax异步提交表单    Ajax异步上传文件    $.ajax函数的使用    $.get函数的使用    $.post函数的使用    $.load函数的使用    业务分层架构    前后端分离架构<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <strong>操作系统训练</strong> </p><pre class="line-numbers language-Linux" data-language="Linux"><code class="language-Linux">学习目标:    熟练掌握linux系统    知识点列表:    虚拟机安装与使用    centos操作系统安装    乌班图操作系统安装    常用命令    linux环境搭建    linux项目部署上线<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  <strong>阶段二 （前沿框架）</strong> </p><p> <strong>Maven</strong> </p><pre class="line-numbers language-java" data-language="java"><code class="language-java">学习目标:    1.  熟练使用maven    知识点列表:    Maven 环境配置    Maven POM    Maven 构建生命周期    Maven 构建配置文件    Maven 仓库    Maven 插件    Maven 构建 Java 项目    Maven 构建 &amp; 项目测试    Maven 引入外部依赖    Maven 项目模板    Maven 快照(SNAPSHOT)    Maven 自动化构建    Maven 依赖管理    Maven 自动化部署    Maven IDEA<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <strong>NoSql</strong> </p><pre class="line-numbers language-java" data-language="java"><code class="language-java">学习目标:    了解NoSQL概念    熟练掌握Redis的安装和命令    掌握Java对Redis的操作    了解Redis的事务、备份    了解Redis的订阅\发布式消息系统的使用    熟练掌握如何使用Redis做缓存    了解MongoDB概念和安装    掌握MongoDB的结构和命令    掌握Java对MongoDB操作    掌握MongoDB CRUD操作    掌握排序、索引、备份和恢复等    了解对MongoDB的管理和维护<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">知识点列表:    Redis概念安装    Redis命令操作    Java Redis API    Redis 字符串操作命令    Redis 哈希操作命令    Redis列表操作命令    Redis集合操作命令    Redis 有序集合操作命令    Redis事务处理、备份和恢复    Redis消息发布系统    Redis集群搭建    MongoDB概念和安装    MongoDB命令操作    Java MongoDB API    MongoDB排序、索引    MongoDB备份恢复    MongoDB集群搭建<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  <strong>Java框架基础（Spring）</strong> </p><pre class="line-numbers language-java" data-language="java"><code class="language-java">学习目标:    熟悉Spring框架的模块结构    掌握SpringIOC管理组件    掌握如何对组件对象参数注入    掌握JdbcTemplate对象的使用    掌握Spring声明式事务处理    熟练掌握SpringMVC流程    掌握SpringMVC拦截器、异常处理、文件上传等功能的应用    熟悉Spring中AOP概念及应用    掌握Spring国际化概念和应用    掌握SpringMVC中如何使用RESTFUL    知识点列表:    Spring IOC概念    ApplicationContext \ FactoryBean    IOC对象创建和生命周期    基本类型参数注入    集合类型参数注入    对象高级装配    组件扫描特性    Spring JdbcTemplate应用    Spring 事务及安全管理    Spring MVC框架原理    Spring MVC基本流程    Spring MVC拦截器    Spring MVC异常处理    Spring MVC文件上传    Restful服务架构    SpringAOP原理    AspectJ注解配置    Spring+JPA数据访问<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <strong>Java框架基础（MyBatis）</strong> </p><pre class="line-numbers language-java" data-language="java"><code class="language-java">学习目标:    掌握MyBatis开发环境的搭建    了解MyBatis框架结构和原理    掌握DQL&#x2F;DML语句的定义    掌握Mapper映射器规则和应用    掌握MyBatis分页原理和优化    掌握MyBatis和PageHelper集成应用    了解动态SQL和多表关联映射    掌握Spring和MyBatis的整合应用知识点列表:    MyBatis体系结构    SqlSession的使用    MyBatis映射基础    DQL 映射，DML映射    resultType&#x2F;resultMap结果映射    Mapper映射器    MyBatis分页原理和优化    高级动态SQL映射    @Many关联映射    @One关联映射    MyBatis常见问题    JdbcType属性作用    Spring和MyBatis整合Mapper    Spring和MyBatis整合SqlSessionTemplate<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <strong>Java框架进阶（SSM整合）</strong> </p><pre class="line-numbers language-java" data-language="java"><code class="language-java">学习目标:    1.掌握SSM基本使用    2.熟悉SSM应用常见问题和解决方法    4.熟悉SSM流程设计和实现    5.掌握SSM事务控制    6.掌握Restful架构运用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <strong>Java框架高级 （微服务与分布式）</strong> </p><pre class="line-numbers language-java" data-language="java"><code class="language-java">学习目标：    掌握Maven安装和使用    了解SpringBoot和SpringCloud的关系和作用    掌握SpringBoot基础原理    掌握SpringBoot开发过程    掌握SpringBoot对JDBC支持    掌握SpringBoot对MyBatis集成应用    熟悉SpringBoot MVC开发    掌握SpringBoot集成Servlet、过滤器、拦截器    熟悉SpringCloud如何发布服务、查找、调用    掌握SpringCloud断路器、网关技术的使用    了解SpringCloud服务监控技术和使用    知识点列表：    SpringBoot开发环境搭建    SpringBoot启动加载原理    SpringBoot自动配置原理    SpringBoot参数注入    SpringBoot数据库连接    SpringBoot多数据源    SpringBoot动态数据源    SpringBoot整合JDBC技术    SpringBoot整合MyBatis技术    SpringBoot整合JPA技术    SpringBoot MVC环境搭建    SpringBoot MVC异常处理    SpringBoot MVC拦截器    SpringBoot MVC开发Restful    SpringBoot MVC开发Thymeleaf    SpringBoot MVC 开发JSP    SpringBoot 任务调度    SpringBoot 集成Servlet、过滤器等    SpringBoot SSM综合开发运用    SpringCloud概念    SpringCloud Eureka服务中心搭建    SpringCloud Eureka 服务注册    SpringCloud RestTemplate&#x2F;Feign 服务调用    SpringCloud Ribbon集群负载和策略    SpringCloud Hystrix断路器概念和使用    SpringCloud actuator健康监控    SpringCloud Hystrix监控    SpringCloud Zuul网关概念和使用    SpringCloud Config统一配置    SpringCloud Bus配置刷新<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <strong>Java容器化开发 (Docker 与 K8s)</strong> </p><pre class="line-numbers language-java" data-language="java"><code class="language-java">学习目标:    1. 熟练掌握容器化开发和部署技术知识点列表:      容器与虚拟机比较     Docker环境安装     Docker命令使用     Docker容器化开发和部署技术     docker组件     docker安装     docker启动与停止     镜像相关命令     创建启动与查看容器     容器停止与启动和目录挂载     目录挂载查看IP与删除容器     mysql部署     tomcat部署     nginx部署     redis部署     迁移与备份     Dockerfile常用命令     Dockerfile构建jdk1.8镜像     Docker私有仓库的搭建与配置     Docker私有仓库镜像上传     K8s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <strong>架构设计与解决方案(框架补充)</strong> </p><pre class="line-numbers language-java" data-language="java"><code class="language-java">学习目标:    具备架构设计能力    掌握常见解决方案知识点列表:    SSO单点登录    分布式服务和集群搭建    RabbitMQ&#x2F;ActiveMQ&#x2F;Kafka消息服务解决方案、    Elasticsearch&#x2F;Lucene搜索服务解决方案    Tomcat&#x2F;Ngnix负载均衡解决方案    Shiro安全服务解决方案  Spring整合Shiro    Dubbo&#x2F;zookeeper分布式解决方案、    Cache&#x2F;Ehcache&#x2F;Memcache&#x2F;Redis缓存解决方案    FastDFS分布式文件处理方案    Netty     高并发处理方案    系统安全服务解决方案    JVM调优处理方案<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <strong>项目实战训练</strong> </p><pre class="line-numbers language-java" data-language="java"><code class="language-java">学习目标:    能独立开发具备交付能力的项目知识点列表:    项目流程训练 ( 从需求阶段 → 项目交付 → 项目上线 → 项目升级维护 )<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p> <strong>阶段三（前沿生态与团队协同）</strong> </p><p> <strong>前沿生态</strong> </p><pre class="line-numbers language-java" data-language="java"><code class="language-java">学习目标:    熟练运用前沿生态    知识点列表:    图像识别    语音识别    阿里云&#x2F;百度云&#x2F;华为云等云服务器生态    微信生态    支付宝生态    等其他常用组件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <strong>协同项目实战</strong> </p><pre class="line-numbers language-java" data-language="java"><code class="language-java">学习目标:    具备参与实施团队协同开发的能力    知识点列表:    项目协同开发训练    项目实战规范训练    项目流程训练 ( 从需求阶段 → 项目交付 → 项目上线 → 项目升级维护 )<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>免责声明：本线路来源于新职课开课吧学习线路，如若侵权请联系作者删除。</p><p>更多知识关注微信公众号”51学代码”</p><p><img src="1.png"></p>]]></content>
      
      
      <categories>
          
          <category> JavaEE </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring简介</title>
      <link href="year/11/30/h_spring_jian_jie/"/>
      <url>year/11/30/h_spring_jian_jie/</url>
      
        <content type="html"><![CDATA[<h3 id="Spring是一个轻量级Java-开发框架，最早由Rod-Johnson创建，目的是为了解决企业级应用开发的业务逻辑层和其他各层的耦合问题。它是一个分层的JavaSE-EEfull-stack-一站式-轻量级开源框架，为开发Java应用程序提供全面的基础架构支持。Spring负责基础架构，因此Java开发者可以专注于应用程序的开发。"><a href="#Spring是一个轻量级Java-开发框架，最早由Rod-Johnson创建，目的是为了解决企业级应用开发的业务逻辑层和其他各层的耦合问题。它是一个分层的JavaSE-EEfull-stack-一站式-轻量级开源框架，为开发Java应用程序提供全面的基础架构支持。Spring负责基础架构，因此Java开发者可以专注于应用程序的开发。" class="headerlink" title="Spring是一个轻量级Java 开发框架，最早由Rod Johnson创建，目的是为了解决企业级应用开发的业务逻辑层和其他各层的耦合问题。它是一个分层的JavaSE/EEfull-stack(一站式) 轻量级开源框架，为开发Java应用程序提供全面的基础架构支持。Spring负责基础架构，因此Java开发者可以专注于应用程序的开发。"></a>Spring是一个轻量级Java 开发框架，最早由Rod Johnson创建，目的是为了解决企业级应用开发的业务逻辑层和其他各层的耦合问题。它是一个分层的JavaSE/EEfull-stack(一站式) 轻量级开源框架，为开发Java应用程序提供全面的基础架构支持。Spring负责基础架构，因此Java开发者可以专注于应用程序的开发。</h3><h2 id="Spring的体系结构"><a href="#Spring的体系结构" class="headerlink" title="Spring的体系结构"></a>Spring的体系结构</h2><p><img src="%E5%9B%BE%E7%89%871.png"></p><h2 id="1．核心容器"><a href="#1．核心容器" class="headerlink" title="1．核心容器"></a>1．核心容器</h2><p>Spring的核心容器是其他模块建立的基础，由Spring-core、Spring-beans、Spring-context、Spring-Context-support和Spring-expression（Spring表达式语言）等模块组成。<br>    Spring-core模块：提供了框架的基本组成部分，包括控制反转（Inversion of Control，IoC）和依赖注入（Dependency Injection，DI）功能。<br>    Spring-beans模块：提供了BeanFactory，是工厂模式的一个经典实现，Spring将管理对象称为Bean。<br>    Spring-context模块：建立在Core和Beans模块基础上，提供一个框架式的对象访问方式，是访问定义和配置的任何对象的媒介。ApplicationContext接口是Context模块的焦点。<br>Spring-context-support模块：支持整合第三方库到Spring应用程序上下文，特别是用于高速缓存（EhCache，JCache）和任务调度（CommonJ，Quartz）的支持。<br>    Spring-expression模块：提供了强大的表达式语言去支持运行时查询和操作对象图。</p><h2 id="2．AOP和Instrumentation"><a href="#2．AOP和Instrumentation" class="headerlink" title="2．AOP和Instrumentation"></a>2．AOP和Instrumentation</h2><p>Spring-aop模块：提供了一个符合AOP要求的面向切面的编程实现，允许定义方法拦截器和切入点，将代码按照功能进行分离，以便干净地解耦。<br>    Spring-aspects模块：提供了与AspectJ的集成功能，AspectJ是一个功能强大且成熟的AOP框架。<br>    Spring-instrument模块：提供了类植入（instrumentation）支持和类加载器的实现，可以在特定的应用服务器中使用。</p><h2 id="3．消息"><a href="#3．消息" class="headerlink" title="3．消息"></a>3．消息</h2><p>Spring 4.0以后新增了消息（Spring-messaging）模块，该模块提供了对消息传递体系结构和协议的支持。</p><h2 id="4．数据访问-集成"><a href="#4．数据访问-集成" class="headerlink" title="4．数据访问/集成"></a>4．数据访问/集成</h2><p>数据访问/集成层由JDBC、ORM、OXM、JMS和事务模块组成。<br>    Spring-jdbc模块：提供了一个JDBC 的抽象层，消除了繁琐的JDBC编码和数据库厂商特有的错误代码解析。<br>    Spring-tx模块（事务模块）：支持用于实现特殊接口和所有POJO（普通Java对象）类的编程和声明式事务管理。<br>    Spring-orm模块：为流行的对象关系映射(Object-Relational Mapping )API提供集成层，包括JPA和Hibernate。使用Spring-orm模块，可以将这些O/R映射框架与Spring提供的所有其他功能结合使用，例如声明式事务管理功能。<br>    Spring-oxm模块：提供了一个支持对象/XML映射的抽象层实现，如JAXB、Castor、JiBX和XStream。<br>    Spring-jms模块(Java Messaging Service) ：指Java消息传递服务，包含用于生产和使用消息的功能。自Spring 4.1后，提供了与Spring-messaging模块的集成。</p><h2 id="5．Web"><a href="#5．Web" class="headerlink" title="5．Web"></a>5．Web</h2><p>Web层由Spring-web、Spring-webmvc、Spring-websocket和Portlet模块组成。<br>    Spring-web模块：提供了基本的Web开发集成功能。例如：多文件上传功能、使用Servlet监听器初始化一个IoC容器以及Web应用上下文。<br>    Spring-webmvc模块：也称为Web-Servlet模块，包含用于Web应用程序的Spring MVC和REST Web Services实现。 Spring MVC框架提供了领域模型代码和Web表单之间的清晰分离，并与  Spring Framework的所有其他功能集成，本书后续章节将会详细讲解Spring MVC框架。<br>    Spring-websocket模块：Spring 4.0后新增的模块，它提供了WebSocket和SockJS的实现。<br>    Portlet模块：类似于Servlet模块的功能，提供了在Portlet环境中使用MVC实现。</p><h2 id="6．测试"><a href="#6．测试" class="headerlink" title="6．测试"></a>6．测试</h2><p>Spring-test模块：支持使用JUnit或TestNG对Spring组件进行单元测试和集成测试。</p><p>更多知识关注微信公众号“51学代码”</p><p><img src="51x.png"></p>]]></content>
      
      
      <categories>
          
          <category> JavaEE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JavaEE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>贪吃蛇游戏</title>
      <link href="year/11/30/g_tan_chi_she_you_xi/"/>
      <url>year/11/30/g_tan_chi_she_you_xi/</url>
      
        <content type="html"><![CDATA[<p>使用 Java 语言编写一个贪吃蛇游戏，代码如下：</p><p>GreedSnake .java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">package jzjsfx;public class GreedSnake &#123;public static void main(String[] args) &#123;SnakeModel model &#x3D; new SnakeModel(20, 30);SnakeControl control &#x3D; new SnakeControl(model);SnakeView view &#x3D; new SnakeView(model, control);&#x2F;&#x2F; 添加一个观察者，让view成为model的观察者model.addObserver(view);new Thread(model).start();&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>SnakeControl.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">package jzjsfx;import java.awt.event.KeyEvent;import java.awt.event.KeyListener;public class SnakeControl  implements KeyListener&#123;    SnakeModel model;    public SnakeControl(SnakeModel model)&#123;        this.model &#x3D; model;    &#125;    public void keyPressed(KeyEvent e) &#123;        int keyCode &#x3D; e.getKeyCode();        if (model.running)&#123;                &#x2F;&#x2F; 运行状态下，处理的按键            switch (keyCode) &#123;                case KeyEvent.VK_UP:                    model.changeDirection(SnakeModel.UP);                    break;                case KeyEvent.VK_DOWN:                    model.changeDirection(SnakeModel.DOWN);                    break;                case KeyEvent.VK_LEFT:                    model.changeDirection(SnakeModel.LEFT);                    break;                case KeyEvent.VK_RIGHT:                    model.changeDirection(SnakeModel.RIGHT);                    break;                case KeyEvent.VK_ADD:                case KeyEvent.VK_PAGE_UP:                    model.speedUp();                    break;                case KeyEvent.VK_SUBTRACT:                case KeyEvent.VK_PAGE_DOWN:                    model.speedDown();                    break;                case KeyEvent.VK_SPACE:                case KeyEvent.VK_P:                    model.changePauseState();                    break;                default:            &#125;        &#125;        &#x2F;&#x2F; 任何情况下处理的按键，按键导致重新启动游戏        if (keyCode &#x3D;&#x3D; KeyEvent.VK_R ||                keyCode &#x3D;&#x3D; KeyEvent.VK_S ||                keyCode &#x3D;&#x3D; KeyEvent.VK_ENTER) &#123;            model.reset();        &#125;    &#125;    public void keyReleased(KeyEvent e) &#123;    &#125;    public void keyTyped(KeyEvent e) &#123;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>SnakeModel.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">package jzjsfx;import javax.swing.*;import java.util.Arrays;import java.util.LinkedList;import java.util.Observable;import java.util.Random;class SnakeModel extends Observable implements Runnable &#123;    boolean[][] matrix;                         &#x2F;&#x2F; 指示位置上有没蛇体或食物    LinkedList nodeArray &#x3D; new LinkedList();    &#x2F;&#x2F; 蛇体    Node food;    int maxX;&#x2F;&#x2F;横列    int maxY;&#x2F;&#x2F;纵列    int direction &#x3D; 2;                          &#x2F;&#x2F; 蛇运行的方向    boolean running &#x3D; false;                    &#x2F;&#x2F; 运行状态    int timeInterval &#x3D; 200;                     &#x2F;&#x2F; 时间间隔，毫秒    double speedChangeRate &#x3D; 0.75;              &#x2F;&#x2F; 每次得速度变化率    boolean paused &#x3D; false;                     &#x2F;&#x2F; 暂停标志    int score &#x3D; 0;                              &#x2F;&#x2F; 得分    int countMove &#x3D; 0;                          &#x2F;&#x2F; 吃到食物前移动的次数    &#x2F;&#x2F; UP and DOWN should be even    &#x2F;&#x2F; RIGHT and LEFT should be odd    public static final int UP &#x3D; 2;    public static final int DOWN &#x3D; 4;    public static final int LEFT &#x3D; 1;    public static final int RIGHT &#x3D; 3;    public SnakeModel( int maxX, int maxY) &#123;        this.maxX &#x3D; maxX;        this.maxY &#x3D; maxY;        reset();    &#125;    public void reset()&#123;        direction &#x3D; SnakeModel.UP;              &#x2F;&#x2F; 蛇运行的方向        timeInterval &#x3D; 200;                     &#x2F;&#x2F; 时间间隔，毫秒        paused &#x3D; false;                         &#x2F;&#x2F; 暂停标志        score &#x3D; 0;                              &#x2F;&#x2F; 得分        countMove &#x3D; 0;                          &#x2F;&#x2F; 吃到食物前移动的次数        &#x2F;&#x2F; initial matirx, 全部清0        matrix &#x3D; new boolean[maxX][];        for (int i &#x3D; 0; i &lt; maxX; ++i) &#123;            matrix[i] &#x3D; new boolean[maxY];            Arrays.fill(matrix[i], false);        &#125;        &#x2F;&#x2F; initial the snake        &#x2F;&#x2F; 初始化蛇体，如果横向位置超过20个，长度为10，否则为横向位置的一半        int initArrayLength &#x3D; maxX &gt; 20 ? 10 : maxX &#x2F; 2;        nodeArray.clear();        for (int i &#x3D; 0; i &lt; initArrayLength; ++i) &#123;            int x &#x3D; maxX &#x2F; 2 + i;&#x2F;&#x2F;maxX被初始化为20            int y &#x3D; maxY &#x2F; 2;    &#x2F;&#x2F;maxY被初始化为30            &#x2F;&#x2F;nodeArray[x,y]: [10,15]-[11,15]-[12，15]~~[20,15]            &#x2F;&#x2F;默认的运行方向向上，所以游戏一开始nodeArray就变为：            &#x2F;&#x2F;       [10，14]-[10，15]-[11，15]-[12，15]~~[19，15]            nodeArray.addLast(new Node(x, y));            matrix[x][y] &#x3D; true;        &#125;        &#x2F;&#x2F; 创建食物        food &#x3D; createFood();        matrix[food.x][food.y] &#x3D; true;    &#125;    public void changeDirection(int newDirection) &#123;        &#x2F;&#x2F; 改变的方向不能与原来方向同向或反向        if (direction % 2 !&#x3D; newDirection % 2) &#123;            direction &#x3D; newDirection;        &#125;    &#125;       public boolean moveOn() &#123;        Node n &#x3D; (Node) nodeArray.getFirst();        int x &#x3D; n.x;        int y &#x3D; n.y;        &#x2F;&#x2F; 根据方向增减坐标值        switch (direction) &#123;            case UP:                y--;                break;            case DOWN:                y++;                break;            case LEFT:                x--;                break;            case RIGHT:                x++;                break;        &#125;        &#x2F;&#x2F; 如果新坐标落在有效范围内，则进行处理        if ((0 &lt;&#x3D; x &amp;&amp; x &lt; maxX) &amp;&amp; (0 &lt;&#x3D; y &amp;&amp; y &lt; maxY)) &#123;                    if (matrix[x][y]) &#123;        &#x2F;&#x2F; 如果新坐标的点上有东西（蛇体或者食物）                if (x &#x3D;&#x3D; food.x &amp;&amp; y &#x3D;&#x3D; food.y) &#123;       &#x2F;&#x2F; 吃到食物，成功                    nodeArray.addFirst(food);           &#x2F;&#x2F; 从蛇头赠长                    &#x2F;&#x2F; 分数规则，与移动改变方向的次数和速度两个元素有关                    int scoreGet &#x3D; (10000 - 200 * countMove) &#x2F; timeInterval;                    score +&#x3D; scoreGet &gt; 0 ? scoreGet : 10;                    countMove &#x3D; 0;                    food &#x3D; createFood();                &#x2F;&#x2F; 创建新的食物                    matrix[food.x][food.y] &#x3D; true;      &#x2F;&#x2F; 设置食物所在位置                    return true;                &#125; else                                  &#x2F;&#x2F; 吃到蛇体自身，失败                    return false;                           &#125; else &#123;                 &#x2F;&#x2F; 如果新坐标的点上没有东西（蛇体），移动蛇体                nodeArray.addFirst(new Node(x, y));                matrix[x][y] &#x3D; true;                n &#x3D; (Node) nodeArray.removeLast();                matrix[n.x][n.y] &#x3D; false;                countMove++;                return true;            &#125;        &#125;        return false;                                   &#x2F;&#x2F; 触到边线，失败    &#125;    public void run() &#123;        running &#x3D; true;        while (running) &#123;            try &#123;                Thread.sleep(timeInterval);            &#125; catch (Exception e) &#123;                break;            &#125;            if (!paused) &#123;                if (moveOn()) &#123;                    setChanged();           &#x2F;&#x2F; Model通知View数据已经更新                    notifyObservers();                &#125; else &#123;                    JOptionPane.showMessageDialog(null,                            &quot;you failed&quot;,                            &quot;Game Over&quot;,                            JOptionPane.INFORMATION_MESSAGE);                    break;                &#125;            &#125;        &#125;        running &#x3D; false;    &#125;    private Node createFood() &#123;        int x &#x3D; 0;        int y &#x3D; 0;        &#x2F;&#x2F; 随机获取一个有效区域内的与蛇体和食物不重叠的位置        do &#123;            Random r &#x3D; new Random();            x &#x3D; r.nextInt(maxX);            y &#x3D; r.nextInt(maxY);        &#125; while (matrix[x][y]);        return new Node(x, y);    &#125;    public void speedUp() &#123;        timeInterval *&#x3D; speedChangeRate;    &#125;    public void speedDown() &#123;        timeInterval &#x2F;&#x3D; speedChangeRate;    &#125;    public void changePauseState() &#123;        paused &#x3D; !paused;    &#125;    public String toString() &#123;        String result &#x3D; &quot;&quot;;        for (int i &#x3D; 0; i &lt; nodeArray.size(); ++i) &#123;            Node n &#x3D; (Node) nodeArray.get(i);            result +&#x3D; &quot;[&quot; + n.x + &quot;,&quot; + n.y + &quot;]&quot;;        &#125;        return result;    &#125;&#125;class Node &#123;    int x;    int y;    Node(int x, int y) &#123;        this.x &#x3D; x;        this.y &#x3D; y;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>SnakeView.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">package jzjsfx;import javax.swing.*;import java.awt.*;import java.util.Iterator;import java.util.LinkedList;import java.util.Observable;import java.util.Observer;public class SnakeView implements Observer &#123;SnakeControl control &#x3D; null;SnakeModel model &#x3D; null;JFrame mainFrame;Canvas paintCanvas;JLabel labelScore;public static final int canvasWidth &#x3D; 200;public static final int canvasHeight &#x3D; 300;public static final int nodeWidth &#x3D; 10;public static final int nodeHeight &#x3D; 10;public SnakeView(SnakeModel model, SnakeControl control) &#123;this.model &#x3D; model;this.control &#x3D; control;mainFrame &#x3D; new JFrame(&quot;贪吃蛇&quot;);Container cp &#x3D; mainFrame.getContentPane();&#x2F;&#x2F; 创建顶部的分数显示labelScore &#x3D; new JLabel(&quot;Score:&quot;);cp.add(labelScore, BorderLayout.NORTH);&#x2F;&#x2F; 创建中间的游戏显示区域paintCanvas &#x3D; new Canvas();paintCanvas.setSize(canvasWidth + 1, canvasHeight + 1);paintCanvas.addKeyListener(control);cp.add(paintCanvas, BorderLayout.CENTER);&#x2F;&#x2F; 创建底下的帮助栏JPanel panelButtom &#x3D; new JPanel();panelButtom.setLayout(new BorderLayout());JLabel labelHelp;labelHelp &#x3D; new JLabel(&quot;PageUp, PageDown for speed;&quot;, JLabel.CENTER);panelButtom.add(labelHelp, BorderLayout.NORTH);labelHelp &#x3D; new JLabel(&quot;ENTER or R or S for restart;&quot;, JLabel.CENTER);panelButtom.add(labelHelp, BorderLayout.CENTER);labelHelp &#x3D; new JLabel(&quot;SPACE or P for pause&quot;, JLabel.CENTER);panelButtom.add(labelHelp, BorderLayout.SOUTH);cp.add(panelButtom, BorderLayout.SOUTH);mainFrame.addKeyListener(control);mainFrame.pack();mainFrame.setResizable(false);mainFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);mainFrame.setVisible(true);&#125;void repaint() &#123;Graphics g &#x3D; paintCanvas.getGraphics();&#x2F;&#x2F; draw backgroundg.setColor(Color.WHITE);g.fillRect(0, 0, canvasWidth, canvasHeight);&#x2F;&#x2F; draw the snakeg.setColor(Color.BLACK);LinkedList na &#x3D; model.nodeArray;Iterator it &#x3D; na.iterator();while (it.hasNext()) &#123;Node n &#x3D; (Node) it.next();drawNode(g, n);&#125;&#x2F;&#x2F; draw the foodg.setColor(Color.RED);Node n &#x3D; model.food;drawNode(g, n);updateScore();&#125;private void drawNode(Graphics g, Node n) &#123;g.fillRect(n.x * nodeWidth, n.y * nodeHeight, nodeWidth - 1,nodeHeight - 1);&#125;public void updateScore() &#123;String s &#x3D; &quot;Score: &quot; + model.score;labelScore.setText(s);&#125;public void update(Observable o, Object arg) &#123;repaint();&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><p><img src="1.png"></p><p><img src="2.png"></p><p>更多知识关注微信公众号“51学代码”</p><p><img src="51x.png"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>仿Windows下的记事本程序</title>
      <link href="year/11/30/e_fang_windows_xia_ji_shi_ben_xiao_cheng_xu/"/>
      <url>year/11/30/e_fang_windows_xia_ji_shi_ben_xiao_cheng_xu/</url>
      
        <content type="html"><![CDATA[<p>在 Windows 操作系统中，记事本是一个小的应用程序，采用一个简单的文本编辑器进行文字信息的记 </p><p>录和存储。请仿照 Windows 的记事本，开发一个属于自己的记事本（Notepad）功能</p><p>记事本的应该具备的功能，基本要求如下： </p><p>（1） 菜单栏中包含文件、编辑、查看和帮助菜单，具体如下图所示。 </p><p><img src="1.png"></p><p>（2） 文件菜单中具有新建、打开、保存、另存为、打印和退出功能，具体如下图所示。</p><p><img src="2.png"></p><p>（3） 编辑菜单中具有的功能有撤销、重做、剪切、复制、粘贴、删除、全选以及查找和替换，具 </p><p>体如下图所示。</p><p><img src="3.png"></p><p>（4） 查看菜单中具有的功能包括字体、颜色等，具体如下图所示。</p><p><img src="4.png"></p><p>（5） 帮助菜单中的“View Help…”可以查看帮助文档，“About Notepad…”可以查看记事本的当前 </p><p>版本。帮助菜单中具有的功能具体如下图所示。</p><p><img src="5.png"></p><p><img src="6.png"></p><p>(6) 程序代码如下所示：</p><p>AboutDialog.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">package notepad;import java.awt.Color;import java.awt.Font;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import javax.swing.ImageIcon;import javax.swing.JButton;import javax.swing.JDialog;import javax.swing.JFrame;import javax.swing.JLabel;import javax.swing.JPanel;public class AboutDialog implements ActionListener &#123;public JDialog Dialog;public JButton OK, Icon;public JLabel Name, Version, Author, Java;public JPanel Panel;AboutDialog(JFrame notepad, int x, int y) &#123;Dialog &#x3D; new JDialog(notepad, &quot;About Notepad...&quot;, true);OK &#x3D; new JButton(&quot;OK&quot;);Icon &#x3D; new JButton(new ImageIcon(&quot;Notepad.jpg&quot;));Name &#x3D; new JLabel(&quot;Notepad&quot;);Version &#x3D; new JLabel(&quot;Version 1.0&quot;);Java &#x3D; new JLabel(&quot;JRE Version 6.0&quot;);Author &#x3D; new JLabel(&quot;Copyright (c) 2011 Sky. No rights reserved.&quot;);Panel &#x3D; new JPanel();Color c &#x3D; new Color(0, 95, 191);Name.setForeground(c);Version.setForeground(c);Java.setForeground(c);Panel.setBackground(Color.WHITE);OK.setFocusable(false);Dialog.setSize(280, 180);Dialog.setLocation(x, y);Dialog.setResizable(false);Dialog.setLayout(null);Panel.setLayout(null);OK.addActionListener(this);Icon.setFocusable(false);Icon.setBorderPainted(false);Author.setFont(new Font(null, Font.PLAIN, 11));Panel.add(Icon);Panel.add(Name);Panel.add(Version);Panel.add(Author);Panel.add(Java);Dialog.add(Panel);Dialog.add(OK);Panel.setBounds(0, 0, 280, 100);OK.setBounds(180, 114, 72, 26);Name.setBounds(80, 10, 160, 20);Version.setBounds(80, 27, 160, 20);Author.setBounds(15, 70, 250, 20);Java.setBounds(80, 44, 160, 20);Icon.setBounds(16, 14, 48, 48);&#125;public void actionPerformed(ActionEvent e) &#123;Dialog.setVisible(false);&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ColorDialog.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">package notepad;import java.awt.Color;import java.awt.Component;import java.awt.Font;import java.awt.GridLayout;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.KeyEvent;import java.awt.event.KeyListener;import java.awt.event.WindowEvent;import java.awt.event.WindowListener;import javax.swing.JButton;import javax.swing.JDialog;import javax.swing.JFrame;import javax.swing.JLabel;import javax.swing.JPanel;import javax.swing.JTextArea;import javax.swing.JTextField;public class ColorDialog implements ActionListener, WindowListener&#123;public JDialog Dialog;public JLabel NFL,NBL,SFL,SBL;public JTextArea Normal,Selected;public JButton NFB,NBB,SFB,SBB,OK,Cancel,Reset;public Color NFC,NBC,SFC,SBC;public ColorChooser Chooser;public ColorDialog(JFrame notepad, int x, int y)&#123;NFC&#x3D;new Color(0,0,0);NBC&#x3D;new Color(249,249,251);SFC&#x3D;new Color(0,0,0);SBC&#x3D;new Color(191,207,223);Dialog&#x3D;new JDialog(notepad,&quot;Color...&quot;,true);NFL&#x3D;new JLabel(&quot;Normal Foreground:&quot;);NBL&#x3D;new JLabel(&quot;Normal Background:&quot;);SFL&#x3D;new JLabel(&quot;Selected Foreground:&quot;);SBL&#x3D;new JLabel(&quot;Selected Background:&quot;);Normal&#x3D;new JTextArea(&quot;\n    Normal    正常&quot;);Selected&#x3D;new JTextArea(&quot;\n    Selected  选中 &quot;);NFB&#x3D;new JButton(&quot;&quot;);NBB&#x3D;new JButton(&quot;&quot;);SFB&#x3D;new JButton(&quot;&quot;);SBB&#x3D;new JButton(&quot;&quot;);OK&#x3D;new JButton(&quot;OK&quot;);Cancel&#x3D;new JButton(&quot;Cancel&quot;);Reset&#x3D;new JButton(&quot;Reset&quot;);Chooser&#x3D;new ColorChooser(Dialog, x+65, y-15);Normal.setEditable(false);Normal.setFocusable(false);Normal.setFont(new Font(&quot;新宋体&quot;, 0, 16));Normal.setForeground(NFC);Normal.setBackground(NBC);Selected.setEditable(false);Selected.setFocusable(false);Selected.setFont(Normal.getFont());Selected.setForeground(SFC);Selected.setBackground(SBC);NFB.setBackground(NFC);NBB.setBackground(NBC);SFB.setBackground(SFC);SBB.setBackground(SBC);Dialog.setLayout(null);Dialog.setLocation(x, y);Dialog.setSize(410, 220);Dialog.setResizable(false);Reset.setFocusable(false);OK.setFocusable(false);Cancel.setFocusable(false);Dialog.add(Normal);Dialog.add(Selected);Dialog.add(NFL);Dialog.add(NBL);Dialog.add(SFL);Dialog.add(SBL);Dialog.add(SBB);Dialog.add(SFB);Dialog.add(NBB);Dialog.add(NFB);Dialog.add(OK);Dialog.add(Cancel);Dialog.add(Reset);SBB.setBounds(144, 100, 60, 22);SFB.setBounds(144, 70, 60, 22);NBB.setBounds(144, 40, 60, 22);NFB.setBounds(144, 10, 60, 22);NFL.setBounds(10, 10, 130, 22);NBL.setBounds(10, 40, 130, 22);SFL.setBounds(10, 70, 130, 22);SBL.setBounds(10, 100, 130, 22);Normal.setBounds(220, 10, 174, 56);Selected.setBounds(220, 66, 174, 56);Reset.setBounds(10, 160, 74, 24);OK.setBounds(236, 160, 74, 24);Cancel.setBounds(320, 160, 74, 24);Dialog.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);Dialog.addWindowListener(this);NFB.addActionListener(this);NBB.addActionListener(this);SFB.addActionListener(this);SBB.addActionListener(this);Reset.addActionListener(this);OK.addActionListener(this);Cancel.addActionListener(this);&#125;public void setTextAreaColor()&#123;Normal.setForeground(NFB.getBackground());Normal.setBackground(NBB.getBackground());Selected.setForeground(SFB.getBackground());Selected.setBackground(SBB.getBackground());&#125;public void cancel()&#123;Normal.setForeground(NFC);Normal.setBackground(NBC);Selected.setForeground(SFC);Selected.setBackground(SBC);NFB.setBackground(NFC);NBB.setBackground(NBC);SFB.setBackground(SFC);SBB.setBackground(SBC);Dialog.setVisible(false);&#125;public void actionPerformed(ActionEvent e) &#123;Object obj&#x3D;e.getSource();if(obj&#x3D;&#x3D;Reset)&#123;NFB.setBackground(new Color(0,0,0));NBB.setBackground(new Color(249,249,251));SFB.setBackground(new Color(0,0,0));SBB.setBackground(new Color(191,207,223));setTextAreaColor();&#125;else if(obj&#x3D;&#x3D;OK)&#123;NFC&#x3D;NFB.getBackground();NBC&#x3D;NBB.getBackground();SFC&#x3D;SFB.getBackground();SBC&#x3D;SBB.getBackground();Dialog.setVisible(false);&#125;else if(obj&#x3D;&#x3D;Cancel)cancel();else&#123;Chooser.init(((Component) obj).getBackground());Chooser.Dialog.setVisible(true);((Component) obj).setBackground(Chooser.New.getBackground());setTextAreaColor();&#125;&#125;public void windowClosing(WindowEvent e) &#123;cancel();&#125;public void windowActivated(WindowEvent arg0) &#123;&#125;public void windowClosed(WindowEvent arg0) &#123;&#125;public void windowDeactivated(WindowEvent arg0) &#123;&#125;public void windowDeiconified(WindowEvent arg0) &#123;&#125;public void windowIconified(WindowEvent arg0) &#123;&#125;public void windowOpened(WindowEvent arg0) &#123;&#125;&#125;class ColorChooser implements ActionListener,WindowListener,KeyListener&#123;JDialog Dialog;JButton Choice[][],Old,New,OK,Cancel;JPanel Panel;JTextField R,G,B;JLabel OldLabel,NewLabel,RL,GL,BL;ColorChooser(JDialog color,int x, int y)&#123;Dialog&#x3D;new JDialog(color,true);Choice&#x3D;new JButton[8][8];Panel&#x3D;new JPanel();Old&#x3D;new JButton(&quot;&quot;);New&#x3D;new JButton(&quot;&quot;);OldLabel&#x3D;new JLabel(&quot;Old:&quot;);NewLabel&#x3D;new JLabel(&quot;New:&quot;);RL&#x3D;new JLabel(&quot;R:&quot;);GL&#x3D;new JLabel(&quot;G:&quot;);BL&#x3D;new JLabel(&quot;B:&quot;);R&#x3D;new JTextField(&quot;&quot;);G&#x3D;new JTextField(&quot;&quot;);B&#x3D;new JTextField(&quot;&quot;);OK&#x3D;new JButton(&quot;OK&quot;);Cancel&#x3D;new JButton(&quot;Cancel&quot;);Panel.setLayout(new GridLayout(8,8,0,0));int i&#x3D;0,j&#x3D;0;Color c;Choice[0][7]&#x3D;new JButton(&quot;&quot;);Choice[0][7].setBackground(new Color(255,255,255));Choice[1][7]&#x3D;new JButton(&quot;&quot;);Choice[1][7].setBackground(new Color(255,223,191));Choice[2][7]&#x3D;new JButton(&quot;&quot;);Choice[2][7].setBackground(new Color(255,207,207));Choice[3][7]&#x3D;new JButton(&quot;&quot;);Choice[3][7].setBackground(new Color(223,191,255));Choice[4][7]&#x3D;new JButton(&quot;&quot;);Choice[4][7].setBackground(new Color(207,207,255));Choice[5][7]&#x3D;new JButton(&quot;&quot;);Choice[5][7].setBackground(new Color(191,223,255));Choice[6][7]&#x3D;new JButton(&quot;&quot;);Choice[6][7].setBackground(new Color(207,255,207));Choice[7][7]&#x3D;new JButton(&quot;&quot;);Choice[7][7].setBackground(new Color(223,255,191));for(i&#x3D;0;i&lt;8;i++)&#123;c&#x3D;Choice[i][7].getBackground();for(j&#x3D;0;j&lt;8;j++)&#123;if(j!&#x3D;7)&#123;Choice[i][j]&#x3D;new JButton(&quot;&quot;);Choice[i][j].setBackground(new Color(c.getRed()*(j+1)&#x2F;8,c.getGreen()*(j+1)&#x2F;8,c.getBlue()*(j+1)&#x2F;8));&#125;Choice[i][j].setFocusable(false);Choice[i][j].addActionListener(this);Panel.add(Choice[i][j]);&#125;&#125;Dialog.setSize(280,250);Dialog.setLayout(null);Dialog.setLocation(x, y);Dialog.setResizable(false);Dialog.add(Panel);Panel.setBounds(10, 10, 160, 160);Dialog.add(Old);Dialog.add(OldLabel);Old.setEnabled(false);Old.setBorderPainted(false);Old.setBounds(214, 10, 44, 22);OldLabel.setBounds(180, 10, 44, 22);Dialog.add(New);Dialog.add(NewLabel);New.setEnabled(false);New.setBorderPainted(false);New.setBounds(214, 32, 44, 22);NewLabel.setBounds(180, 32, 44, 22);Dialog.add(R);Dialog.add(G);Dialog.add(B);R.setBounds(214, 97, 44, 22);G.setBounds(214, 123, 44, 22);B.setBounds(214, 149, 44, 22);Dialog.add(RL);Dialog.add(GL);Dialog.add(BL);RL.setBounds(196, 97, 16, 22);GL.setBounds(196, 123, 16, 22);BL.setBounds(196, 149, 16, 22);Dialog.add(OK);Dialog.add(Cancel);OK.setFocusable(false);Cancel.setFocusable(false);OK.setBounds(106, 190, 74, 24);Cancel.setBounds(190, 190, 74, 24);OK.addActionListener(this);Cancel.addActionListener(this);G.addKeyListener(this);R.addKeyListener(this);B.addKeyListener(this);&#125;public void setText(Color c)&#123;R.setText(String.valueOf(c.getRed()));G.setText(String.valueOf(c.getGreen()));B.setText(String.valueOf(c.getBlue()));&#125;public void init(Color c)&#123;New.setBackground(c);Old.setBackground(c);setText(c);&#125;public void actionPerformed(ActionEvent e) &#123;Object obj&#x3D;e.getSource();if(obj&#x3D;&#x3D;OK) Dialog.setVisible(false);else if(obj&#x3D;&#x3D;Cancel)&#123;New.setBackground(Old.getBackground());Dialog.setVisible(false);&#125;else&#123;New.setBackground(((Component) obj).getBackground());setText(New.getBackground());&#125;&#125;public void windowClosing(WindowEvent e) &#123;New.setBackground(Old.getBackground());Dialog.setVisible(false);&#125;public void keyReleased(KeyEvent e) &#123;try&#123;int r,g,b;if(R.getText().length()&#x3D;&#x3D;0) r&#x3D;0;else r&#x3D;Integer.valueOf(R.getText());if(G.getText().length()&#x3D;&#x3D;0) g&#x3D;0;else g&#x3D;Integer.valueOf(G.getText());if(B.getText().length()&#x3D;&#x3D;0) b&#x3D;0;else b&#x3D;Integer.valueOf(B.getText());New.setBackground(new Color(r,g,b));&#125;catch(NumberFormatException nfe)&#123;setText(New.getBackground());&#125;catch(IllegalArgumentException iae)&#123;setText(New.getBackground());&#125;&#125;public void keyPressed(KeyEvent e) &#123;&#125;public void keyTyped(KeyEvent e) &#123;&#125;public void windowActivated(WindowEvent arg0) &#123;&#125;public void windowClosed(WindowEvent arg0) &#123;&#125;public void windowDeactivated(WindowEvent arg0) &#123;&#125;public void windowDeiconified(WindowEvent arg0) &#123;&#125;public void windowIconified(WindowEvent arg0) &#123;&#125;public void windowOpened(WindowEvent arg0) &#123;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>EnsureDialog.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">package notepad;import java.awt.BorderLayout;import java.awt.Color;import java.awt.FlowLayout;import java.awt.Font;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.WindowEvent;import java.awt.event.WindowListener;import javax.swing.JButton;import javax.swing.JDialog;import javax.swing.JFrame;import javax.swing.JLabel;import javax.swing.JPanel;public class EnsureDialog implements WindowListener, ActionListener &#123;public int YES, NO, CANCEL, Status;public JDialog Ensure;public JButton Yes, No, Cancel;public JLabel Question;public JPanel ButtonPanel, TextPanel;EnsureDialog(JFrame notepad, int x, int y) &#123;YES &#x3D; 0;NO &#x3D; 1;CANCEL &#x3D; 2;Status &#x3D; CANCEL;Ensure &#x3D; new JDialog(notepad, true);&#x2F;* * 这里的模式标志true的作用是使对话框处于notepad的上端， 并且当对话框显示时进程处于停滞状态， 直到对话框不再显示为止。在本程序中 * ，由于对对话框进行了事件监听处理，当对话框消失时状态标 志Status同时发生了变化 ，这样就可以在进程继续时获得新的Status值 *&#x2F;Yes &#x3D; new JButton(&quot;Yes&quot;);No &#x3D; new JButton(&quot;No&quot;);Cancel &#x3D; new JButton(&quot;Cancel&quot;);Question &#x3D; new JLabel(&quot;  Do you want to save changes to the file?&quot;);ButtonPanel &#x3D; new JPanel();TextPanel &#x3D; new JPanel();ButtonPanel.setLayout(new FlowLayout(FlowLayout.CENTER, 16, 10));TextPanel.setLayout(new BorderLayout());Ensure.setLayout(new BorderLayout());ButtonPanel.add(Yes);ButtonPanel.add(No);ButtonPanel.add(Cancel);TextPanel.add(Question);Ensure.add(TextPanel, BorderLayout.CENTER);Ensure.add(ButtonPanel, BorderLayout.SOUTH);Ensure.setLocation(x, y);Ensure.setSize(360, 140);Ensure.setResizable(false);TextPanel.setBackground(Color.WHITE);Question.setFont(new Font(null, Font.PLAIN, 16));Question.setForeground(new Color(0, 95, 191));Yes.setFocusable(false);No.setFocusable(false);Cancel.setFocusable(false);Ensure.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);Ensure.addWindowListener(this);Yes.addActionListener(this);No.addActionListener(this);Cancel.addActionListener(this);&#125;public void actionPerformed(ActionEvent e) &#123;if (e.getSource() &#x3D;&#x3D; Yes)Status &#x3D; YES;else if (e.getSource() &#x3D;&#x3D; No)Status &#x3D; NO;else if (e.getSource() &#x3D;&#x3D; Cancel)Status &#x3D; CANCEL;Ensure.setVisible(false);&#125;public void windowClosing(WindowEvent e) &#123;Status &#x3D; CANCEL;Ensure.setVisible(false);&#125;public void windowActivated(WindowEvent e) &#123;&#125;public void windowClosed(WindowEvent e) &#123;&#125;public void windowDeactivated(WindowEvent e) &#123;&#125;public void windowDeiconified(WindowEvent e) &#123;&#125;public void windowIconified(WindowEvent e) &#123;&#125;public void windowOpened(WindowEvent e) &#123;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>FindAndReplace.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">package notepad;import java.awt.TextField;import javax.swing.ButtonGroup;import javax.swing.JButton;import javax.swing.JCheckBox;import javax.swing.JDialog;import javax.swing.JFrame;import javax.swing.JLabel;import javax.swing.JRadioButton;public class FindAndReplace &#123;public JDialog Dialog;public JButton FindNext, Replace, ReplaceAll, Finish;public JCheckBox MatchCase;public JRadioButton Up, Down;public ButtonGroup DirectionGroup;public JLabel FindWhat, ReplaceWith, Direction;public TextField FindText, ReplaceText;FindAndReplace(JFrame notepad) &#123;Dialog &#x3D; new JDialog(notepad, &quot;Find And Replace...&quot;, false);&#x2F;* * 与EnsureDialog不同的是 ， 这里的模式标志false使对话框始终处于notepad的上端 ， 但点击notepad * 时notepad会继续处于活动状态 ， 对话框则变成不活动状态 *&#x2F;FindNext &#x3D; new JButton(&quot;Find Next&quot;);Replace &#x3D; new JButton(&quot;Replace&quot;);ReplaceAll &#x3D; new JButton(&quot;Replace All&quot;);Finish &#x3D; new JButton(&quot;Finish&quot;);MatchCase &#x3D; new JCheckBox(&quot;Match Case&quot;, false);Down &#x3D; new JRadioButton(&quot;Down&quot;, true);Up &#x3D; new JRadioButton(&quot;Up&quot;, false);FindWhat &#x3D; new JLabel(&quot;Find What:&quot;);ReplaceWith &#x3D; new JLabel(&quot;Replace With:&quot;);Direction &#x3D; new JLabel(&quot;Direction:&quot;);FindText &#x3D; new TextField(&quot;&quot;);ReplaceText &#x3D; new TextField(&quot;&quot;);Dialog.setSize(380, 160);Dialog.setResizable(false);FindNext.setFocusable(false);Replace.setFocusable(false);ReplaceAll.setFocusable(false);MatchCase.setFocusable(false);Finish.setFocusable(false);Up.setFocusable(false);Down.setFocusable(false);DirectionGroup &#x3D; new ButtonGroup();Dialog.setLayout(null);FindWhat.setBounds(10, 12, 80, 22);ReplaceWith.setBounds(10, 42, 80, 22);FindText.setBounds(95, 12, 160, 22);ReplaceText.setBounds(95, 42, 160, 22);FindNext.setBounds(265, 12, 98, 22);Replace.setBounds(265, 42, 98, 22);ReplaceAll.setBounds(265, 72, 98, 22);Direction.setBounds(10, 72, 80, 22);MatchCase.setBounds(6, 102, 98, 22);Down.setBounds(95, 72, 80, 22);Up.setBounds(175, 72, 80, 22);Finish.setBounds(265, 102, 98, 22);DirectionGroup.add(Up);DirectionGroup.add(Down);Dialog.add(FindWhat);Dialog.add(MatchCase);Dialog.add(FindText);Dialog.add(FindNext);Dialog.add(Direction);Dialog.add(ReplaceWith);Dialog.add(ReplaceText);Dialog.add(Replace);Dialog.add(ReplaceAll);Dialog.add(Finish);Dialog.add(Down);Dialog.add(Up);&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>FontDialog.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">package notepad;import java.awt.Font;import java.awt.GraphicsEnvironment;import java.awt.List;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.ItemEvent;import java.awt.event.ItemListener;import java.awt.event.WindowEvent;import java.awt.event.WindowListener;import javax.swing.JButton;import javax.swing.JCheckBox;import javax.swing.JDialog;import javax.swing.JFrame;import javax.swing.JTextArea;public class FontDialog implements ItemListener, ActionListener, WindowListener&#123;public JDialog Dialog;public JCheckBox Bold,Italic;public List Size,Name;public int FontName;public int FontStyle;public int FontSize;public JButton OK,Cancel;public JTextArea Text;FontDialog(JFrame notepad, int x, int y) &#123;GraphicsEnvironment g&#x3D;GraphicsEnvironment.getLocalGraphicsEnvironment(); String name[]&#x3D;g.getAvailableFontFamilyNames();Bold&#x3D;new JCheckBox(&quot;Bold&quot;,false);Italic&#x3D;new JCheckBox(&quot;Italic&quot;,false);Dialog&#x3D;new JDialog(notepad,&quot;Font...&quot;,true);Text&#x3D;new JTextArea(&quot;字体预览用例\n9876543210\nAaBbCcXxYyZz&quot;);OK&#x3D;new JButton(&quot;OK&quot;);Cancel&#x3D;new JButton(&quot;Cancel&quot;);Size&#x3D;new List();Name&#x3D;new List();int i&#x3D;0;Name.add(&quot;Default Value&quot;);for(i&#x3D;0;i&lt;name.length;i++) Name.add(name[i]);for(i&#x3D;8;i&lt;257;i++) Size.add(String.valueOf(i));FontName&#x3D;0;FontStyle&#x3D;0;FontSize&#x3D;8;Dialog.setLayout(null);Dialog.setLocation(x, y);Dialog.setSize(480, 306);Dialog.setResizable(false);OK.setFocusable(false);Cancel.setFocusable(false);Bold.setFocusable(false);Italic.setFocusable(false);Name.setFocusable(false);Size.setFocusable(false);Name.setBounds(10, 10, 212, 259);Dialog.add(Name);Bold.setBounds(314, 10, 64, 22);Dialog.add(Bold);Italic.setBounds(388, 10, 64, 22);Dialog.add(Italic);Size.setBounds(232, 10, 64, 259);Dialog.add(Size);Text.setBounds(306, 40, 157, 157);Dialog.add(Text);OK.setBounds(306, 243, 74, 26);Dialog.add(OK);Cancel.setBounds(390, 243, 74, 26);Dialog.add(Cancel);Name.select(FontName);Size.select(FontSize);Text.setFont(getFont());Dialog.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);Name.addItemListener(this);Size.addItemListener(this);Bold.addItemListener(this);Italic.addItemListener(this);OK.addActionListener(this);Cancel.addActionListener(this);Dialog.addWindowListener(this);&#125;public void itemStateChanged(ItemEvent e) &#123;Text.setFont(getFont());&#125;public void actionPerformed(ActionEvent e) &#123;if(e.getSource()&#x3D;&#x3D;OK)&#123;FontName&#x3D;Name.getSelectedIndex();FontStyle&#x3D;getStyle();FontSize&#x3D;Size.getSelectedIndex();Dialog.setVisible(false);&#125;else cancel();&#125;public void windowClosing(WindowEvent e) &#123;cancel();&#125;public Font getFont()&#123;if(Name.getSelectedIndex()&#x3D;&#x3D;0) return new Font(&quot;新宋体&quot;,getStyle(),Size.getSelectedIndex()+8);else return new Font(Name.getSelectedItem(),getStyle(),Size.getSelectedIndex()+8);&#125;public void cancel()&#123;Name.select(FontName);Size.select(FontSize);setStyle();Text.setFont(getFont());Dialog.setVisible(false);&#125;public void setStyle()&#123;if(FontStyle&#x3D;&#x3D;0 || FontStyle&#x3D;&#x3D;2) Bold.setSelected(false);else Bold.setSelected(true);if(FontStyle&#x3D;&#x3D;0 || FontStyle&#x3D;&#x3D;1) Italic.setSelected(false);else Italic.setSelected(true);&#125;public int getStyle()&#123;int bold&#x3D;0,italic&#x3D;0;if(Bold.isSelected()) bold&#x3D;1;if(Italic.isSelected()) italic&#x3D;1;return bold+italic*2;&#125;public void windowActivated(WindowEvent arg0) &#123;&#125;public void windowClosed(WindowEvent arg0) &#123;&#125;public void windowDeactivated(WindowEvent arg0) &#123;&#125;public void windowDeiconified(WindowEvent arg0) &#123;&#125;public void windowIconified(WindowEvent arg0) &#123;&#125;public void windowOpened(WindowEvent arg0) &#123;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>MenuList.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">package notepad;import javax.swing.JCheckBoxMenuItem;import javax.swing.JMenu;import javax.swing.JMenuBar;import javax.swing.JMenuItem;import javax.swing.KeyStroke;public class MenuList&#123;public JMenuBar Menu;public JMenu File, Edit, View, Help;public JMenuItemNew,Open,Save,SaveAs,Print,Exit,ViewHelp,AboutNotepad,Font,Color,Undo,Redo,Cut,Copy,Paste,Delete,SelectAll,FindAndReplace;public JCheckBoxMenuItem WordWrap,Truncation;MenuList()&#123;Menu&#x3D;new JMenuBar();File&#x3D;new JMenu(&quot; File &quot;);New&#x3D;new JMenuItem(&quot;New&quot;);Open&#x3D;new JMenuItem(&quot;Open...&quot;);Save&#x3D;new JMenuItem(&quot;Save&quot;);SaveAs&#x3D;new JMenuItem(&quot;Save As...&quot;);Print&#x3D;new JMenuItem(&quot;Print...&quot;);Exit&#x3D;new JMenuItem(&quot;Exit&quot;);Help&#x3D;new JMenu(&quot; Help &quot;);ViewHelp&#x3D;new JMenuItem(&quot;View Help...&quot;);AboutNotepad&#x3D;new JMenuItem(&quot;About Notepad...&quot;);View&#x3D;new JMenu(&quot; View &quot;);WordWrap&#x3D;new JCheckBoxMenuItem(&quot;Word Wrap&quot;,true);Truncation&#x3D;new JCheckBoxMenuItem(&quot;Truncation&quot;,false);Font&#x3D;new JMenuItem(&quot;Font...&quot;);Color&#x3D;new JMenuItem(&quot;Color...&quot;);Edit&#x3D;new JMenu(&quot; Edit &quot;);Undo&#x3D;new JMenuItem(&quot;Undo&quot;);Redo&#x3D;new JMenuItem(&quot;Redo&quot;);Cut&#x3D;new JMenuItem(&quot;Cut&quot;);Copy&#x3D;new JMenuItem(&quot;Copy&quot;);Paste&#x3D;new JMenuItem(&quot;Paste&quot;);Delete&#x3D;new JMenuItem(&quot;Delete&quot;);SelectAll&#x3D;new JMenuItem(&quot;Select All&quot;);FindAndReplace&#x3D;new JMenuItem(&quot;Find And Replace...&quot;);Undo.setEnabled(false);Redo.setEnabled(false);Edit.add(Undo);Edit.add(Redo);Edit.addSeparator();Edit.add(Cut);Edit.add(Copy);Edit.add(Paste);Edit.add(Delete);Edit.addSeparator();Edit.add(SelectAll);Edit.add(FindAndReplace);View.add(WordWrap);View.add(Truncation);View.addSeparator();View.add(Font);View.add(Color);Help.add(ViewHelp);Help.add(AboutNotepad);File.add(New);File.add(Open);File.addSeparator();File.add(Save);File.add(SaveAs);File.addSeparator();File.add(Print);File.add(Exit);Menu.add(File);Menu.add(Edit);Menu.add(View);Menu.add(Help);New.setAccelerator(KeyStroke.getKeyStroke(&#39;N&#39;,128));Open.setAccelerator(KeyStroke.getKeyStroke(&#39;O&#39;,128));Save.setAccelerator(KeyStroke.getKeyStroke(&#39;S&#39;,128));Print.setAccelerator(KeyStroke.getKeyStroke(&#39;P&#39;,128));Undo.setAccelerator(KeyStroke.getKeyStroke(&#39;Z&#39;,128));Redo.setAccelerator(KeyStroke.getKeyStroke(&#39;Y&#39;,128));Cut.setAccelerator(KeyStroke.getKeyStroke(&#39;X&#39;,128));Copy.setAccelerator(KeyStroke.getKeyStroke(&#39;C&#39;,128));Paste.setAccelerator(KeyStroke.getKeyStroke(&#39;V&#39;,128));Delete.setAccelerator(KeyStroke.getKeyStroke(127,0));SelectAll.setAccelerator(KeyStroke.getKeyStroke(&#39;A&#39;,128));&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>TextArea.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">package notepad;import java.awt.Toolkit;import java.awt.datatransfer.Clipboard;import java.awt.datatransfer.DataFlavor;import java.awt.datatransfer.Transferable;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.ItemEvent;import java.awt.event.ItemListener;import java.awt.event.MouseEvent;import java.awt.event.MouseListener;import java.io.BufferedWriter;import java.io.FileReader;import java.io.FileWriter;import java.io.IOException;import javax.swing.JFrame;import javax.swing.JMenuItem;import javax.swing.JPopupMenu;import javax.swing.JScrollPane;import javax.swing.JTextArea;import javax.swing.event.MenuEvent;import javax.swing.event.MenuListener;import javax.swing.event.UndoableEditEvent;import javax.swing.event.UndoableEditListener;import javax.swing.undo.UndoManager;public class TextArea extends JTextArea implements MouseListener,UndoableEditListener,MenuListener,ActionListener,ItemListener&#123;private static final long serialVersionUID &#x3D; 1L;public boolean Saved;public String Name,Path;public JScrollPane Pane;public JPopupMenu Popup;public JMenuItem Redo,Undo,Cut,Copy,Paste,Delete,SelectAll,FindAndReplace;public UndoManager Manager;public MenuList menu;public FindAndReplace find;TextArea(JFrame notepad,int x,int y)&#123;super();Saved&#x3D;true;Name&#x3D;null;Path&#x3D;null;Popup&#x3D;new JPopupMenu();Undo&#x3D;new JMenuItem(&quot;  Undo&quot;);Redo&#x3D;new JMenuItem(&quot;  Redo&quot;);Cut&#x3D;new JMenuItem(&quot;  Cut&quot;);Copy&#x3D;new JMenuItem(&quot;  Copy&quot;);Paste&#x3D;new JMenuItem(&quot;  Paste&quot;);Delete&#x3D;new JMenuItem(&quot;  Delete&quot;);SelectAll&#x3D;new JMenuItem(&quot;  Select All&quot;);FindAndReplace&#x3D;new JMenuItem(&quot;  Find And Replace...&quot;);Pane&#x3D;new JScrollPane(this);Manager&#x3D;new UndoManager();menu&#x3D;new MenuList();find&#x3D;new FindAndReplace(notepad);find.Dialog.setLocation(x,y);Undo.setEnabled(false);Redo.setEnabled(false);setLineWrap(true);setWrapStyleWord(true);Manager.setLimit(-1);Popup.add(Undo);Popup.add(Redo);Popup.addSeparator();Popup.add(Cut);Popup.add(Copy);Popup.add(Paste);Popup.add(Delete);Popup.addSeparator();Popup.add(SelectAll);Popup.add(FindAndReplace);add(Popup);menu.Edit.addMenuListener(this);menu.WordWrap.addItemListener(this);menu.Truncation.addItemListener(this);getDocument().addUndoableEditListener(this);addMouseListener(this);find.FindNext.addActionListener(this);find.Replace.addActionListener(this);find.ReplaceAll.addActionListener(this);find.Finish.addActionListener(this);&#125;public void saveFile()&#123;try &#123;FileWriter fw &#x3D; new FileWriter(Path+Name,false);BufferedWriter bw&#x3D;new BufferedWriter(fw);bw.write(getText());bw.close();fw.close();Saved&#x3D;true;&#125; catch (IOException e)&#123;&#125;&#125;public void openFile()&#123;try &#123;int c;StringBuffer sb&#x3D;new StringBuffer();FileReader fr&#x3D;new FileReader(Path+Name);setText(null);while((c&#x3D;fr.read())!&#x3D;-1)sb.append((char)c);setText(sb.toString());Saved&#x3D;true;fr.close();Undo.setEnabled(false);Redo.setEnabled(false);menu.Undo.setEnabled(false);menu.Redo.setEnabled(false);&#125;catch (IOException e)&#123;&#125;&#125;public void delete()&#123;int start&#x3D;getSelectionStart();int end&#x3D;getSelectionEnd();replaceRange(&quot;&quot;,start,end);&#125;public int lastOf(String s1,int i)&#123;String s&#x3D;getText();if(find.MatchCase.isSelected()) return s.lastIndexOf(s1,i);else&#123;s&#x3D;s.toLowerCase();return s.lastIndexOf(s1.toLowerCase(),i);&#125;&#125;public int nextOf(String s1,int i)&#123;String s&#x3D;getText();if(find.MatchCase.isSelected()) return s.indexOf(s1,i);else&#123;s&#x3D;s.toLowerCase();return s.indexOf(s1.toLowerCase(),i);&#125;&#125;public void actionPerformed(ActionEvent e)&#123;Object obj&#x3D;e.getSource();if(obj&#x3D;&#x3D;find.Finish) find.Dialog.setVisible(false);String s1&#x3D;find.FindText.getText();String s2&#x3D;find.ReplaceText.getText();int len1&#x3D;s1.length(),len2&#x3D;s2.length();if(len1&lt;1) return;int head&#x3D;getSelectionStart(),rear&#x3D;getSelectionEnd();if(obj&#x3D;&#x3D;find.Replace)&#123;if(head&lt;rear) replaceRange(s2,head,rear);else obj&#x3D;find.FindNext;&#125;if(obj&#x3D;&#x3D;find.FindNext)&#123;if(find.Up.isSelected())&#123;head&#x3D;lastOf(s1,head-len1);if(head&lt;0) return;select(head, head+len1);&#125;else&#123;rear&#x3D;nextOf(s1, rear);if(rear&lt;0) return;select(rear,rear+len1);&#125;&#125;else if(obj&#x3D;&#x3D;find.ReplaceAll)&#123;rear&#x3D;0;while(true)&#123;rear&#x3D;nextOf(s1,rear);if(rear&lt;0) return;replaceRange(s2,rear,rear+len1);rear&#x3D;rear+len2;setCaretPosition(rear);&#125;&#125;&#125;public void menuSelected(MenuEvent e)&#123;Clipboard Board&#x3D;Toolkit.getDefaultToolkit().getSystemClipboard();Transferable contents &#x3D; Board.getContents(Board);DataFlavor flavor &#x3D; DataFlavor.stringFlavor;if(contents.isDataFlavorSupported(flavor))menu.Paste.setEnabled(true);elsemenu.Paste.setEnabled(false);if(getSelectedText()!&#x3D;null)&#123;menu.Cut.setEnabled(true);menu.Copy.setEnabled(true);menu.Delete.setEnabled(true);&#125;else&#123;menu.Cut.setEnabled(false);menu.Copy.setEnabled(false);menu.Delete.setEnabled(false);&#125;if(getText().isEmpty())&#123;menu.SelectAll.setEnabled(false);menu.FindAndReplace.setEnabled(false);&#125;else&#123;menu.SelectAll.setEnabled(true);menu.FindAndReplace.setEnabled(true);&#125;&#125;public void undoableEditHappened(UndoableEditEvent e)&#123;Manager.addEdit(e.getEdit());Saved&#x3D;false;menu.Undo.setEnabled(true);Undo.setEnabled(true);menu.Redo.setEnabled(false);Redo.setEnabled(false);&#125;public void mouseReleased(MouseEvent e) &#123;if(e.isPopupTrigger())&#123;Clipboard Board&#x3D;Toolkit.getDefaultToolkit().getSystemClipboard();Transferable contents &#x3D; Board.getContents(Board);DataFlavor flavor &#x3D; DataFlavor.stringFlavor;if(contents.isDataFlavorSupported(flavor))Paste.setEnabled(true);elsePaste.setEnabled(false);if(getSelectedText()!&#x3D;null)&#123;Cut.setEnabled(true);Copy.setEnabled(true);Delete.setEnabled(true);&#125;else&#123;Cut.setEnabled(false);Copy.setEnabled(false);Delete.setEnabled(false);&#125;if(getText().isEmpty())&#123;SelectAll.setEnabled(false);FindAndReplace.setEnabled(false);&#125;else&#123;SelectAll.setEnabled(true);FindAndReplace.setEnabled(true);&#125;Popup.show(this,e.getX(),e.getY());&#125;&#125;public void itemStateChanged(ItemEvent e) &#123;if(e.getSource()&#x3D;&#x3D;menu.WordWrap)&#123;setLineWrap(menu.WordWrap.isSelected());menu.Truncation.setEnabled(menu.WordWrap.isSelected());&#125;elsesetWrapStyleWord(!menu.Truncation.isSelected());&#125;public void mousePressed(MouseEvent e) &#123;&#125;public void mouseClicked(MouseEvent e) &#123;&#125;public void mouseEntered(MouseEvent e) &#123;&#125;public void mouseExited(MouseEvent e) &#123;&#125;public void menuCanceled(MenuEvent e) &#123;&#125;public void menuDeselected(MenuEvent e) &#123;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Notepad.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">package notepad;import java.awt.Dimension;import java.awt.FileDialog;import java.awt.Image;import java.awt.Toolkit;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.WindowEvent;import java.awt.event.WindowListener;import java.awt.print.PrinterException;import javax.swing.JFrame;public class Notepad implements ActionListener,WindowListener&#123;static Dimension screen&#x3D;Toolkit.getDefaultToolkit().getScreenSize();static Image icon&#x3D;Toolkit.getDefaultToolkit().getImage(&quot;Notepad.png&quot;);JFrame notepad;EnsureDialog ensure;TextArea text;FileDialog dialog;FontDialog font;ColorDialog color;AboutDialog about;Notepad()&#123;notepad&#x3D;new JFrame(&quot;Notepad&quot;);dialog&#x3D;new FileDialog(notepad);text&#x3D;new TextArea(notepad,screen.width&#x2F;2-190,screen.height&#x2F;2-90);ensure&#x3D;new EnsureDialog(notepad,screen.width&#x2F;2-180,screen.height&#x2F;2-80);font&#x3D;new FontDialog(notepad,screen.width&#x2F;2-240,screen.height&#x2F;2-150);color&#x3D;new ColorDialog(notepad,screen.width&#x2F;2-205,screen.height&#x2F;2-110);about&#x3D;new AboutDialog(notepad,screen.width&#x2F;2-140,screen.height&#x2F;2-100);notepad.setJMenuBar(text.menu.Menu);notepad.add(text.Pane);notepad.setSize(640,420);notepad.setLocation(screen.width&#x2F;2-320,screen.height&#x2F;2-220);notepad.setMinimumSize(new Dimension(185,185));notepad.setIconImage(icon);notepad.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);notepad.addWindowListener(this);text.setFont(font.getFont());text.setForeground(color.NFC);text.setBackground(color.NBC);text.setSelectedTextColor(color.SFC);text.setSelectionColor(color.SBC);text.menu.Save.addActionListener(this);text.menu.SaveAs.addActionListener(this);text.menu.Open.addActionListener(this);text.menu.New.addActionListener(this);text.menu.Exit.addActionListener(this);text.menu.Undo.addActionListener(this);text.menu.Redo.addActionListener(this);text.menu.Cut.addActionListener(this);text.menu.Copy.addActionListener(this);text.menu.Paste.addActionListener(this);text.menu.Delete.addActionListener(this);text.menu.SelectAll.addActionListener(this);text.menu.FindAndReplace.addActionListener(this);text.menu.WordWrap.addActionListener(this);text.menu.Truncation.addActionListener(this);text.menu.Font.addActionListener(this);text.menu.Color.addActionListener(this);text.menu.ViewHelp.addActionListener(this);text.menu.AboutNotepad.addActionListener(this);text.Undo.addActionListener(this);text.Redo.addActionListener(this);text.Cut.addActionListener(this);text.Copy.addActionListener(this);text.Paste.addActionListener(this);text.Delete.addActionListener(this);text.SelectAll.addActionListener(this);text.FindAndReplace.addActionListener(this);&#125;public void windowClosing(WindowEvent e) &#123;if(text.Saved) System.exit(0);else ensure.Ensure.setVisible(true);if(ensure.Status&#x3D;&#x3D;ensure.YES &amp;&amp; saveFile()) System.exit(0);else if(ensure.Status&#x3D;&#x3D;ensure.NO) System.exit(0);&#125;public void actionPerformed(ActionEvent e) &#123;Object obj&#x3D;e.getSource();if(obj&#x3D;&#x3D;text.menu.Save) saveFile();else if(obj&#x3D;&#x3D;text.menu.SaveAs) saveAsFile();else if(obj&#x3D;&#x3D;text.menu.New)&#123;if(!(text.Saved))&#123;ensure.Ensure.setVisible(true);if(ensure.Status&#x3D;&#x3D;ensure.YES &amp;&amp; saveFile())&#123;&#125;else if(ensure.Status&#x3D;&#x3D;ensure.NO)&#123;&#125;else return;&#125;newFile();&#125;else if(obj&#x3D;&#x3D;text.menu.Open)&#123;if(!(text.Saved))&#123;ensure.Ensure.setVisible(true);if(ensure.Status&#x3D;&#x3D;ensure.YES &amp;&amp; saveFile())&#123;&#125;else if(ensure.Status&#x3D;&#x3D;ensure.NO)&#123;&#125;else return;&#125;openFile();&#125;else if(obj&#x3D;&#x3D;text.menu.Print)&#123;try &#123;text.print();&#125; catch (PrinterException pe)&#123;&#125;&#125;else if(obj&#x3D;&#x3D;text.menu.Exit)&#123;if(text.Saved) System.exit(0);else ensure.Ensure.setVisible(true);if(ensure.Status&#x3D;&#x3D;ensure.YES &amp;&amp; saveFile()) System.exit(0);else if(ensure.Status&#x3D;&#x3D;ensure.NO) System.exit(0);&#125;else if(obj&#x3D;&#x3D;text.menu.Undo || obj&#x3D;&#x3D;text.Undo)&#123;text.Manager.undo();text.Saved&#x3D;false;text.menu.Redo.setEnabled(true);text.Redo.setEnabled(true);if(!text.Manager.canUndo())&#123;text.menu.Undo.setEnabled(false);text.Undo.setEnabled(false);&#125;&#125;else if(obj&#x3D;&#x3D;text.menu.Redo || obj&#x3D;&#x3D;text.Redo)&#123;text.Manager.redo();text.Saved&#x3D;false;text.menu.Undo.setEnabled(true);text.Undo.setEnabled(true);if(!text.Manager.canRedo())&#123;text.menu.Redo.setEnabled(false);text.Redo.setEnabled(false);&#125;&#125;else if(obj&#x3D;&#x3D;text.Cut || obj&#x3D;&#x3D;text.menu.Cut)&#123;text.cut();&#125;else if(obj&#x3D;&#x3D;text.Copy || obj&#x3D;&#x3D;text.menu.Copy)&#123;text.copy();&#125;else if(obj&#x3D;&#x3D;text.Paste || obj&#x3D;&#x3D;text.menu.Paste)&#123;text.paste();&#125;else if(obj&#x3D;&#x3D;text.Delete || obj&#x3D;&#x3D;text.menu.Delete)&#123;text.delete();&#125;else if(obj&#x3D;&#x3D;text.SelectAll || obj&#x3D;&#x3D;text.menu.SelectAll)&#123;text.selectAll();&#125;else if(obj&#x3D;&#x3D;text.FindAndReplace || obj&#x3D;&#x3D;text.menu.FindAndReplace)&#123;text.find.Dialog.setVisible(true);&#125;else if(obj&#x3D;&#x3D;text.menu.Font)&#123;font.Dialog.setVisible(true);if(text.getFont()!&#x3D;font.getFont())text.setFont(font.getFont());&#125;else if(obj&#x3D;&#x3D;text.menu.Color)&#123;color.Dialog.setVisible(true);text.setForeground(color.NFC);text.setBackground(color.NBC);text.setSelectedTextColor(color.SFC);text.setSelectionColor(color.SBC);text.setCaretColor(color.NFC);&#125;else if(obj&#x3D;&#x3D;text.menu.AboutNotepad)&#123;about.Dialog.setVisible(true);&#125;&#125;public boolean saveFile()&#123;if(text.Name&#x3D;&#x3D;null)&#123;dialog.setMode(FileDialog.SAVE);dialog.setTitle(&quot;Save As...&quot;);dialog.setFile(&quot;Untitled.txt&quot;);dialog.setVisible(true);text.Path&#x3D;dialog.getDirectory();text.Name&#x3D;dialog.getFile();&#125;if(text.Name&#x3D;&#x3D;null) return false;text.saveFile();notepad.setTitle(text.Name+&quot; - Notepad&quot;);return true;&#125;public void saveAsFile()&#123;String path&#x3D;text.Path;String name&#x3D;text.Name;dialog.setMode(FileDialog.SAVE);dialog.setTitle(&quot;Save As...&quot;);if(text.Name&#x3D;&#x3D;null)dialog.setFile(&quot;Untitled.txt&quot;);else dialog.setFile(text.Name);dialog.setVisible(true);text.Path&#x3D;dialog.getDirectory();text.Name&#x3D;dialog.getFile();if(text.Name!&#x3D;null)&#123;text.saveFile();notepad.setTitle(text.Name+&quot; - Notepad&quot;);&#125;else&#123;text.Name&#x3D;name;text.Path&#x3D;path;&#125;&#125;public void openFile()&#123;String path&#x3D;text.Path;String name&#x3D;text.Name;dialog.setTitle(&quot;Open...&quot;);dialog.setMode(FileDialog.LOAD);dialog.setVisible(true);text.Path&#x3D;dialog.getDirectory();text.Name&#x3D;dialog.getFile();if(text.Name!&#x3D;null)&#123;text.openFile();notepad.setTitle(text.Name+&quot; - Notepad&quot;);&#125;else&#123;text.Name&#x3D;name;text.Path&#x3D;path;&#125;&#125;public void newFile()&#123;text.Path&#x3D;null;text.Name&#x3D;null;text.setText(null);notepad.setTitle(&quot;Notepad&quot;);text.Saved&#x3D;true;text.Undo.setEnabled(false);text.Redo.setEnabled(false);text.menu.Undo.setEnabled(false);text.menu.Redo.setEnabled(false);&#125;public static void main(String s[])&#123;System.setProperty(&quot;java.awt.im.style&quot;,&quot;on-the-spot&quot;); &#x2F;&#x2F;去除输入中文时的浮动框Notepad np&#x3D;new Notepad();np.notepad.setVisible(true);&#125;public void windowActivated(WindowEvent arg0) &#123;&#125;public void windowClosed(WindowEvent arg0) &#123;&#125;public void windowDeactivated(WindowEvent arg0) &#123;&#125;public void windowDeiconified(WindowEvent arg0) &#123;&#125;public void windowIconified(WindowEvent arg0) &#123;&#125;public void windowOpened(WindowEvent arg0) &#123;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>更多知识关注微信公众号”51学代码”</p><p><img src="51x.png"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算器小程序</title>
      <link href="year/11/28/f_ji_suan_qi_xiao_cheng_xu/"/>
      <url>year/11/28/f_ji_suan_qi_xiao_cheng_xu/</url>
      
        <content type="html"><![CDATA[<p>  该程序是一个图形界面的简单 Java 计算器，具有良好的界面，使用人员能快捷简单的进行加、减、 乘、除、操作。其程序要求为设计一个图形界面（GUI）的计算器应用程序，完成简单的加法、减法、乘 法、除法运算，且参与计算的数字和所得结果可以有小数点、正负号，同时还要具备清零功能。</p><p>一、需求分析 根据项目简介中的项目要求，我们将其具体需求做如下分析： 1. 要使用 java 的 GUI 设计出计算器界面。 2. 通过界面按钮，可以进行加减乘除运算，并能将结果显示在界面中。 3. 计算可以有小数点，和正负整数的计算。 4. 要有清零功能。 </p><p>二、设计思路： 分析完项目需求后，接下来让我们看一下项目的设计思路。 1.本应用程序继承自框架类（Frame），此程序使用 Frame 布局管理器 BorderLayout，将包含单行文本 框和清零按钮的 Panel2 加入到“North”区域，包含各种按钮的面板 Panel1 加入到”Center”区域。包 含各种按钮的面板 Panel1 采用 4 行 4 列的网格布局，然后将数字按钮和运算符按钮以及控制按钮添加到 面板中。 2.项目中要注册按钮事件监听器 ActionListener；事件监听器中的事件处理方法 public void actionPerformed(ActionEvent evt)完成主要的按钮事件的处理。 3.事件处理分以下几种情况：数字按钮事件（”0”，”1”，”2”„”8”，”9”）、运算符按钮事件（”+”，” －“，”*”，”/”）小数点按钮事件（”.”）、等号按钮事件（”＝”）、清楚按钮事件(“CE”)。 4.计算器完成的是一个数学表达式，里面涉及到的就是加、减、乘、除的基本操作，仅需定义一个变 量来保存运算操作的前一个数字，与当前在计算器上的显示数字进行计算即可。</p><p> 代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">package jzjsfx;import java.awt.*;import java.awt.event.*;import javax.swing.*;import java.util.*;class Calculator implements ActionListener &#123;JButton b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15,b16;JFrame f;GridLayout c &#x3D; new GridLayout(4, 4);JTextField tf &#x3D; new JTextField();public void init() &#123;f &#x3D; new JFrame(&quot;CardLayout testing&quot;);Container ct &#x3D; f.getContentPane();tf.setHorizontalAlignment(JTextField.RIGHT);ct.add(tf, &quot;North&quot;);JPanel p2 &#x3D; new JPanel();ct.add(p2, &quot;Center&quot;);GridLayout c &#x3D; new GridLayout(4, 4);p2.setLayout(c);JButton b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16;b1 &#x3D; new JButton(&quot;1&quot;);b2 &#x3D; new JButton(&quot;2&quot;);b3 &#x3D; new JButton(&quot;3&quot;);b4 &#x3D; new JButton(&quot;4&quot;);b5 &#x3D; new JButton(&quot;5&quot;);b6 &#x3D; new JButton(&quot;6&quot;);b7 &#x3D; new JButton(&quot;7&quot;);b8 &#x3D; new JButton(&quot;8&quot;);b9 &#x3D; new JButton(&quot;9&quot;);b10 &#x3D; new JButton(&quot;0&quot;);b11 &#x3D; new JButton(&quot;.&quot;);b12 &#x3D; new JButton(&quot;&#x3D;&quot;);b13 &#x3D; new JButton(&quot;+&quot;);b14 &#x3D; new JButton(&quot;-&quot;);b15 &#x3D; new JButton(&quot;x&quot;);b16 &#x3D; new JButton(&quot;&#x2F;&quot;);p2.add(b1);b1.addActionListener(this);p2.add(b2);b2.addActionListener(this);p2.add(b3);b3.addActionListener(this);p2.add(b13);b13.addActionListener(this);p2.add(b4);b4.addActionListener(this);p2.add(b5);b5.addActionListener(this);p2.add(b6);b6.addActionListener(this);p2.add(b14);b14.addActionListener(this);p2.add(b7);b7.addActionListener(this);p2.add(b8);b8.addActionListener(this);p2.add(b9);b9.addActionListener(this);p2.add(b15);b15.addActionListener(this);p2.add(b10);b10.addActionListener(this);p2.add(b11);b11.addActionListener(this);p2.add(b12);b12.addActionListener(this);p2.add(b16);b16.addActionListener(this);f.addWindowListener(new WindowAdapter() &#123;public void windowClosing(WindowEvent e) &#123;System.exit(0);&#125;&#125;);f.setSize(200, 180);f.setVisible(true);&#125;double sum &#x3D; 0;Vector v &#x3D; new Vector(1, 1);Vector v2 &#x3D; new Vector(1, 1);public Calculator() &#123;v2.addElement(new String(&quot;init&quot;));v.addElement(new String(&quot;init&quot;));&#125;public void actionPerformed(ActionEvent e) &#123;String str &#x3D; tf.getText();&#x2F;&#x2F; 加号的实现if (e.getActionCommand() &#x3D;&#x3D; &quot;+&quot;) &#123;if ((&quot;+&quot;).equals((String) v2.lastElement())|| (&quot;-&quot;).equals((String) v2.lastElement())|| (&quot;x&quot;).equals((String) v2.lastElement())|| (&quot;&#x2F;&quot;).equals((String) v2.lastElement())|| (&quot;&#x3D;&quot;).equals((String) v2.lastElement())) &#123;tf.setText(String.valueOf(sum));&#125; else if ((&quot;init&quot;).equals((String) v2.lastElement())) &#123;tf.setText(String.valueOf(sum));v2.addElement(new String(&quot;&#x3D;&quot;));&#125; else &#123;double d &#x3D; Double.parseDouble(str);if ((&quot;+&quot;).equals((String) v.lastElement())) &#123;sum &#x3D; sum + d;tf.setText(String.valueOf(sum));&#125; else if ((&quot;-&quot;).equals((String) v.lastElement())) &#123;sum &#x3D; sum - d;tf.setText(String.valueOf(sum));&#125; else if ((&quot;x&quot;).equals((String) v.lastElement())) &#123;sum &#x3D; sum * d;tf.setText(String.valueOf(sum));&#125; else if ((&quot;&#x2F;&quot;).equals((String) v.lastElement())) &#123;sum &#x3D; sum &#x2F; d;tf.setText(String.valueOf(sum));&#125; else if ((&quot;&#x3D;&quot;).equals((String) v.lastElement())) &#123;sum &#x3D; sum + d;tf.setText(String.valueOf(sum));&#125; else &#123;sum &#x3D; sum + d;tf.setText(String.valueOf(sum));&#125;&#125;v.addElement(new String(&quot;+&quot;));v2.addElement(new String(&quot;+&quot;));&#125;&#x2F;&#x2F; 减号的实现if (e.getActionCommand() &#x3D;&#x3D; &quot;-&quot;) &#123;if ((&quot;+&quot;).equals((String) v2.lastElement())|| (&quot;-&quot;).equals((String) v2.lastElement())|| (&quot;x&quot;).equals((String) v2.lastElement())|| (&quot;&#x2F;&quot;).equals((String) v2.lastElement())|| (&quot;&#x3D;&quot;).equals((String) v2.lastElement())) &#123;tf.setText(String.valueOf(sum));&#125; else if ((&quot;init&quot;).equals((String) v2.lastElement())) &#123;tf.setText(String.valueOf(sum));v2.addElement(new String(&quot;&#x3D;&quot;));&#125; else &#123;double d &#x3D; Double.parseDouble(str);if ((&quot;+&quot;).equals((String) v.lastElement())) &#123;sum &#x3D; sum + d;tf.setText(String.valueOf(sum));&#125; else if ((&quot;-&quot;).equals((String) v.lastElement())) &#123;sum &#x3D; sum - d;tf.setText(String.valueOf(sum));&#125; else if ((&quot;x&quot;).equals((String) v.lastElement())) &#123;sum &#x3D; sum * d;tf.setText(String.valueOf(sum));&#125; else if ((&quot;&#x2F;&quot;).equals((String) v.lastElement())) &#123;sum &#x3D; sum &#x2F; d;tf.setText(String.valueOf(sum));&#125; else if ((&quot;&#x3D;&quot;).equals((String) v.lastElement())) &#123;sum &#x3D; sum + d;tf.setText(String.valueOf(sum));&#125; else &#123;sum &#x3D; sum + d;tf.setText(String.valueOf(sum));&#125;&#125;v.addElement(new String(&quot;-&quot;));v2.addElement(new String(&quot;-&quot;));&#125;&#x2F;&#x2F; 乘号的实现if (e.getActionCommand() &#x3D;&#x3D; &quot;x&quot;) &#123;if ((&quot;+&quot;).equals((String) v2.lastElement())|| (&quot;-&quot;).equals((String) v2.lastElement())|| (&quot;x&quot;).equals((String) v2.lastElement())|| (&quot;&#x2F;&quot;).equals((String) v2.lastElement())|| (&quot;&#x3D;&quot;).equals((String) v2.lastElement())) &#123;tf.setText(String.valueOf(sum));&#125; else if ((&quot;init&quot;).equals((String) v2.lastElement())) &#123;tf.setText(String.valueOf(sum));v2.addElement(new String(&quot;&#x3D;&quot;));&#125; else &#123;double d &#x3D; Double.parseDouble(str);if ((&quot;+&quot;).equals((String) v.lastElement())) &#123;sum &#x3D; sum + d;tf.setText(String.valueOf(sum));&#125; else if ((&quot;-&quot;).equals((String) v.lastElement())) &#123;sum &#x3D; sum - d;tf.setText(String.valueOf(sum));&#125; else if ((&quot;x&quot;).equals((String) v.lastElement())) &#123;sum &#x3D; sum * d;tf.setText(String.valueOf(sum));&#125; else if ((&quot;&#x2F;&quot;).equals((String) v.lastElement())) &#123;sum &#x3D; sum &#x2F; d;tf.setText(String.valueOf(sum));&#125; else if ((&quot;&#x3D;&quot;).equals((String) v.lastElement())) &#123;sum &#x3D; sum + d;tf.setText(String.valueOf(sum));&#125; else &#123;sum &#x3D; sum + d;tf.setText(String.valueOf(sum));&#125;&#125;v.addElement(new String(&quot;x&quot;));v2.addElement(new String(&quot;x&quot;));&#125;&#x2F;&#x2F; 除号的实现if (e.getActionCommand() &#x3D;&#x3D; &quot;&#x2F;&quot;) &#123;if ((&quot;+&quot;).equals((String) v2.lastElement())|| (&quot;-&quot;).equals((String) v2.lastElement())|| (&quot;x&quot;).equals((String) v2.lastElement())|| (&quot;&#x2F;&quot;).equals((String) v2.lastElement())|| (&quot;&#x3D;&quot;).equals((String) v2.lastElement())) &#123;tf.setText(String.valueOf(sum));&#125; else if ((&quot;init&quot;).equals((String) v2.lastElement())) &#123;tf.setText(String.valueOf(sum));v2.addElement(new String(&quot;&#x3D;&quot;));&#125; else &#123;double d &#x3D; Double.parseDouble(str);if ((&quot;+&quot;).equals((String) v.lastElement())) &#123;sum &#x3D; sum + d;tf.setText(String.valueOf(sum));&#125; else if ((&quot;-&quot;).equals((String) v.lastElement())) &#123;sum &#x3D; sum - d;tf.setText(String.valueOf(sum));&#125; else if ((&quot;x&quot;).equals((String) v.lastElement())) &#123;sum &#x3D; sum * d;tf.setText(String.valueOf(sum));&#125; else if ((&quot;&#x2F;&quot;).equals((String) v.lastElement())) &#123;sum &#x3D; sum &#x2F; d;tf.setText(String.valueOf(sum));&#125; else if ((&quot;&#x3D;&quot;).equals((String) v.lastElement())) &#123;sum &#x3D; sum + d;tf.setText(String.valueOf(sum));&#125; else &#123;sum &#x3D; sum + d;tf.setText(String.valueOf(sum));&#125;&#125;v.addElement(new String(&quot;&#x2F;&quot;));v2.addElement(new String(&quot;&#x2F;&quot;));&#125;&#x2F;&#x2F; 等号实现if (e.getActionCommand() &#x3D;&#x3D; &quot;&#x3D;&quot;) &#123;if ((&quot;+&quot;).equals((String) v2.lastElement())|| (&quot;-&quot;).equals((String) v2.lastElement())|| (&quot;x&quot;).equals((String) v2.lastElement())|| (&quot;&#x2F;&quot;).equals((String) v2.lastElement())|| (&quot;&#x3D;&quot;).equals((String) v2.lastElement())) &#123;tf.setText(String.valueOf(sum));&#125; else if ((&quot;init&quot;).equals((String) v2.lastElement())) &#123;tf.setText(String.valueOf(sum));&#125; else &#123;double d &#x3D; Double.parseDouble(str);if ((&quot;+&quot;).equals((String) v.lastElement())) &#123;sum &#x3D; sum + d;tf.setText(String.valueOf(sum));&#125; else if ((&quot;-&quot;).equals((String) v.lastElement())) &#123;sum &#x3D; sum - d;tf.setText(String.valueOf(sum));&#125; else if ((&quot;x&quot;).equals((String) v.lastElement())) &#123;sum &#x3D; sum * d;tf.setText(String.valueOf(sum));&#125; else if ((&quot;&#x2F;&quot;).equals((String) v.lastElement())) &#123;sum &#x3D; sum &#x2F; d;tf.setText(String.valueOf(sum));&#125; else if ((&quot;&#x3D;&quot;).equals((String) v.lastElement())) &#123;sum &#x3D; sum + d;tf.setText(String.valueOf(sum));&#x2F;&#x2F; tf.setText(String.valueOf(sum));&#125; else &#123;sum &#x3D; sum + d;tf.setText(String.valueOf(sum));&#125;&#125;v.addElement(new String(&quot;&#x3D;&quot;));v2.addElement(new String(&quot;&#x3D;&quot;));&#125;if (e.getActionCommand() &#x3D;&#x3D; &quot;1&quot; || e.getActionCommand() &#x3D;&#x3D; &quot;2&quot;|| e.getActionCommand() &#x3D;&#x3D; &quot;3&quot; || e.getActionCommand() &#x3D;&#x3D; &quot;4&quot;|| e.getActionCommand() &#x3D;&#x3D; &quot;5&quot; || e.getActionCommand() &#x3D;&#x3D; &quot;6&quot;|| e.getActionCommand() &#x3D;&#x3D; &quot;7&quot; || e.getActionCommand() &#x3D;&#x3D; &quot;8&quot;|| e.getActionCommand() &#x3D;&#x3D; &quot;9&quot; || e.getActionCommand() &#x3D;&#x3D; &quot;0&quot;|| e.getActionCommand() &#x3D;&#x3D; &quot;.&quot;) &#x2F;&#x2F; 1，2，3，4，5，6，7，8，9，0，.的实现；&#123;if ((&quot;+&quot;).equals((String) v2.lastElement())|| (&quot;-&quot;).equals((String) v2.lastElement())|| (&quot;x&quot;).equals((String) v2.lastElement())|| (&quot;&#x2F;&quot;).equals((String) v2.lastElement())|| (&quot;init&quot;).equals((String) v2.lastElement())) &#123;tf.setText(&quot;&quot;);tf.setText(e.getActionCommand());&#125; else if ((&quot;&#x3D;&quot;).equals((String) v2.lastElement())) &#123;sum &#x3D; 0;tf.setText(&quot;&quot;);tf.setText(e.getActionCommand());&#125; else &#123;tf.setText(tf.getText() + e.getActionCommand());&#x2F;&#x2F; 调用其父类中的getText()方法&#125;v2.addElement(new String(e.getActionCommand()));&#125;&#125;public static void main(String args[]) &#123;new Calculator().init();&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">package jzjsfx;import java.awt.*;import java.awt.event.*;import javax.swing.*;public class JCalculator extends JFrame implements ActionListener &#123;    &#x2F;** *  *&#x2F;private static final long serialVersionUID &#x3D; -6675736133730301893L;private class WindowCloser extends WindowAdapter &#123;   public void windowClosing(WindowEvent we) &#123;       System.exit(0);   &#125;&#125; int i;&#x2F;&#x2F; Strings for Digit &amp; Operator buttons.private final String[] str &#x3D; &#123; &quot;7&quot;, &quot;8&quot;, &quot;9&quot;, &quot;&#x2F;&quot;, &quot;4&quot;, &quot;5&quot;, &quot;6&quot;, &quot;*&quot;, &quot;1&quot;,       &quot;2&quot;, &quot;3&quot;, &quot;-&quot;, &quot;.&quot;, &quot;0&quot;, &quot;&#x3D;&quot;, &quot;+&quot; &#125;;&#x2F;&#x2F; Build buttons.JButton[] buttons &#x3D; new JButton[str.length];&#x2F;&#x2F; For cancel or reset.JButton reset &#x3D; new JButton(&quot;CE&quot;);&#x2F;&#x2F; Build the text field to show the result.JTextField display &#x3D; new JTextField(&quot;0&quot;);   &#x2F;** * Constructor without parameters. *&#x2F;public JCalculator() &#123;   super(&quot;计算器&quot;);   &#x2F;&#x2F; Add a panel.   JPanel panel1 &#x3D; new JPanel(new GridLayout(4, 4));   &#x2F;&#x2F; panel1.setLayout(new GridLayout(4,4));   for (i &#x3D; 0; i &lt; str.length; i++) &#123;       buttons[i] &#x3D; new JButton(str[i]);       panel1.add(buttons[i]);   &#125;   JPanel panel2 &#x3D; new JPanel(new BorderLayout());   &#x2F;&#x2F; panel2.setLayout(new BorderLayout());   panel2.add(&quot;Center&quot;, display);   panel2.add(&quot;East&quot;, reset);   &#x2F;&#x2F; JPanel panel3 &#x3D; new Panel();   getContentPane().setLayout(new BorderLayout());   getContentPane().add(&quot;North&quot;, panel2);   getContentPane().add(&quot;Center&quot;, panel1);   &#x2F;&#x2F; Add action listener for each digit &amp; operator button.   for (i &#x3D; 0; i &lt; str.length; i++)       buttons[i].addActionListener(this);   &#x2F;&#x2F; Add listener for &quot;reset&quot; button.   reset.addActionListener(this);   &#x2F;&#x2F; Add listener for &quot;display&quot; button.   display.addActionListener(this);   &#x2F;&#x2F; The &quot;close&quot; button &quot;X&quot;.   addWindowListener(new WindowCloser());   &#x2F;&#x2F; Initialize the window size.   setSize(800, 800);   &#x2F;&#x2F; Show the window.   &#x2F;&#x2F; show(); Using show() while JDK version is below 1.5.   setVisible(true);   &#x2F;&#x2F; Fit the certain size.   pack();&#125;     public void actionPerformed(ActionEvent e) &#123;   Object target &#x3D; e.getSource();   String label &#x3D; e.getActionCommand();   if (target &#x3D;&#x3D; reset)       handleReset();   else if (&quot;0123456789.&quot;.indexOf(label) &gt; 0)       handleNumber(label);   else       handleOperator(label);&#125;&#x2F;&#x2F; Is the first digit pressed?boolean isFirstDigit &#x3D; true;&#x2F;** * Number handling. * @param key the key of the button. *&#x2F;public void handleNumber(String key) &#123;   if (isFirstDigit)       display.setText(key);   else if ((key.equals(&quot;.&quot;)) &amp;&amp; (display.getText().indexOf(&quot;.&quot;) &lt; 0))       display.setText(display.getText() + &quot;.&quot;);   else if (!key.equals(&quot;.&quot;))       display.setText(display.getText() + key);   isFirstDigit &#x3D; false;&#125;   &#x2F;** * Reset the calculator. *&#x2F;public void handleReset() &#123;   display.setText(&quot;0&quot;);   isFirstDigit &#x3D; true;   operator &#x3D; &quot;&#x3D;&quot;;&#125; double number &#x3D; 0.0;String operator &#x3D; &quot;&#x3D;&quot;;   &#x2F;** * Handling the operation. * @param key pressed operator&#39;s key. *&#x2F;public void handleOperator(String key) &#123;   if (operator.equals(&quot;+&quot;))       number +&#x3D; Double.valueOf(display.getText());   else if (operator.equals(&quot;-&quot;))       number -&#x3D; Double.valueOf(display.getText());   else if (operator.equals(&quot;*&quot;))       number *&#x3D; Double.valueOf(display.getText());   else if (operator.equals(&quot;&#x2F;&quot;))       number &#x2F;&#x3D; Double.valueOf(display.getText());   else if (operator.equals(&quot;&#x3D;&quot;))       number &#x3D; Double.valueOf(display.getText());   display.setText(String.valueOf(number));   operator &#x3D; key;   isFirstDigit &#x3D; true;&#125;   public static void main(String[] args) &#123;   new JCalculator();&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 程序运行结果为：</p><p><img src="%E5%9B%BE%E7%89%871.png"></p><p>更多知识关注微信公众号“51学代码”</p><p> <img src="51x.png"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>酒店管理系统</title>
      <link href="year/11/28/d_jiu_dian_guan_li_xi_tong_xiao_cheng_xu/"/>
      <url>year/11/28/d_jiu_dian_guan_li_xi_tong_xiao_cheng_xu/</url>
      
        <content type="html"><![CDATA[<p>编写一个Java项目：</p><p>为某个酒店编写程序：酒店管理系统，模拟订房、退房、打印所有房间状态等功能。<br>问题描述：<br>为某个酒店编写程序：酒店管理系统，模拟订房、退房、打印所有房间状态等功能。<br>1、该系统的用户是：酒店前台。<br>2、酒店使用一个二维数组来模拟。“Room[][] rooms;”<br>3、酒店中的每一个房间应该是一个java对象：Room<br>4、每一个房间Room应该有：房间编号、房间类型、房间是否空闲.<br>5、系统应该对外提供的功能：<br>可以预定房间：用户输入房间编号，订房。<br>可以退房：用户输入房间编号，退房。<br>可以查看所有房间的状态：用户输入某个指令应该可以查看所有房间状态。</p><p>酒店管理系统：模拟订房、退房、打印所有房间状态的功能</p><p>​     功能需求:</p><p>​              1,订房：用户可以输入房间编号可以订房<br>​              2,退房：用户可以输入房间编号进行退房<br>​              3,查看所有房间的状态：用户输入某些指令查看所有房间的状态</p><p>问题分析：<br>定义Room和Hotel类，Hotel里面包含一个Room类的二维数组用来模拟每一个不同楼层的房间号。依次实现相应要求。<br>代码实现：<br>Room类：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Room &#123;    &#x2F;&#x2F;房间编号    private int no;    &#x2F;&#x2F;房间类型    private String type;    &#x2F;&#x2F;房间状态，true表示可以被预定，false表示不可被预定    private boolean status;    public int getNo() &#123;        return no;    &#125;    &#x2F;&#x2F;构造方法    public Room() &#123;    &#125;    public Room(int no, String type, boolean status) &#123;        this.no &#x3D; no;        this.type &#x3D; type;        this.status &#x3D; status;    &#125;    &#x2F;&#x2F;封装    public void setNo(int no) &#123;        this.no &#x3D; no;    &#125;    public String getType() &#123;        return type;    &#125;    public void setType(String type) &#123;        this.type &#x3D; type;    &#125;    public boolean getStatus() &#123;        return status;    &#125;    public void setStatus(boolean status) &#123;        this.status &#x3D; status;    &#125;    &#x2F;&#x2F;toString方法重写    @Override    public String toString() &#123;        return &quot;[&quot; + no + &quot;,&quot; + type + &quot;,&quot; + (status ? &quot;可预订&quot;:&quot;不可预定&quot;) + &quot;]&quot;;    &#125;    &#x2F;&#x2F;equals方法重写    @Override    public boolean equals(Object obj) &#123;        if(obj &#x3D;&#x3D; null || !(obj instanceof Room)) return false;&#x2F;&#x2F;传来的为空或不是Room类直接返回false        if (this &#x3D;&#x3D; obj) return true;&#x2F;&#x2F;如果内存地址一样，直接返回true        Room r &#x3D; (Room)obj;&#x2F;&#x2F;强制类型转换        return this.getNo() &#x3D;&#x3D; r.getNo();     &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Hotel类：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Hotel &#123;    private Room[][] rooms;    &#x2F;&#x2F;构造方法    public Hotel() &#123;        &#x2F;&#x2F;一共三层，一层单人间，二层双人间，三层豪华间        &#x2F;&#x2F;动态初始化        rooms &#x3D; new Room[4][10];        for (int i &#x3D; 0; i &lt; rooms.length; i++) &#123;            for (int j &#x3D; 0; j &lt; rooms[i].length; j++) &#123;                if (i &#x3D;&#x3D; 0) rooms[i][j] &#x3D; new Room((i+1) * 100 + j + 1,&quot;单人间&quot;,true);                else if (i &#x3D;&#x3D; 1) rooms[i][j] &#x3D; new Room((i+1) * 100 + j + 1,&quot;双人间&quot;,true);                else if (i &#x3D;&#x3D; 2) rooms[i][j] &#x3D; new Room((i+1) * 100 + j + 1,&quot;豪华间&quot;,true);                else if (i &#x3D;&#x3D; 3) rooms[i][j] &#x3D; new Room((i+1) * 100 + j + 1,&quot;情侣间&quot;,true);            &#125;        &#125;    &#125;    public void print()&#123;        for (int i &#x3D; 0; i &lt; rooms.length; i++) &#123;            for (int j &#x3D; 0; j &lt; rooms[i].length; j++) &#123;                System.out.print(rooms[i][j]);            &#125;            System.out.println();        &#125;    &#125;    &#x2F;&#x2F;订房间方法    public void order(int roomNo)&#123;        &#x2F;&#x2F;根据房间编号计算在数组中的坐标        Room room &#x3D; rooms[roomNo &#x2F; 100 - 1][roomNo % 10 - 1];        room.setStatus(false);        System.out.println(roomNo + &quot;房间,已成功预订！&quot;);    &#125;    &#x2F;&#x2F;退房    public void exit(int roomNo)&#123;        Room room &#x3D; rooms[roomNo &#x2F; 100 -1][roomNo % 10 - 1];        room.setStatus(true);        System.out.println(roomNo + &quot;房间,已成功退房！&quot;);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>HotelMgtSystem类：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">import java.util.Scanner;public class HotelMgtSystem &#123;    public static void main(String[] args) &#123;        Hotel h &#x3D; new Hotel();        System.out.println(&quot;欢迎使用酒店管理系统，请认真阅读以下使用说明：&quot;);        System.out.println(&quot;请输入对应的功能编号：[1]表示查看房间状况；[2]表示订房；[3]表示退房；[0]表示退出&quot;);        System.out.println(&quot;请输入功能编号：&quot;);        while (true) &#123;            Scanner s &#x3D; new Scanner(System.in);            int i &#x3D; s.nextInt();            if (i &#x3D;&#x3D; 1) &#123;                h.print();            &#125; else if (i &#x3D;&#x3D; 2) &#123;                System.out.println(&quot;请输入要预定的房间编号：&quot;);                Scanner n &#x3D; new Scanner(System.in);                int roomNo &#x3D; n.nextInt();                h.order(roomNo);            &#125; else if (i &#x3D;&#x3D; 3) &#123;                System.out.println(&quot;请输入要退房的房间编号：&quot;);                Scanner n &#x3D; new Scanner(System.in);                int roomNo &#x3D; n.nextInt();                h.exit(roomNo);            &#125; else if (i &#x3D;&#x3D; 0) &#123;                System.out.println(&quot;欢迎下次光临&quot;);                return;            &#125; else System.out.println(&quot;输入的功能编号有误，请重新输入：&quot;);        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果为：</p><p><img src="%E5%9B%BE%E7%89%871.png"></p><p><img src="%E5%9B%BE%E7%89%873.png"></p><p><img src="%E5%9B%BE%E7%89%875.png"></p><p>更多知识关注微信公众号“51学代码”</p><p><img src="51x.png"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>既然选择了远方,便只顾风雨兼程</title>
      <link href="year/10/29/a_re_ai_sheng_ming/"/>
      <url>year/10/29/a_re_ai_sheng_ming/</url>
      
        <content type="html"><![CDATA[<h2 id="热爱生命"><a href="#热爱生命" class="headerlink" title="热爱生命"></a>热爱生命</h2><p>我不去想是否能够成功<br>既然选择了远方便只顾风雨兼程<br>我不去想能否赢得爱情<br>既然钟情于玫瑰<br>就勇敢地吐露真诚<br>我不去想身后会不会袭来寒风冷雨<br>既然目标是地平线<br>留给世界的只能是背影<br>我不去想未来是平坦还是泥泞<br>只要热爱生命<br>一切，都在意料之中</p><h2 id="怀想"><a href="#怀想" class="headerlink" title="怀想"></a>怀想</h2><p>我不知道<br>是否  还在爱你<br>如果爱着<br>为什么<br>会有那样一次分离<br>我不知道<br>是否  早已不再爱你<br>如果不爱<br>为什么  记忆没有随着时光流去<br>回想你的笑靥 <br>我的心 起伏难平 <br>可恨一切 都已成为过去<br>只有婆娑的夜晚 <br>一如从前  那样美丽</p><h2 id="剪不断的情愫"><a href="#剪不断的情愫" class="headerlink" title="剪不断的情愫"></a>剪不断的情愫</h2><p>原想这一次远游 <br>就能忘记你秀美的双眸<br>就能剪断 丝丝缕缕的情愫<br>和秋风也吹不落的忧愁 </p><p>谁曾想 到头来 <br>山河依旧<br>爱也依旧<br>你的身影 <br>刚在身后 又到前头</p><h2 id="假如你不够快乐"><a href="#假如你不够快乐" class="headerlink" title="假如你不够快乐"></a>假如你不够快乐</h2><p>假如你不够快乐 <br>也不要把眉头深锁 <br>人生本来短暂 <br>为什么 还要栽培苦涩 <br>打开尘封的门窗<br>让阳光雨露洒遍每个角落<br>走向生命的原野 <br>让风儿熨平前额 <br>博大可以稀释忧愁 <br>深色能够覆盖浅色</p><p>以上均出自《汪国真诗歌集》<br>更多IT问题欢迎关注微信公众号“51学代码”</p><p><img src="51x.png"></p>]]></content>
      
      
      <categories>
          
          <category> 诗歌 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗歌 </tag>
            
            <tag> 经典语句 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>www.51xcode.com</title>
      <link href="year/10/26/b_wo_de_meng_xiang/"/>
      <url>year/10/26/b_wo_de_meng_xiang/</url>
      
        <content type="html"><![CDATA[<p>不是每个人都应该像我这样去建造一座水晶大教堂，但是每个人都应该拥有自己的梦想，设计自己的梦想，追求自己的梦想，实现自己的梦想。梦想是生命的灵魂，是心灵的灯塔，是引导人走向成功的信仰。有了崇高的梦想，只要矢志不渝地追求，梦想就会成为现实，奋斗就会变成壮举，生命就会创造奇迹。——罗伯·舒乐</p>]]></content>
      
      
      <categories>
          
          <category> 名言警句 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 经典语句 </tag>
            
            <tag> 名人名言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Idea的安装</title>
      <link href="year/10/26/c_idea_de_an_zhuang_yu_shi_yong/"/>
      <url>year/10/26/c_idea_de_an_zhuang_yu_shi_yong/</url>
      
        <content type="html"><![CDATA[<h2 id="idea-的安装与使用"><a href="#idea-的安装与使用" class="headerlink" title="idea 的安装与使用"></a>idea 的安装与使用</h2><p>intellij idea 2018.1.6于近日发布啦，新版本进行一次重大更新，针对java，JVM调试器，Java编译器，编辑，项目配置，搜索和替换，用户界面，Kotlin插件，版本控制工具进行了全面优化调整和更新，比如Kotlin插件更新至1.2.30；改进了数据流分析以便可以跟踪变量之间的关系；支持JUnit5 Tag注释，可以在测试范围中包含标记类和标记方法；支持部分Git提交；具备新的Java 9检测和快速修复；合并了Android Studio 3.0中的更改，并包含数十项新功能等等，intellij idea 2018.1将为程序员大幅度的提高工作效率，绝对值得用户升级更新。<br>ps：这里小编带来的intellij idea 2018破解版下载，同时包括了相应的汉化补丁，以及相应的注册码，可以完美成功将软件汉化激活，其详细的安装教程可以参考下文。</p><hr><h2 id="软件功能"><a href="#软件功能" class="headerlink" title="软件功能"></a>软件功能</h2><p>1、智能代码完成<br>虽然基本完成提示了可见性范围内的类，方法，字段和关键字的名称，但智能完成仅提示当前上下文中预期的那些类型。<br>2、框架特定的援助<br>尽管IntelliJ IDEA是Java的IDE，但它也可以理解并为各种其他语言（如SQL，JPQL，HTML，JavaScript等）提供智能编码帮助，即使将语言表达式注入到您的字符串文本中Java代码。<br>3、生产力推动者<br>IDE预测您的需求并自动执行繁琐且重复的开发任务，以便您可以专注于全局。<br>4、开发人员的人机工程学<br>在我们制定的每个设计和实施决策中，我们都铭记着中断开发人员流程的风险，并尽最大努力消除或尽量减少开发人员的流量。<br>IDE遵循您的上下文并自动提供相应的工具。<br>5、不显眼的情报<br>IntelliJ IDEA中的编码协助不仅仅是编辑器：它帮助您在处理其他部分时保持高效：例如填写一个字段，搜索元素列表; 访问工具窗口; 或切换设置等。<br>6、数据流分析<br>提供完成变体时，IntelliJ IDEA分析数据流以猜测可能的运行时符号类型，并根据该智能体改进选择，自动添加类转换。<br>7、语言注入<br>将选定语言的编码帮助带到另一个语言的表达式和字符串文字中，并具有您通常拥有的所有优点。例如，您可以将SQL，XPath，HTML，CSS或JavaScript代码片段注入到Java字符串文字中。<br>8、跨语言重构<br>IntelliJ IDEA知道符号使用的所有方面，提供非常有效，彻底的重构。例如，当您在JPA语句中重命名类时，它会将所有内容（从JPA实体类）更新到使用它的每个JPA表达式。<br>9、内置开发人员工具</p><h2 id="为了简化工作流程，IntelliJ-IDEA从第一次开始就提供了无与伦比的工具集：反编译器，字节码查看器，FTP等等。"><a href="#为了简化工作流程，IntelliJ-IDEA从第一次开始就提供了无与伦比的工具集：反编译器，字节码查看器，FTP等等。" class="headerlink" title="为了简化工作流程，IntelliJ IDEA从第一次开始就提供了无与伦比的工具集：反编译器，字节码查看器，FTP等等。"></a>为了简化工作流程，IntelliJ IDEA从第一次开始就提供了无与伦比的工具集：反编译器，字节码查看器，FTP等等。</h2><h2 id="ntellij-idea-2018-1-6中文破解安装教程："><a href="#ntellij-idea-2018-1-6中文破解安装教程：" class="headerlink" title="ntellij idea 2018.1.6中文破解安装教程："></a>ntellij idea 2018.1.6中文破解安装教程：</h2><p>1、下载解压，得到intellij idea 2018.1.6原程序、中文补丁包和破解文件；</p><p><img src="%E5%9B%BE%E7%89%8715.png"></p><p>2、运行“ideaIU-2018.1”开始安装；</p><p><img src="%E5%9B%BE%E7%89%871.png"></p><p>3、安装目录默认为【C:\Program Files\JetBrains\IntelliJ IDEA 2018.1】建议不更改；</p><p><img src="%E5%9B%BE%E7%89%872.png"></p><p>4、勾选创建intellij idea 2018.1桌面快捷方式，小编选择64位，自行选择关联文件格式；</p><p><img src="%E5%9B%BE%E7%89%8716.png"></p><p>5、点install，开始安装，请耐心等一下；</p><p><img src="%E5%9B%BE%E7%89%873.png"></p><p>6、安装完成后，注意先不运行软件，所以不要勾选；</p><p><img src="%E5%9B%BE%E7%89%874.png"></p><p>7、安装完成后，先不要打开软件，将破解文件“JetbrainsCrack.jar”复制到软件安装目录【C:\Program Files\JetBrains\IntelliJ IDEA 2018.1\bin】；</p><p><img src="%E5%9B%BE%E7%89%875.png"></p><p>8、再用记事本打开“idea64.exe.vmoptions”和“idea.exe.vmoptions”这两个文件，再后面添加破解文件的路径，就是中括号中的内容【-javaagent:C:\Program Files\JetBrains\IntelliJ IDEA 2018.1\bin\JetbrainsCrack.jar】</p><p><img src="%E5%9B%BE%E7%89%876.png"></p><p>9、现在进行桌面上生成的intellij idea 2018.1快捷方式，选择do not import settings点击ok；</p><p><img src="%E5%9B%BE%E7%89%877.png"></p><p>10、阅读软件协议，拖动滑块，再点击accept输入产品注册码，选择activation code，将注册码复制进去即可。<br>intellij idea 2018.1注册码如下：<br>ThisCrackLicenseId-{<br>“licenseId”:”ThisCrackLicenseId”,<br>“licenseeName”:”Admin”,<br>“assigneeName”:””,<br>“assigneeEmail”:”<a href="mailto:&#x61;&#118;&#x78;&#104;&#109;&#46;&#x73;&#101;&#x40;&#103;&#109;&#97;&#x69;&#x6c;&#46;&#99;&#111;&#109;">&#x61;&#118;&#x78;&#104;&#109;&#46;&#x73;&#101;&#x40;&#103;&#109;&#97;&#x69;&#x6c;&#46;&#99;&#111;&#109;</a>“,<br>“licenseRestriction”:”Admin”,<br>“checkConcurrentUse”:false,<br>“products”:[<br>{“code”:”II”,”paidUpTo”:”2099-12-31”},<br>{“code”:”DM”,”paidUpTo”:”2099-12-31”},<br>{“code”:”AC”,”paidUpTo”:”2099-12-31”},<br>{“code”:”RS0”,”paidUpTo”:”2099-12-31”},<br>{“code”:”WS”,”paidUpTo”:”2099-12-31”},<br>{“code”:”DPN”,”paidUpTo”:”2099-12-31”},<br>{“code”:”RC”,”paidUpTo”:”2099-12-31”},<br>{“code”:”PS”,”paidUpTo”:”2099-12-31”},<br>{“code”:”DC”,”paidUpTo”:”2099-12-31”},<br>{“code”:”RM”,”paidUpTo”:”2099-12-31”},<br>{“code”:”CL”,”paidUpTo”:”2099-12-31”},<br>{“code”:”PC”,”paidUpTo”:”2099-12-31”}<br>],<br>“hash”:”2911276/0”,<br>“gracePeriodDays”:7,<br>“autoProlongated”:false}</p><p><img src="%E5%9B%BE%E7%89%878.png"></p><p><img src="%E5%9B%BE%E7%89%879.png"></p><p><img src="%E5%9B%BE%E7%89%8710.png"></p><p>11、至此，intellij idea 2018.1.6中文破解版成功激活，用户可以无限制免费使用。</p><p><img src="%E5%9B%BE%E7%89%8711.png"></p><p><img src="%E5%9B%BE%E7%89%8712.png"></p><p>12、软件默认为英文界面，我们打开安装目录下的“lib”文件夹，将原来的resources_en.jar英文版文件删除，再将汉化补丁“resources_cn.jar”复制入内即可，默认安装路径为C:\Program Files\JetBrains\IntelliJ IDEA 2018.1\lib</p><p><img src="%E5%9B%BE%E7%89%8713.png"></p><p>13、再次打开软件，可以看到intellij idea 2018.1.6已经是中文版本。</p><p><img src="%E5%9B%BE%E7%89%8714.png"></p><p>注意乱码：<br>如果打开后显示乱码，请先删除resources_cn.jar，然后打开IntelliJ IDEA，在菜单上依次选择<br> File -&gt; Settings -&gt; Appearance&amp;Behavior -&gt; Appearance -&gt; 选中Override default fonts by(not recommended)<br>Name: Microsoft YaHei (选择任意中文字体)</p><h2 id="然后将resources-cn-jar-复制到-lib-目录，重新打开intellij-idea-2018就能正常显示中文了。"><a href="#然后将resources-cn-jar-复制到-lib-目录，重新打开intellij-idea-2018就能正常显示中文了。" class="headerlink" title="然后将resources_cn.jar 复制到 .\lib 目录，重新打开intellij idea 2018就能正常显示中文了。"></a>然后将resources_cn.jar 复制到 .\lib 目录，重新打开intellij idea 2018就能正常显示中文了。</h2><h2 id="intellij-idea-2018-1新功能："><a href="#intellij-idea-2018-1新功能：" class="headerlink" title="intellij idea 2018.1新功能："></a>intellij idea 2018.1新功能：</h2><p>一、Java<br>1、代码完成的增强<br>Stream API链中的完成现在知道类型转换。代码完成不仅可以根据现有的调用过滤器（String.class :: isInstance）建议完成项目，还可以为自动类型转换完成项目提供完成项目。<br>2、数据流分析<br>我们改进了数据流分析，以便现在可以跟踪变量之间的关系，如“大于”和“小于”。IDE在所有可能的代码路径中检测条件始终为真（或为假）时的变量进行比较。<br>当您尝试将变量分配给其已包含的相同值时，IDE现在会警告您。这可能会帮助您检测并删除一些冗余代码。<br>该数据流分析现在适用于非终止流API链。<br>IDE还会警告您对不可变集合的修改。<br>3、缺少ServiceLoader声明<br>IntelliJ IDEA 2018.1具有新的Java 9检测和快速修复。IDE现在检查由ServiceLoader加载的服务是否在module-info.java文件中声明，并提供快速修复以将缺少的语句添加到module-info.java文件。<br>4、创建缺失的类<br>对于module-info.java中提到的未解决的类，IDE将建议创建缺少的类，并创建缺少的导出包。请注意，IDE使用所需目录中的类创建包，因为无法导出Java 9中的空包。<br>5、幂等身体检测<br>IDE将检测并警告您使用幂等体的while循环，因为在大多数情况下，这表示编程错误并可能导致程序挂起。<br>6、将无限循环的中断条件移至循环条件<br>对于while循环，现在您会在无限循环结束或开始时收到有关条件中断的通知。IDE将建议将一个休息条件移至循环条件，并提供快速修复以修改您的循环。通常用循环条件替换条件中断使代码更清晰。<br>7、显式多余的close（）调用<br>IntelliJ IDEA现在会在try-with-resources块的末尾检测资源的明确多余的close（）调用。<br>8、无限流检测<br>IntelliJ IDEA会警告你任何没有短路的无限流，因为这种操作只能通过抛出异常来完成。此类代码可能导致无限循环或内存不足问题。<br>9、复制构造函数与缺少字段检测<br>在IntelliJ IDEA 2018.1中，如果有复制构造函数不复制类中的所有字段，则会收到通知。IDE认为不需要复制瞬态修改器的字段。<br>10、排列数组内容<br>数组初始化程序和可变参数中提供了一个新的Sort内容操作。这个新动作按字母顺序对内容进行排序。<br>11、JUnit 5 @Tag注释支持<br>IntelliJ IDEA 2018.1现在支持JUnit5 @Tag注释，因此您现在可以在测试范围中包含标记类和标记方法。在运行/调试配置对话框的测试种类字段中选择标签（JUnit 5）选项。使用Uniqueld字段根据其ID来过滤测试。<br>二、JVM调试器<br>1、抛出异常<br>IntelliJ IDEA 2018.1有一个新的Throw Exception操作，允许您在程序中的特定位置抛出异常而无需更改代码。它可从Run |中获得 抛出异常菜单，或在调试会话期间从框架上下文菜单中。<br>2、将堆栈跟踪记录到控制台<br>IDE现在允许您将断点堆栈跟踪打印到控制台。您可以在“ 断点”对话框中启用堆栈跟踪选项。在IntelliJ IDEA中，您现在可以在控制台日志中同时观察多个断点堆栈跟踪。<br>3、复制当前线程堆栈跟踪<br>您现在可以通过框架上下文菜单中提供的新复制堆栈操作复制当前线程堆栈跟踪。<br>4、异步堆栈跟踪的注释<br>使用IntelliJ IDEA 2018.1，我们扩展了异步堆栈跟踪功能，以便您现在可以使用@Async.Schedule和@ Async.Execute注释来设置未包含在默认配置中的捕获点。您只需将Maven工件添加为依赖项即可。<br>三、Java编译器<br>在“首选项” | “ Java编译器”页面上，有一个新的Use –release选项用于交叉编译（Java 9和更高版本）复选框。构建，执行，部署 | 编译器 | Java编译器默认启用。当您需要在Java 9中使用–source和–target选项并同时链接到Java 9类时，可以禁用此复选框。<br>您也可以使用特定版本的ECJ编译器。从Use Compiler下拉菜单中选择Eclipse，然后使用所选编译器指定jar的路径。<br>四、编辑<br>1、折叠的代码突出显示<br>如果您的代码中发现任何问题，现在您可以比以前更快地找到它们。IDE现在突出显示包含错误或警告的折叠代码区域，并根据它们的验证状态对块进行着色。<br>2、使用搜索结果突出显示折叠的代码区域<br>如果在搜索当前文件时IDE还包含任何匹配项，IDE还会突出显示折叠代码区域。<br>3、内联外部注释<br>在IntelliJ IDEA中，即使无法直接注释源代码（库类），也可以使用外部注释来注释代码。您可以在annotations.xml文件中配置注释，这些文件存储在源代码之外。以前，IDE仅在外部注释代码附近的装订线中显示@图标; 现在IDE将在代码中显示这些外部注释。<br>4、推断的注释提示<br>IntelliJ IDEA现在允许您在源代码中正确查看@NotNull或@Nullable注释的自动推断（不仅在推断注释附近的排水沟图标中，就像以前一样）。您可以在首选项 |中启用内联显示推断注释复选框 编辑 | 一般 | 外观。<br>五、项目配置<br>1、将“提供的”依赖关系添加到类路径中<br>一个新的包括与“设置”依赖范围复选框已经在被添加运行/调试配置为应用程序和春季启动配置。如果您为项目中的作用域提供了依赖关系，但是您在应用程序中运行应用程序（在提供依赖关系由容器提供的情况下）和在容器外部运行应用程序（其中提供的依赖项不会自动提供）。<br>2、新的更改模块名称…操作<br>使用IntelliJ IDEA，您现在可以一次更改多个模块的限定名称。这是通过“ 项目结构”对话框的上下文菜单中的“ 更改模块名称…”操作完成的。<br>六、搜索和替换<br>1、结构搜索增强<br>使用IntelliJ IDEA 2018.1，您可以使用结构搜索找到对注释方法的方法调用。您可以从现有搜索模板中选择它们或创建您自己的搜索模板。<br>2、替换路径改进<br>IntelliJ IDEA 2018.1能够在“ 替换路径”对话框中预览正则表达式替换。<br>七、科特林<br>与IDE捆绑在一起的Kotlin插件已更新至Kotlin 1.2.30<br>1、将Kotlin代码粘贴到一个包中<br>现在，在项目工具窗口中，您可以直接将代码片段粘贴到包中，IDE将使用粘贴的代码创建一个新的Kotlin文件。<br>2、转换范围函数调用的意图<br>在科特林插件现在提供转换作用域函数调用新的用心让和运行相互转化，以及还为应用，反之亦然。</p><hr><h2 id="更多知识关注微信公众号“51学代码”"><a href="#更多知识关注微信公众号“51学代码”" class="headerlink" title="更多知识关注微信公众号“51学代码”"></a>更多知识关注微信公众号“51学代码”</h2><p><img src="51x.png"></p><p>免责声明:以上内容如有侵权，请联系作者删除<br>添加作者QQ:1823782755 获取idea破解版安装包。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> idea </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
